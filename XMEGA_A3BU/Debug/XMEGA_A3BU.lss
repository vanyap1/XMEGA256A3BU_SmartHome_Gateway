
XMEGA_A3BU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000676a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000008c6  00802000  0000676a  000067fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000008dc  008028c6  008028c6  000070c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000070c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00007120  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00007164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c3c4  00000000  00000000  000076cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004937  00000000  00000000  00013a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003ca7  00000000  00000000  000183c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000126c  00000000  00000000  0001c070  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004613  00000000  00000000  0001d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e9c  00000000  00000000  000218ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000588  00000000  00000000  0002778b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 25 10 	jmp	0x204a	; 0x204a <__ctors_end>
       4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
       8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
       c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      10:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      14:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      18:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      1c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      20:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      24:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      28:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      2c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      30:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      34:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      38:	0c 94 af 12 	jmp	0x255e	; 0x255e <__vector_14>
      3c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      40:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      44:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      48:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      4c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      50:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      54:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      58:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      5c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      60:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      64:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      68:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      6c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      70:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      74:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      78:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      7c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      80:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      84:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      88:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      8c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      90:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      94:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      98:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      9c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      a0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      a4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      a8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      ac:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      b0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      b4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      b8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      bc:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      c0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      c4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      c8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      cc:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      d0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      d4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      d8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      dc:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      e0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      e4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      e8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      ec:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      f0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      f4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      f8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
      fc:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     100:	0c 94 1b 13 	jmp	0x2636	; 0x2636 <__vector_64>
     104:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     108:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     10c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     110:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     114:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     118:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     11c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     120:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     124:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     128:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     12c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     130:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     134:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     138:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     13c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     140:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     144:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     148:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     14c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     150:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     154:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     158:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     15c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     160:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     164:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     168:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     16c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     170:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     174:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     178:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     17c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     180:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     184:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     188:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     18c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     190:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     194:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     198:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     19c:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1a0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1a4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1a8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1ac:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1b0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1b4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1b8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1bc:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1c0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1c4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1c8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1cc:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1d0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1d4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1d8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1dc:	0c 94 48 10 	jmp	0x2090	; 0x2090 <__vector_119>
     1e0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1e4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1e8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1ec:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1f0:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1f4:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1f8:	0c 94 46 10 	jmp	0x208c	; 0x208c <__bad_interrupt>
     1fc:	11 23       	and	r17, r17
     1fe:	29 23       	and	r18, r25
     200:	38 23       	and	r19, r24
     202:	47 23       	and	r20, r23
     204:	70 23       	and	r23, r16
     206:	80 23       	and	r24, r16
     208:	35 24       	eor	r3, r5
     20a:	a9 23       	and	r26, r25
     20c:	cf 23       	and	r28, r31
     20e:	d6 23       	and	r29, r22
     210:	dd 23       	and	r29, r29
     212:	ec 23       	and	r30, r28
     214:	15 24       	eor	r1, r5

00000216 <__trampolines_start>:
     216:	0c 94 46 28 	jmp	0x508c	; 0x508c <wizchip_bus_readdata>
     21a:	0c 94 ec 23 	jmp	0x47d8	; 0x47d8 <getsockopt+0x1e4>
     21e:	0c 94 cf 23 	jmp	0x479e	; 0x479e <getsockopt+0x1aa>
     222:	0c 94 d6 23 	jmp	0x47ac	; 0x47ac <getsockopt+0x1b8>
     226:	0c 94 a6 12 	jmp	0x254c	; 0x254c <W5500_WriteBuff>
     22a:	0c 94 a9 12 	jmp	0x2552	; 0x2552 <W5500_ReadByte>
     22e:	0c 94 97 12 	jmp	0x252e	; 0x252e <W5500_Select>
     232:	0c 94 9d 12 	jmp	0x253a	; 0x253a <W5500_Unselect>
     236:	0c 94 43 28 	jmp	0x5086	; 0x5086 <wizchip_cris_exit>
     23a:	0c 94 70 23 	jmp	0x46e0	; 0x46e0 <getsockopt+0xec>
     23e:	0c 94 15 24 	jmp	0x482a	; 0x482a <getsockopt+0x236>
     242:	0c 94 29 23 	jmp	0x4652	; 0x4652 <getsockopt+0x5e>
     246:	0c 94 44 28 	jmp	0x5088	; 0x5088 <wizchip_cs_select>
     24a:	0c 94 4e 28 	jmp	0x509c	; 0x509c <wizchip_spi_writebyte>
     24e:	0c 94 45 28 	jmp	0x508a	; 0x508a <wizchip_cs_deselect>
     252:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <debugSerialPutChar>
     256:	0c 94 a9 23 	jmp	0x4752	; 0x4752 <getsockopt+0x15e>
     25a:	0c 94 4c 28 	jmp	0x5098	; 0x5098 <wizchip_spi_readbyte>
     25e:	0c 94 80 23 	jmp	0x4700	; 0x4700 <getsockopt+0x10c>
     262:	0c 94 38 23 	jmp	0x4670	; 0x4670 <getsockopt+0x7c>
     266:	0c 94 42 28 	jmp	0x5084	; 0x5084 <wizchip_cris_enter>
     26a:	0c 94 dd 23 	jmp	0x47ba	; 0x47ba <getsockopt+0x1c6>
     26e:	0c 94 49 28 	jmp	0x5092	; 0x5092 <wizchip_bus_writedata>
     272:	0c 94 35 24 	jmp	0x486a	; 0x486a <getsockopt+0x276>
     276:	0c 94 a3 12 	jmp	0x2546	; 0x2546 <W5500_ReadBuff>
     27a:	0c 94 4f 28 	jmp	0x509e	; 0x509e <wizchip_spi_readburst>
     27e:	0c 94 47 23 	jmp	0x468e	; 0x468e <getsockopt+0x9a>
     282:	0c 94 ac 12 	jmp	0x2558	; 0x2558 <W5500_Write_byte>
     286:	0c 94 11 23 	jmp	0x4622	; 0x4622 <getsockopt+0x2e>
     28a:	0c 94 50 28 	jmp	0x50a0	; 0x50a0 <wizchip_spi_writeburst>

0000028e <__trampolines_end>:
     28e:	63 64       	ori	r22, 0x43	; 67
     290:	69 6e       	ori	r22, 0xE9	; 233
     292:	6f 70       	andi	r22, 0x0F	; 15
     294:	73 75       	andi	r23, 0x53	; 83
     296:	78 58       	subi	r23, 0x88	; 136
     298:	5b 00       	.word	0x005b	; ????

0000029a <psu_page>:
     29a:	48 54 54 50 2f 31 2e 31 20 32 30 30 20 4f 4b 0d     HTTP/1.1 200 OK.
     2aa:	0a 43 6f 6e 74 65 6e 74 2d 54 79 70 65 3a 20 74     .Content-Type: t
     2ba:	65 78 74 2f 68 74 6d 6c 0d 0d 0a 0a 3c 21 44 4f     ext/html....<!DO
     2ca:	43 54 59 50 45 20 68 74 6d 6c 3e 0a 3c 68 74 6d     CTYPE html>.<htm
     2da:	6c 20 6c 61 6e 67 3d 22 65 6e 22 3e 0a 3c 68 65     l lang="en">.<he
     2ea:	61 64 3e 0a 3c 6d 65 74 61 20 63 68 61 72 73 65     ad>.<meta charse
     2fa:	74 3d 22 55 54 46 2d 38 22 3e 0a 3c 74 69 74 6c     t="UTF-8">.<titl
     30a:	65 3e 50 6f 77 65 72 20 53 75 70 70 6c 79 20 43     e>Power Supply C
     31a:	6f 6e 74 72 6f 6c 3c 2f 74 69 74 6c 65 3e 0a 3c     ontrol</title>.<
     32a:	73 74 79 6c 65 3e 0a 62 6f 64 79 20 7b 0a 66 6f     style>.body {.fo
     33a:	6e 74 2d 66 61 6d 69 6c 79 3a 20 41 72 69 61 6c     nt-family: Arial
     34a:	2c 20 73 61 6e 73 2d 73 65 72 69 66 3b 0a 64 69     , sans-serif;.di
     35a:	73 70 6c 61 79 3a 20 66 6c 65 78 3b 0a 66 6c 65     splay: flex;.fle
     36a:	78 2d 64 69 72 65 63 74 69 6f 6e 3a 20 63 6f 6c     x-direction: col
     37a:	75 6d 6e 3b 0a 61 6c 69 67 6e 2d 69 74 65 6d 73     umn;.align-items
     38a:	3a 20 63 65 6e 74 65 72 3b 0a 70 61 64 64 69 6e     : center;.paddin
     39a:	67 3a 20 32 30 70 78 3b 0a 62 61 63 6b 67 72 6f     g: 20px;.backgro
     3aa:	75 6e 64 3a 20 23 66 30 66 30 66 30 3b 0a 7d 0a     und: #f0f0f0;.}.
     3ba:	2e 63 6f 6e 74 61 69 6e 65 72 20 7b 0a 6d 61 78     .container {.max
     3ca:	2d 77 69 64 74 68 3a 20 34 30 30 70 78 3b 0a 77     -width: 400px;.w
     3da:	69 64 74 68 3a 20 31 30 30 25 3b 0a 62 61 63 6b     idth: 100%;.back
     3ea:	67 72 6f 75 6e 64 3a 20 77 68 69 74 65 3b 0a 70     ground: white;.p
     3fa:	61 64 64 69 6e 67 3a 20 32 30 70 78 3b 0a 62 6f     adding: 20px;.bo
     40a:	72 64 65 72 2d 72 61 64 69 75 73 3a 20 31 30 70     rder-radius: 10p
     41a:	78 3b 0a 62 6f 78 2d 73 68 61 64 6f 77 3a 20 30     x;.box-shadow: 0
     42a:	20 30 20 31 30 70 78 20 72 67 62 61 28 30 2c 20      0 10px rgba(0, 
     43a:	30 2c 20 30 2c 20 30 2e 31 29 3b 0a 7d 0a 2e 74     0, 0, 0.1);.}..t
     44a:	69 74 6c 65 20 7b 0a 74 65 78 74 2d 61 6c 69 67     itle {.text-alig
     45a:	6e 3a 20 63 65 6e 74 65 72 3b 0a 6d 61 72 67 69     n: center;.margi
     46a:	6e 2d 62 6f 74 74 6f 6d 3a 20 32 30 70 78 3b 0a     n-bottom: 20px;.
     47a:	7d 0a 2e 72 6f 77 2c 20 2e 69 6e 70 75 74 2d 72     }..row, .input-r
     48a:	6f 77 2c 20 2e 70 72 65 73 65 74 2d 72 6f 77 20     ow, .preset-row 
     49a:	7b 0a 64 69 73 70 6c 61 79 3a 20 66 6c 65 78 3b     {.display: flex;
     4aa:	0a 6a 75 73 74 69 66 79 2d 63 6f 6e 74 65 6e 74     .justify-content
     4ba:	3a 20 73 70 61 63 65 2d 62 65 74 77 65 65 6e 3b     : space-between;
     4ca:	0a 61 6c 69 67 6e 2d 69 74 65 6d 73 3a 20 63 65     .align-items: ce
     4da:	6e 74 65 72 3b 0a 6d 61 72 67 69 6e 2d 62 6f 74     nter;.margin-bot
     4ea:	74 6f 6d 3a 20 31 30 70 78 3b 0a 7d 0a 2e 72 6f     tom: 10px;.}..ro
     4fa:	77 20 6c 61 62 65 6c 2c 20 2e 69 6e 70 75 74 2d     w label, .input-
     50a:	72 6f 77 20 6c 61 62 65 6c 2c 20 2e 70 72 65 73     row label, .pres
     51a:	65 74 2d 72 6f 77 20 6c 61 62 65 6c 20 7b 0a 66     et-row label {.f
     52a:	6c 65 78 3a 20 31 3b 0a 7d 0a 2e 72 6f 77 20 69     lex: 1;.}..row i
     53a:	6e 70 75 74 2c 20 2e 69 6e 70 75 74 2d 72 6f 77     nput, .input-row
     54a:	20 69 6e 70 75 74 2c 20 2e 70 72 65 73 65 74 2d      input, .preset-
     55a:	72 6f 77 20 69 6e 70 75 74 20 7b 0a 77 69 64 74     row input {.widt
     56a:	68 3a 20 31 30 30 70 78 3b 0a 74 65 78 74 2d 61     h: 100px;.text-a
     57a:	6c 69 67 6e 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a     lign: center;.}.
     58a:	2e 62 75 74 74 6f 6e 2d 72 6f 77 20 7b 0a 64 69     .button-row {.di
     59a:	73 70 6c 61 79 3a 20 66 6c 65 78 3b 0a 6a 75 73     splay: flex;.jus
     5aa:	74 69 66 79 2d 63 6f 6e 74 65 6e 74 3a 20 73 70     tify-content: sp
     5ba:	61 63 65 2d 62 65 74 77 65 65 6e 3b 0a 6d 61 72     ace-between;.mar
     5ca:	67 69 6e 2d 74 6f 70 3a 20 32 30 70 78 3b 0a 7d     gin-top: 20px;.}
     5da:	0a 2e 62 75 74 74 6f 6e 20 7b 0a 77 69 64 74 68     ..button {.width
     5ea:	3a 20 34 38 25 3b 0a 70 61 64 64 69 6e 67 3a 20     : 48%;.padding: 
     5fa:	31 30 70 78 3b 0a 62 61 63 6b 67 72 6f 75 6e 64     10px;.background
     60a:	3a 20 23 30 30 37 62 66 66 3b 0a 63 6f 6c 6f 72     : #007bff;.color
     61a:	3a 20 77 68 69 74 65 3b 0a 62 6f 72 64 65 72 3a     : white;.border:
     62a:	20 6e 6f 6e 65 3b 0a 62 6f 72 64 65 72 2d 72 61      none;.border-ra
     63a:	64 69 75 73 3a 20 35 70 78 3b 0a 63 75 72 73 6f     dius: 5px;.curso
     64a:	72 3a 20 70 6f 69 6e 74 65 72 3b 0a 7d 0a 2e 62     r: pointer;.}..b
     65a:	75 74 74 6f 6e 3a 68 6f 76 65 72 20 7b 0a 62 61     utton:hover {.ba
     66a:	63 6b 67 72 6f 75 6e 64 3a 20 23 30 30 35 36 62     ckground: #0056b
     67a:	33 3b 0a 7d 0a 2e 70 72 65 73 65 74 2d 72 6f 77     3;.}..preset-row
     68a:	20 7b 0a 64 69 73 70 6c 61 79 3a 20 66 6c 65 78      {.display: flex
     69a:	3b 0a 6a 75 73 74 69 66 79 2d 63 6f 6e 74 65 6e     ;.justify-conten
     6aa:	74 3a 20 73 70 61 63 65 2d 62 65 74 77 65 65 6e     t: space-between
     6ba:	3b 0a 6d 61 72 67 69 6e 2d 74 6f 70 3a 20 32 30     ;.margin-top: 20
     6ca:	70 78 3b 0a 7d 0a 2e 70 72 65 73 65 74 2d 62 75     px;.}..preset-bu
     6da:	74 74 6f 6e 20 7b 0a 77 69 64 74 68 3a 20 33 32     tton {.width: 32
     6ea:	25 3b 0a 70 61 64 64 69 6e 67 3a 20 31 30 70 78     %;.padding: 10px
     6fa:	3b 0a 62 61 63 6b 67 72 6f 75 6e 64 3a 20 23 32     ;.background: #2
     70a:	38 61 37 34 35 3b 0a 63 6f 6c 6f 72 3a 20 77 68     8a745;.color: wh
     71a:	69 74 65 3b 0a 62 6f 72 64 65 72 3a 20 6e 6f 6e     ite;.border: non
     72a:	65 3b 0a 62 6f 72 64 65 72 2d 72 61 64 69 75 73     e;.border-radius
     73a:	3a 20 35 70 78 3b 0a 63 75 72 73 6f 72 3a 20 70     : 5px;.cursor: p
     74a:	6f 69 6e 74 65 72 3b 0a 7d 0a 2e 70 72 65 73 65     ointer;.}..prese
     75a:	74 2d 62 75 74 74 6f 6e 3a 68 6f 76 65 72 20 7b     t-button:hover {
     76a:	0a 62 61 63 6b 67 72 6f 75 6e 64 3a 20 23 32 31     .background: #21
     77a:	38 38 33 38 3b 0a 7d 0a 2e 73 65 70 61 72 61 74     8838;.}..separat
     78a:	6f 72 20 7b 0a 77 69 64 74 68 3a 20 31 30 30 25     or {.width: 100%
     79a:	3b 0a 68 65 69 67 68 74 3a 20 31 70 78 3b 0a 62     ;.height: 1px;.b
     7aa:	61 63 6b 67 72 6f 75 6e 64 3a 20 23 64 64 64 3b     ackground: #ddd;
     7ba:	0a 6d 61 72 67 69 6e 3a 20 32 30 70 78 20 30 3b     .margin: 20px 0;
     7ca:	0a 7d 0a 2e 72 6f 77 20 2e 73 70 61 63 65 64 2d     .}..row .spaced-
     7da:	69 6e 70 75 74 20 7b 0a 6d 61 72 67 69 6e 2d 6c     input {.margin-l
     7ea:	65 66 74 3a 20 31 30 70 78 3b 0a 7d 0a 2e 73 74     eft: 10px;.}..st
     7fa:	61 74 75 73 2d 69 6e 64 69 63 61 74 6f 72 20 7b     atus-indicator {
     80a:	0a 77 69 64 74 68 3a 20 32 30 70 78 3b 0a 68 65     .width: 20px;.he
     81a:	69 67 68 74 3a 20 32 30 70 78 3b 0a 62 6f 72 64     ight: 20px;.bord
     82a:	65 72 2d 72 61 64 69 75 73 3a 20 35 30 25 3b 0a     er-radius: 50%;.
     83a:	62 61 63 6b 67 72 6f 75 6e 64 3a 20 23 63 63 63     background: #ccc
     84a:	3b 20 2f 2a 20 44 65 66 61 75 6c 74 20 74 6f 20     ; /* Default to 
     85a:	67 72 61 79 20 2a 2f 0a 7d 0a 2e 69 6e 64 69 63     gray */.}..indic
     86a:	61 74 6f 72 2d 63 6f 6e 74 61 69 6e 65 72 20 7b     ator-container {
     87a:	0a 64 69 73 70 6c 61 79 3a 20 66 6c 65 78 3b 0a     .display: flex;.
     88a:	66 6c 65 78 2d 64 69 72 65 63 74 69 6f 6e 3a 20     flex-direction: 
     89a:	63 6f 6c 75 6d 6e 3b 0a 61 6c 69 67 6e 2d 69 74     column;.align-it
     8aa:	65 6d 73 3a 20 63 65 6e 74 65 72 3b 0a 7d 0a 2e     ems: center;.}..
     8ba:	69 6e 64 69 63 61 74 6f 72 2d 6c 61 62 65 6c 20     indicator-label 
     8ca:	7b 0a 6d 61 72 67 69 6e 2d 74 6f 70 3a 20 35 70     {.margin-top: 5p
     8da:	78 3b 0a 74 65 78 74 2d 61 6c 69 67 6e 3a 20 63     x;.text-align: c
     8ea:	65 6e 74 65 72 3b 0a 7d 0a 2e 63 68 65 63 6b 62     enter;.}..checkb
     8fa:	6f 78 2d 63 6f 6e 74 61 69 6e 65 72 20 7b 0a 64     ox-container {.d
     90a:	69 73 70 6c 61 79 3a 20 66 6c 65 78 3b 0a 61 6c     isplay: flex;.al
     91a:	69 67 6e 2d 69 74 65 6d 73 3a 20 63 65 6e 74 65     ign-items: cente
     92a:	72 3b 0a 6d 61 72 67 69 6e 2d 6c 65 66 74 3a 20     r;.margin-left: 
     93a:	31 30 70 78 3b 0a 7d 0a 2e 63 68 65 63 6b 62 6f     10px;.}..checkbo
     94a:	78 2d 63 6f 6e 74 61 69 6e 65 72 20 6c 61 62 65     x-container labe
     95a:	6c 20 7b 0a 6d 61 72 67 69 6e 2d 6c 65 66 74 3a     l {.margin-left:
     96a:	20 35 70 78 3b 0a 7d 0a 3c 2f 73 74 79 6c 65 3e      5px;.}.</style>
     97a:	0a 3c 2f 68 65 61 64 3e 0a 3c 62 6f 64 79 3e 0a     .</head>.<body>.
     98a:	3c 64 69 76 20 63 6c 61 73 73 3d 22 63 6f 6e 74     <div class="cont
     99a:	61 69 6e 65 72 22 3e 0a 3c 68 31 20 63 6c 61 73     ainer">.<h1 clas
     9aa:	73 3d 22 74 69 74 6c 65 22 3e 50 6f 77 65 72 20     s="title">Power 
     9ba:	53 75 70 70 6c 79 20 43 6f 6e 74 72 6f 6c 3c 2f     Supply Control</
     9ca:	68 31 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     h1>.<div class="
     9da:	72 6f 77 22 3e 0a 3c 6c 61 62 65 6c 3e 50 72 65     row">.<label>Pre
     9ea:	73 65 74 20 41 6d 70 20 2f 20 44 4d 4d 3a 3c 2f     set Amp / DMM:</
     9fa:	6c 61 62 65 6c 3e 0a 3c 69 6e 70 75 74 20 74 79     label>.<input ty
     a0a:	70 65 3d 22 74 65 78 74 22 20 69 64 3d 22 61 6d     pe="text" id="am
     a1a:	70 2d 73 65 74 22 20 72 65 61 64 6f 6e 6c 79 20     p-set" readonly 
     a2a:	63 6c 61 73 73 3d 22 73 70 61 63 65 64 2d 69 6e     class="spaced-in
     a3a:	70 75 74 22 3e 0a 3c 69 6e 70 75 74 20 74 79 70     put">.<input typ
     a4a:	65 3d 22 74 65 78 74 22 20 69 64 3d 22 61 6d 70     e="text" id="amp
     a5a:	2d 64 6d 6d 22 20 72 65 61 64 6f 6e 6c 79 20 63     -dmm" readonly c
     a6a:	6c 61 73 73 3d 22 73 70 61 63 65 64 2d 69 6e 70     lass="spaced-inp
     a7a:	75 74 22 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69 76     ut">.</div>.<div
     a8a:	20 63 6c 61 73 73 3d 22 72 6f 77 22 3e 0a 3c 6c      class="row">.<l
     a9a:	61 62 65 6c 3e 50 72 65 73 65 74 20 56 6f 6c 74     abel>Preset Volt
     aaa:	20 2f 20 44 4d 4d 3a 3c 2f 6c 61 62 65 6c 3e 0a      / DMM:</label>.
     aba:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 74 65 78     <input type="tex
     aca:	74 22 20 69 64 3d 22 76 6f 6c 74 2d 73 65 74 22     t" id="volt-set"
     ada:	20 72 65 61 64 6f 6e 6c 79 20 63 6c 61 73 73 3d      readonly class=
     aea:	22 73 70 61 63 65 64 2d 69 6e 70 75 74 22 3e 0a     "spaced-input">.
     afa:	3c 69 6e 70 75 74 20 74 79 70 65 3d 22 74 65 78     <input type="tex
     b0a:	74 22 20 69 64 3d 22 76 6f 6c 74 2d 64 6d 6d 22     t" id="volt-dmm"
     b1a:	20 72 65 61 64 6f 6e 6c 79 20 63 6c 61 73 73 3d      readonly class=
     b2a:	22 73 70 61 63 65 64 2d 69 6e 70 75 74 22 3e 0a     "spaced-input">.
     b3a:	3c 2f 64 69 76 3e 0a 3c 64 69 76 20 63 6c 61 73     </div>.<div clas
     b4a:	73 3d 22 72 6f 77 22 3e 0a 3c 6c 61 62 65 6c 3e     s="row">.<label>
     b5a:	57 61 74 74 20 2d 20 57 61 74 74 20 44 4d 4d 3a     Watt - Watt DMM:
     b6a:	3c 2f 6c 61 62 65 6c 3e 0a 3c 69 6e 70 75 74 20     </label>.<input 
     b7a:	74 79 70 65 3d 22 74 65 78 74 22 20 69 64 3d 22     type="text" id="
     b8a:	77 61 74 74 2d 64 69 73 70 6c 61 79 22 20 72 65     watt-display" re
     b9a:	61 64 6f 6e 6c 79 3e 0a 3c 2f 64 69 76 3e 0a 3c     adonly>.</div>.<
     baa:	64 69 76 20 63 6c 61 73 73 3d 22 69 6e 70 75 74     div class="input
     bba:	2d 72 6f 77 22 3e 0a 3c 6c 61 62 65 6c 20 66 6f     -row">.<label fo
     bca:	72 3d 22 61 6d 70 2d 69 6e 70 75 74 22 3e 53 65     r="amp-input">Se
     bda:	74 20 4e 65 77 20 41 6d 70 3a 3c 2f 6c 61 62 65     t New Amp:</labe
     bea:	6c 3e 0a 3c 69 6e 70 75 74 20 74 79 70 65 3d 22     l>.<input type="
     bfa:	74 65 78 74 22 20 69 64 3d 22 61 6d 70 2d 69 6e     text" id="amp-in
     c0a:	70 75 74 22 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69     put">.</div>.<di
     c1a:	76 20 63 6c 61 73 73 3d 22 69 6e 70 75 74 2d 72     v class="input-r
     c2a:	6f 77 22 3e 0a 3c 6c 61 62 65 6c 20 66 6f 72 3d     ow">.<label for=
     c3a:	22 76 6f 6c 74 2d 69 6e 70 75 74 22 3e 53 65 74     "volt-input">Set
     c4a:	20 4e 65 77 20 56 6f 6c 74 3a 3c 2f 6c 61 62 65      New Volt:</labe
     c5a:	6c 3e 0a 3c 69 6e 70 75 74 20 74 79 70 65 3d 22     l>.<input type="
     c6a:	74 65 78 74 22 20 69 64 3d 22 76 6f 6c 74 2d 69     text" id="volt-i
     c7a:	6e 70 75 74 22 3e 0a 3c 2f 64 69 76 3e 0a 3c 64     nput">.</div>.<d
     c8a:	69 76 20 63 6c 61 73 73 3d 22 62 75 74 74 6f 6e     iv class="button
     c9a:	2d 72 6f 77 22 3e 0a 3c 64 69 76 20 63 6c 61 73     -row">.<div clas
     caa:	73 3d 22 69 6e 64 69 63 61 74 6f 72 2d 63 6f 6e     s="indicator-con
     cba:	74 61 69 6e 65 72 22 3e 0a 3c 64 69 76 20 63 6c     tainer">.<div cl
     cca:	61 73 73 3d 22 73 74 61 74 75 73 2d 69 6e 64 69     ass="status-indi
     cda:	63 61 74 6f 72 22 20 69 64 3d 22 73 74 61 74 75     cator" id="statu
     cea:	73 2d 69 6e 64 69 63 61 74 6f 72 22 3e 3c 2f 64     s-indicator"></d
     cfa:	69 76 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     iv>.<div class="
     d0a:	69 6e 64 69 63 61 74 6f 72 2d 6c 61 62 65 6c 22     indicator-label"
     d1a:	3e 4f 75 74 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76     >Out</div>.</div
     d2a:	3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 69 6e     >.<div class="in
     d3a:	64 69 63 61 74 6f 72 2d 63 6f 6e 74 61 69 6e 65     dicator-containe
     d4a:	72 22 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     r">.<div class="
     d5a:	73 74 61 74 75 73 2d 69 6e 64 69 63 61 74 6f 72     status-indicator
     d6a:	22 20 69 64 3d 22 65 72 72 2d 69 6e 64 69 63 61     " id="err-indica
     d7a:	74 6f 72 22 3e 3c 2f 64 69 76 3e 0a 3c 64 69 76     tor"></div>.<div
     d8a:	20 63 6c 61 73 73 3d 22 69 6e 64 69 63 61 74 6f      class="indicato
     d9a:	72 2d 6c 61 62 65 6c 22 3e 45 72 72 3c 2f 64 69     r-label">Err</di
     daa:	76 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69 76 20 63     v>.</div>.<div c
     dba:	6c 61 73 73 3d 22 69 6e 64 69 63 61 74 6f 72 2d     lass="indicator-
     dca:	63 6f 6e 74 61 69 6e 65 72 22 3e 0a 3c 64 69 76     container">.<div
     dda:	20 63 6c 61 73 73 3d 22 73 74 61 74 75 73 2d 69      class="status-i
     dea:	6e 64 69 63 61 74 6f 72 22 20 69 64 3d 22 69 6e     ndicator" id="in
     dfa:	30 2d 69 6e 64 69 63 61 74 6f 72 22 3e 3c 2f 64     0-indicator"></d
     e0a:	69 76 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     iv>.<div class="
     e1a:	69 6e 64 69 63 61 74 6f 72 2d 6c 61 62 65 6c 22     indicator-label"
     e2a:	3e 49 4e 30 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76     >IN0</div>.</div
     e3a:	3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 69 6e     >.<div class="in
     e4a:	64 69 63 61 74 6f 72 2d 63 6f 6e 74 61 69 6e 65     dicator-containe
     e5a:	72 22 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     r">.<div class="
     e6a:	73 74 61 74 75 73 2d 69 6e 64 69 63 61 74 6f 72     status-indicator
     e7a:	22 20 69 64 3d 22 69 6e 31 2d 69 6e 64 69 63 61     " id="in1-indica
     e8a:	74 6f 72 22 3e 3c 2f 64 69 76 3e 0a 3c 64 69 76     tor"></div>.<div
     e9a:	20 63 6c 61 73 73 3d 22 69 6e 64 69 63 61 74 6f      class="indicato
     eaa:	72 2d 6c 61 62 65 6c 22 3e 49 4e 31 3c 2f 64 69     r-label">IN1</di
     eba:	76 3e 0a 3c 2f 64 69 76 3e 0a 3c 64 69 76 20 63     v>.</div>.<div c
     eca:	6c 61 73 73 3d 22 69 6e 64 69 63 61 74 6f 72 2d     lass="indicator-
     eda:	63 6f 6e 74 61 69 6e 65 72 22 3e 0a 3c 64 69 76     container">.<div
     eea:	20 63 6c 61 73 73 3d 22 73 74 61 74 75 73 2d 69      class="status-i
     efa:	6e 64 69 63 61 74 6f 72 22 20 69 64 3d 22 69 6e     ndicator" id="in
     f0a:	32 2d 69 6e 64 69 63 61 74 6f 72 22 3e 3c 2f 64     2-indicator"></d
     f1a:	69 76 3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     iv>.<div class="
     f2a:	69 6e 64 69 63 61 74 6f 72 2d 6c 61 62 65 6c 22     indicator-label"
     f3a:	3e 49 4e 32 3c 2f 64 69 76 3e 0a 3c 2f 64 69 76     >IN2</div>.</div
     f4a:	3e 0a 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 63     >..<div class="c
     f5a:	68 65 63 6b 62 6f 78 2d 63 6f 6e 74 61 69 6e 65     heckbox-containe
     f6a:	72 22 3e 0a 3c 69 6e 70 75 74 20 74 79 70 65 3d     r">.<input type=
     f7a:	22 63 68 65 63 6b 62 6f 78 22 20 69 64 3d 22 72     "checkbox" id="r
     f8a:	65 6d 6f 74 65 2d 63 6f 6e 74 72 6f 6c 2d 63 68     emote-control-ch
     f9a:	65 63 6b 62 6f 78 22 3e 0a 3c 6c 61 62 65 6c 20     eckbox">.<label 
     faa:	66 6f 72 3d 22 72 65 6d 6f 74 65 2d 63 6f 6e 74     for="remote-cont
     fba:	72 6f 6c 2d 63 68 65 63 6b 62 6f 78 22 3e 52 65     rol-checkbox">Re
     fca:	6d 6f 74 65 20 43 6f 6e 74 72 6f 6c 3c 2f 6c 61     mote Control</la
     fda:	62 65 6c 3e 0a 3c 2f 64 69 76 3e 0a 3c 2f 64 69     bel>.</div>.</di
     fea:	76 3e 0a 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22     v>..<div class="
     ffa:	62 75 74 74 6f 6e 2d 72 6f 77 22 3e 0a 3c 62 75     button-row">.<bu
    100a:	74 74 6f 6e 20 63 6c 61 73 73 3d 22 62 75 74 74     tton class="butt
    101a:	6f 6e 22 20 73 74 79 6c 65 3d 22 6d 61 72 67 69     on" style="margi
    102a:	6e 2d 6c 65 66 74 3a 20 61 75 74 6f 3b 22 20 6f     n-left: auto;" o
    103a:	6e 63 6c 69 63 6b 3d 22 73 65 74 56 61 6c 75 65     nclick="setValue
    104a:	73 28 29 22 3e 53 65 74 20 56 61 6c 75 65 73 3c     s()">Set Values<
    105a:	2f 62 75 74 74 6f 6e 3e 0a 3c 2f 64 69 76 3e 0a     /button>.</div>.
    106a:	3c 64 69 76 20 63 6c 61 73 73 3d 22 62 75 74 74     <div class="butt
    107a:	6f 6e 2d 72 6f 77 22 3e 0a 3c 62 75 74 74 6f 6e     on-row">.<button
    108a:	20 63 6c 61 73 73 3d 22 62 75 74 74 6f 6e 22 20      class="button" 
    109a:	6f 6e 63 6c 69 63 6b 3d 22 63 6f 6e 74 72 6f 6c     onclick="control
    10aa:	44 65 76 69 63 65 28 27 70 73 75 27 2c 27 6f 6e     Device('psu','on
    10ba:	27 29 22 3e 54 75 72 6e 20 50 53 55 20 4f 6e 3c     ')">Turn PSU On<
    10ca:	2f 62 75 74 74 6f 6e 3e 0a 3c 62 75 74 74 6f 6e     /button>.<button
    10da:	20 63 6c 61 73 73 3d 22 62 75 74 74 6f 6e 22 20      class="button" 
    10ea:	6f 6e 63 6c 69 63 6b 3d 22 63 6f 6e 74 72 6f 6c     onclick="control
    10fa:	44 65 76 69 63 65 28 27 70 73 75 27 2c 27 6f 66     Device('psu','of
    110a:	66 27 29 22 3e 54 75 72 6e 20 50 53 55 20 4f 66     f')">Turn PSU Of
    111a:	66 3c 2f 62 75 74 74 6f 6e 3e 0a 3c 2f 64 69 76     f</button>.</div
    112a:	3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 65     >.<div class="se
    113a:	70 61 72 61 74 6f 72 22 3e 3c 2f 64 69 76 3e 0a     parator"></div>.
    114a:	3c 64 69 76 20 63 6c 61 73 73 3d 22 62 75 74 74     <div class="butt
    115a:	6f 6e 2d 72 6f 77 22 3e 0a 3c 62 75 74 74 6f 6e     on-row">.<button
    116a:	20 63 6c 61 73 73 3d 22 62 75 74 74 6f 6e 22 20      class="button" 
    117a:	6f 6e 63 6c 69 63 6b 3d 22 63 6f 6e 74 72 6f 6c     onclick="control
    118a:	44 65 76 69 63 65 28 27 66 61 6e 27 2c 27 6f 6e     Device('fan','on
    119a:	27 29 22 3e 54 75 72 6e 20 46 61 6e 20 4f 6e 3c     ')">Turn Fan On<
    11aa:	2f 62 75 74 74 6f 6e 3e 0a 3c 62 75 74 74 6f 6e     /button>.<button
    11ba:	20 63 6c 61 73 73 3d 22 62 75 74 74 6f 6e 22 20      class="button" 
    11ca:	6f 6e 63 6c 69 63 6b 3d 22 63 6f 6e 74 72 6f 6c     onclick="control
    11da:	44 65 76 69 63 65 28 27 66 61 6e 27 2c 27 6f 66     Device('fan','of
    11ea:	66 27 29 22 3e 54 75 72 6e 20 46 61 6e 20 4f 66     f')">Turn Fan Of
    11fa:	66 3c 2f 62 75 74 74 6f 6e 3e 0a 3c 2f 64 69 76     f</button>.</div
    120a:	3e 0a 3c 64 69 76 20 63 6c 61 73 73 3d 22 73 65     >.<div class="se
    121a:	70 61 72 61 74 6f 72 22 3e 3c 2f 64 69 76 3e 0a     parator"></div>.
    122a:	3c 64 69 76 20 63 6c 61 73 73 3d 22 70 72 65 73     <div class="pres
    123a:	65 74 2d 72 6f 77 22 3e 0a 3c 62 75 74 74 6f 6e     et-row">.<button
    124a:	20 63 6c 61 73 73 3d 22 70 72 65 73 65 74 2d 62      class="preset-b
    125a:	75 74 74 6f 6e 22 20 6f 6e 63 6c 69 63 6b 3d 22     utton" onclick="
    126a:	73 65 74 50 72 65 73 65 74 28 31 29 22 3e 35 56     setPreset(1)">5V
    127a:	20 31 41 3c 2f 62 75 74 74 6f 6e 3e 0a 3c 62 75      1A</button>.<bu
    128a:	74 74 6f 6e 20 63 6c 61 73 73 3d 22 70 72 65 73     tton class="pres
    129a:	65 74 2d 62 75 74 74 6f 6e 22 20 6f 6e 63 6c 69     et-button" oncli
    12aa:	63 6b 3d 22 73 65 74 50 72 65 73 65 74 28 32 29     ck="setPreset(2)
    12ba:	22 3e 31 32 56 20 32 41 3c 2f 62 75 74 74 6f 6e     ">12V 2A</button
    12ca:	3e 0a 3c 62 75 74 74 6f 6e 20 63 6c 61 73 73 3d     >.<button class=
    12da:	22 70 72 65 73 65 74 2d 62 75 74 74 6f 6e 22 20     "preset-button" 
    12ea:	6f 6e 63 6c 69 63 6b 3d 22 73 65 74 50 72 65 73     onclick="setPres
    12fa:	65 74 28 33 29 22 3e 32 34 56 20 32 41 3c 2f 62     et(3)">24V 2A</b
    130a:	75 74 74 6f 6e 3e 0a 3c 2f 64 69 76 3e 0a 3c 2f     utton>.</div>.</
    131a:	64 69 76 3e 0a 3c 73 63 72 69 70 74 3e 0a 66 75     div>.<script>.fu
    132a:	6e 63 74 69 6f 6e 20 66 65 74 63 68 56 61 6c 75     nction fetchValu
    133a:	65 73 28 29 20 7b 0a 66 65 74 63 68 28 27 2f 67     es() {.fetch('/g
    134a:	65 74 5f 76 61 6c 73 27 29 0a 2e 74 68 65 6e 28     et_vals')..then(
    135a:	72 65 73 70 6f 6e 73 65 20 3d 3e 20 72 65 73 70     response => resp
    136a:	6f 6e 73 65 2e 6a 73 6f 6e 28 29 29 0a 2e 74 68     onse.json())..th
    137a:	65 6e 28 64 61 74 61 20 3d 3e 20 7b 0a 64 6f 63     en(data => {.doc
    138a:	75 6d 65 6e 74 2e 67 65 74 45 6c 65 6d 65 6e 74     ument.getElement
    139a:	42 79 49 64 28 27 61 6d 70 2d 73 65 74 27 29 2e     ById('amp-set').
    13aa:	76 61 6c 75 65 20 3d 20 64 61 74 61 2e 61 6d 70     value = data.amp
    13ba:	2e 74 6f 46 69 78 65 64 28 32 29 3b 0a 64 6f 63     .toFixed(2);.doc
    13ca:	75 6d 65 6e 74 2e 67 65 74 45 6c 65 6d 65 6e 74     ument.getElement
    13da:	42 79 49 64 28 27 76 6f 6c 74 2d 73 65 74 27 29     ById('volt-set')
    13ea:	2e 76 61 6c 75 65 20 3d 20 64 61 74 61 2e 76 6f     .value = data.vo
    13fa:	6c 74 2e 74 6f 46 69 78 65 64 28 32 29 3b 0a 64     lt.toFixed(2);.d
    140a:	6f 63 75 6d 65 6e 74 2e 67 65 74 45 6c 65 6d 65     ocument.getEleme
    141a:	6e 74 42 79 49 64 28 27 77 61 74 74 2d 64 69 73     ntById('watt-dis
    142a:	70 6c 61 79 27 29 2e 76 61 6c 75 65 20 3d 20 64     play').value = d
    143a:	61 74 61 2e 77 61 74 74 2e 74 6f 46 69 78 65 64     ata.watt.toFixed
    144a:	28 32 29 3b 0a 64 6f 63 75 6d 65 6e 74 2e 67 65     (2);.document.ge
    145a:	74 45 6c 65 6d 65 6e 74 42 79 49 64 28 27 61 6d     tElementById('am
    146a:	70 2d 64 6d 6d 27 29 2e 76 61 6c 75 65 20 3d 20     p-dmm').value = 
    147a:	64 61 74 61 2e 61 6d 70 44 4d 4d 2e 74 6f 46 69     data.ampDMM.toFi
    148a:	78 65 64 28 32 29 3b 0a 64 6f 63 75 6d 65 6e 74     xed(2);.document
    149a:	2e 67 65 74 45 6c 65 6d 65 6e 74 42 79 49 64 28     .getElementById(
    14aa:	27 76 6f 6c 74 2d 64 6d 6d 27 29 2e 76 61 6c 75     'volt-dmm').valu
    14ba:	65 20 3d 20 64 61 74 61 2e 76 6f 6c 74 44 4d 4d     e = data.voltDMM
    14ca:	2e 74 6f 46 69 78 65 64 28 32 29 3b 0a 0a 2f 2f     .toFixed(2);..//
    14da:	20 55 70 64 61 74 65 20 74 68 65 20 73 74 61 74      Update the stat
    14ea:	75 73 20 69 6e 64 69 63 61 74 6f 72 20 63 6f 6c     us indicator col
    14fa:	6f 72 20 62 61 73 65 64 20 6f 6e 20 6f 75 74 53     or based on outS
    150a:	74 61 74 65 0a 63 6f 6e 73 74 20 73 74 61 74 75     tate.const statu
    151a:	73 49 6e 64 69 63 61 74 6f 72 20 3d 20 64 6f 63     sIndicator = doc
    152a:	75 6d 65 6e 74 2e 67 65 74 45 6c 65 6d 65 6e 74     ument.getElement
    153a:	42 79 49 64 28 27 73 74 61 74 75 73 2d 69 6e 64     ById('status-ind
    154a:	69 63 61 74 6f 72 27 29 3b 0a 69 66 20 28 64 61     icator');.if (da
    155a:	74 61 2e 6f 75 74 53 74 61 74 65 20 3d 3d 3d 20     ta.outState === 
    156a:	30 29 20 7b 0a 73 74 61 74 75 73 49 6e 64 69 63     0) {.statusIndic
    157a:	61 74 6f 72 2e 73 74 79 6c 65 2e 62 61 63 6b 67     ator.style.backg
    158a:	72 6f 75 6e 64 20 3d 20 27 23 63 63 63 27 3b 20     round = '#ccc'; 
    159a:	2f 2f 20 67 72 61 79 0a 7d 20 65 6c 73 65 20 69     // gray.} else i
    15aa:	66 20 28 64 61 74 61 2e 6f 75 74 53 74 61 74 65     f (data.outState
    15ba:	20 3d 3d 3d 20 31 29 20 7b 0a 73 74 61 74 75 73      === 1) {.status
    15ca:	49 6e 64 69 63 61 74 6f 72 2e 73 74 79 6c 65 2e     Indicator.style.
    15da:	62 61 63 6b 67 72 6f 75 6e 64 20 3d 20 27 23 32     background = '#2
    15ea:	38 61 37 34 35 27 3b 20 2f 2f 20 67 72 65 65 6e     8a745'; // green
    15fa:	0a 7d 20 65 6c 73 65 20 69 66 20 28 64 61 74 61     .} else if (data
    160a:	2e 6f 75 74 53 74 61 74 65 20 3d 3d 3d 20 32 29     .outState === 2)
    161a:	20 7b 0a 73 74 61 74 75 73 49 6e 64 69 63 61 74      {.statusIndicat
    162a:	6f 72 2e 73 74 79 6c 65 2e 62 61 63 6b 67 72 6f     or.style.backgro
    163a:	75 6e 64 20 3d 20 27 23 64 63 33 35 34 35 27 3b     und = '#dc3545';
    164a:	20 2f 2f 20 72 65 64 0a 7d 0a 0a 2f 2f 20 55 70      // red.}..// Up
    165a:	64 61 74 65 20 74 68 65 20 65 72 72 6f 72 20 69     date the error i
    166a:	6e 64 69 63 61 74 6f 72 20 63 6f 6c 6f 72 20 62     ndicator color b
    167a:	61 73 65 64 20 6f 6e 20 65 72 72 0a 63 6f 6e 73     ased on err.cons
    168a:	74 20 65 72 72 49 6e 64 69 63 61 74 6f 72 20 3d     t errIndicator =
    169a:	20 64 6f 63 75 6d 65 6e 74 2e 67 65 74 45 6c 65      document.getEle
    16aa:	6d 65 6e 74 42 79 49 64 28 27 65 72 72 2d 69 6e     mentById('err-in
    16ba:	64 69 63 61 74 6f 72 27 29 3b 0a 65 72 72 49 6e     dicator');.errIn
    16ca:	64 69 63 61 74 6f 72 2e 73 74 79 6c 65 2e 62 61     dicator.style.ba
    16da:	63 6b 67 72 6f 75 6e 64 20 3d 20 64 61 74 61 2e     ckground = data.
    16ea:	65 72 72 20 3d 3d 3d 20 31 20 3f 20 27 23 64 63     err === 1 ? '#dc
    16fa:	33 35 34 35 27 20 3a 20 27 23 63 63 63 27 3b 20     3545' : '#ccc'; 
    170a:	2f 2f 20 72 65 64 20 69 66 20 65 72 72 6f 72 2c     // red if error,
    171a:	20 67 72 61 79 20 6f 74 68 65 72 77 69 73 65 0a      gray otherwise.
    172a:	0a 2f 2f 20 55 70 64 61 74 65 20 74 68 65 20 49     .// Update the I
    173a:	4e 30 2c 20 49 4e 31 2c 20 49 4e 32 20 69 6e 64     N0, IN1, IN2 ind
    174a:	69 63 61 74 6f 72 73 20 62 61 73 65 64 20 6f 6e     icators based on
    175a:	20 69 6e 30 2c 20 69 6e 31 2c 20 69 6e 32 0a 63      in0, in1, in2.c
    176a:	6f 6e 73 74 20 69 6e 30 49 6e 64 69 63 61 74 6f     onst in0Indicato
    177a:	72 20 3d 20 64 6f 63 75 6d 65 6e 74 2e 67 65 74     r = document.get
    178a:	45 6c 65 6d 65 6e 74 42 79 49 64 28 27 69 6e 30     ElementById('in0
    179a:	2d 69 6e 64 69 63 61 74 6f 72 27 29 3b 0a 63 6f     -indicator');.co
    17aa:	6e 73 74 20 69 6e 31 49 6e 64 69 63 61 74 6f 72     nst in1Indicator
    17ba:	20 3d 20 64 6f 63 75 6d 65 6e 74 2e 67 65 74 45      = document.getE
    17ca:	6c 65 6d 65 6e 74 42 79 49 64 28 27 69 6e 31 2d     lementById('in1-
    17da:	69 6e 64 69 63 61 74 6f 72 27 29 3b 0a 63 6f 6e     indicator');.con
    17ea:	73 74 20 69 6e 32 49 6e 64 69 63 61 74 6f 72 20     st in2Indicator 
    17fa:	3d 20 64 6f 63 75 6d 65 6e 74 2e 67 65 74 45 6c     = document.getEl
    180a:	65 6d 65 6e 74 42 79 49 64 28 27 69 6e 32 2d 69     ementById('in2-i
    181a:	6e 64 69 63 61 74 6f 72 27 29 3b 0a 0a 69 6e 30     ndicator');..in0
    182a:	49 6e 64 69 63 61 74 6f 72 2e 73 74 79 6c 65 2e     Indicator.style.
    183a:	62 61 63 6b 67 72 6f 75 6e 64 20 3d 20 64 61 74     background = dat
    184a:	61 2e 69 6e 30 20 3d 3d 3d 20 31 20 3f 20 27 23     a.in0 === 1 ? '#
    185a:	32 38 61 37 34 35 27 20 3a 20 27 23 63 63 63 27     28a745' : '#ccc'
    186a:	3b 20 2f 2f 20 67 72 65 65 6e 20 69 66 20 61 63     ; // green if ac
    187a:	74 69 76 65 2c 20 67 72 61 79 20 6f 74 68 65 72     tive, gray other
    188a:	77 69 73 65 0a 69 6e 31 49 6e 64 69 63 61 74 6f     wise.in1Indicato
    189a:	72 2e 73 74 79 6c 65 2e 62 61 63 6b 67 72 6f 75     r.style.backgrou
    18aa:	6e 64 20 3d 20 64 61 74 61 2e 69 6e 31 20 3d 3d     nd = data.in1 ==
    18ba:	3d 20 31 20 3f 20 27 23 32 38 61 37 34 35 27 20     = 1 ? '#28a745' 
    18ca:	3a 20 27 23 63 63 63 27 3b 20 2f 2f 20 67 72 65     : '#ccc'; // gre
    18da:	65 6e 20 69 66 20 61 63 74 69 76 65 2c 20 67 72     en if active, gr
    18ea:	61 79 20 6f 74 68 65 72 77 69 73 65 0a 69 6e 32     ay otherwise.in2
    18fa:	49 6e 64 69 63 61 74 6f 72 2e 73 74 79 6c 65 2e     Indicator.style.
    190a:	62 61 63 6b 67 72 6f 75 6e 64 20 3d 20 64 61 74     background = dat
    191a:	61 2e 69 6e 32 20 3d 3d 3d 20 31 20 3f 20 27 23     a.in2 === 1 ? '#
    192a:	32 38 61 37 34 35 27 20 3a 20 27 23 63 63 63 27     28a745' : '#ccc'
    193a:	3b 20 2f 2f 20 67 72 65 65 6e 20 69 66 20 61 63     ; // green if ac
    194a:	74 69 76 65 2c 20 67 72 61 79 20 6f 74 68 65 72     tive, gray other
    195a:	77 69 73 65 0a 0a 2f 2f 20 55 70 64 61 74 65 20     wise..// Update 
    196a:	74 68 65 20 63 68 65 63 6b 62 6f 78 20 73 74 61     the checkbox sta
    197a:	74 65 20 62 61 73 65 64 20 6f 6e 20 72 65 6d 6f     te based on remo
    198a:	74 65 43 74 72 6c 0a 64 6f 63 75 6d 65 6e 74 2e     teCtrl.document.
    199a:	67 65 74 45 6c 65 6d 65 6e 74 42 79 49 64 28 27     getElementById('
    19aa:	72 65 6d 6f 74 65 2d 63 6f 6e 74 72 6f 6c 2d 63     remote-control-c
    19ba:	68 65 63 6b 62 6f 78 27 29 2e 63 68 65 63 6b 65     heckbox').checke
    19ca:	64 20 3d 20 64 61 74 61 2e 72 65 6d 20 3d 3d 3d     d = data.rem ===
    19da:	20 31 3b 0a 7d 29 0a 2e 63 61 74 63 68 28 65 72      1;.})..catch(er
    19ea:	72 6f 72 20 3d 3e 20 63 6f 6e 73 6f 6c 65 2e 65     ror => console.e
    19fa:	72 72 6f 72 28 27 45 72 72 6f 72 20 66 65 74 63     rror('Error fetc
    1a0a:	68 69 6e 67 20 76 61 6c 75 65 73 3a 27 2c 20 65     hing values:', e
    1a1a:	72 72 6f 72 29 29 3b 0a 7d 0a 0a 66 75 6e 63 74     rror));.}..funct
    1a2a:	69 6f 6e 20 73 65 74 56 61 6c 75 65 73 28 29 20     ion setValues() 
    1a3a:	7b 0a 63 6f 6e 73 74 20 61 6d 70 20 3d 20 70 61     {.const amp = pa
    1a4a:	72 73 65 46 6c 6f 61 74 28 64 6f 63 75 6d 65 6e     rseFloat(documen
    1a5a:	74 2e 67 65 74 45 6c 65 6d 65 6e 74 42 79 49 64     t.getElementById
    1a6a:	28 27 61 6d 70 2d 69 6e 70 75 74 27 29 2e 76 61     ('amp-input').va
    1a7a:	6c 75 65 29 3b 0a 63 6f 6e 73 74 20 76 6f 6c 74     lue);.const volt
    1a8a:	20 3d 20 70 61 72 73 65 46 6c 6f 61 74 28 64 6f      = parseFloat(do
    1a9a:	63 75 6d 65 6e 74 2e 67 65 74 45 6c 65 6d 65 6e     cument.getElemen
    1aaa:	74 42 79 49 64 28 27 76 6f 6c 74 2d 69 6e 70 75     tById('volt-inpu
    1aba:	74 27 29 2e 76 61 6c 75 65 29 3b 0a 66 65 74 63     t').value);.fetc
    1aca:	68 28 60 2f 73 65 74 5f 76 61 6c 73 3f 61 6d 70     h(`/set_vals?amp
    1ada:	3d 24 7b 61 6d 70 7d 26 76 6f 6c 74 3d 24 7b 76     =${amp}&volt=${v
    1aea:	6f 6c 74 7d 60 29 0a 2e 74 68 65 6e 28 72 65 73     olt}`)..then(res
    1afa:	70 6f 6e 73 65 20 3d 3e 20 72 65 73 70 6f 6e 73     ponse => respons
    1b0a:	65 2e 6a 73 6f 6e 28 29 29 0a 2e 74 68 65 6e 28     e.json())..then(
    1b1a:	64 61 74 61 20 3d 3e 20 7b 0a 69 66 20 28 64 61     data => {.if (da
    1b2a:	74 61 2e 73 75 63 63 65 73 73 29 20 7b 0a 66 65     ta.success) {.fe
    1b3a:	74 63 68 56 61 6c 75 65 73 28 29 3b 0a 7d 20 65     tchValues();.} e
    1b4a:	6c 73 65 20 7b 0a 61 6c 65 72 74 28 27 45 72 72     lse {.alert('Err
    1b5a:	6f 72 20 73 65 74 74 69 6e 67 20 76 61 6c 75 65     or setting value
    1b6a:	73 27 29 3b 0a 7d 0a 7d 29 0a 2e 63 61 74 63 68     s');.}.})..catch
    1b7a:	28 65 72 72 6f 72 20 3d 3e 20 63 6f 6e 73 6f 6c     (error => consol
    1b8a:	65 2e 65 72 72 6f 72 28 27 45 72 72 6f 72 20 73     e.error('Error s
    1b9a:	65 74 74 69 6e 67 20 76 61 6c 75 65 73 3a 27 2c     etting values:',
    1baa:	20 65 72 72 6f 72 29 29 3b 0a 7d 0a 0a 66 75 6e      error));.}..fun
    1bba:	63 74 69 6f 6e 20 63 6f 6e 74 72 6f 6c 44 65 76     ction controlDev
    1bca:	69 63 65 28 64 65 76 69 63 65 2c 20 61 63 74 69     ice(device, acti
    1bda:	6f 6e 29 20 7b 0a 66 65 74 63 68 28 60 2f 63 6f     on) {.fetch(`/co
    1bea:	6e 74 72 6f 6c 3f 64 65 76 69 63 65 3d 24 7b 64     ntrol?device=${d
    1bfa:	65 76 69 63 65 7d 26 61 63 74 69 6f 6e 3d 24 7b     evice}&action=${
    1c0a:	61 63 74 69 6f 6e 7d 60 29 0a 2e 74 68 65 6e 28     action}`)..then(
    1c1a:	72 65 73 70 6f 6e 73 65 20 3d 3e 20 72 65 73 70     response => resp
    1c2a:	6f 6e 73 65 2e 6a 73 6f 6e 28 29 29 0a 2e 74 68     onse.json())..th
    1c3a:	65 6e 28 64 61 74 61 20 3d 3e 20 7b 0a 69 66 20     en(data => {.if 
    1c4a:	28 64 61 74 61 2e 73 75 63 63 65 73 73 29 20 7b     (data.success) {
    1c5a:	0a 61 6c 65 72 74 28 60 24 7b 64 65 76 69 63 65     .alert(`${device
    1c6a:	2e 74 6f 55 70 70 65 72 43 61 73 65 28 29 7d 20     .toUpperCase()} 
    1c7a:	24 7b 61 63 74 69 6f 6e 2e 74 6f 55 70 70 65 72     ${action.toUpper
    1c8a:	43 61 73 65 28 29 7d 20 53 75 63 63 65 73 73 66     Case()} Successf
    1c9a:	75 6c 60 29 3b 0a 7d 20 65 6c 73 65 20 7b 0a 61     ul`);.} else {.a
    1caa:	6c 65 72 74 28 60 45 72 72 6f 72 20 24 7b 61 63     lert(`Error ${ac
    1cba:	74 69 6f 6e 7d 69 6e 67 20 24 7b 64 65 76 69 63     tion}ing ${devic
    1cca:	65 7d 60 29 3b 0a 7d 0a 7d 29 0a 2e 63 61 74 63     e}`);.}.})..catc
    1cda:	68 28 65 72 72 6f 72 20 3d 3e 20 63 6f 6e 73 6f     h(error => conso
    1cea:	6c 65 2e 65 72 72 6f 72 28 60 45 72 72 6f 72 20     le.error(`Error 
    1cfa:	24 7b 61 63 74 69 6f 6e 7d 69 6e 67 20 24 7b 64     ${action}ing ${d
    1d0a:	65 76 69 63 65 7d 3a 60 2c 20 65 72 72 6f 72 29     evice}:`, error)
    1d1a:	29 3b 0a 7d 0a 0a 66 75 6e 63 74 69 6f 6e 20 73     );.}..function s
    1d2a:	65 74 50 72 65 73 65 74 28 70 72 65 73 65 74 29     etPreset(preset)
    1d3a:	20 7b 0a 6c 65 74 20 61 6d 70 2c 20 76 6f 6c 74      {.let amp, volt
    1d4a:	3b 0a 69 66 20 28 70 72 65 73 65 74 20 3d 3d 20     ;.if (preset == 
    1d5a:	31 29 20 7b 0a 61 6d 70 20 3d 20 31 2e 32 35 3b     1) {.amp = 1.25;
    1d6a:	0a 76 6f 6c 74 20 3d 20 35 2e 33 3b 0a 7d 20 65     .volt = 5.3;.} e
    1d7a:	6c 73 65 20 69 66 20 28 70 72 65 73 65 74 20 3d     lse if (preset =
    1d8a:	3d 20 32 29 20 7b 0a 61 6d 70 20 3d 20 32 2e 30     = 2) {.amp = 2.0
    1d9a:	3b 0a 76 6f 6c 74 20 3d 20 31 32 2e 30 3b 0a 7d     ;.volt = 12.0;.}
    1daa:	20 65 6c 73 65 20 69 66 20 28 70 72 65 73 65 74      else if (preset
    1dba:	20 3d 3d 20 33 29 20 7b 0a 61 6d 70 20 3d 20 32      == 3) {.amp = 2
    1dca:	2e 30 3b 0a 76 6f 6c 74 20 3d 20 32 34 2e 30 3b     .0;.volt = 24.0;
    1dda:	0a 7d 0a 64 6f 63 75 6d 65 6e 74 2e 67 65 74 45     .}.document.getE
    1dea:	6c 65 6d 65 6e 74 42 79 49 64 28 27 61 6d 70 2d     lementById('amp-
    1dfa:	69 6e 70 75 74 27 29 2e 76 61 6c 75 65 20 3d 20     input').value = 
    1e0a:	61 6d 70 3b 0a 64 6f 63 75 6d 65 6e 74 2e 67 65     amp;.document.ge
    1e1a:	74 45 6c 65 6d 65 6e 74 42 79 49 64 28 27 76 6f     tElementById('vo
    1e2a:	6c 74 2d 69 6e 70 75 74 27 29 2e 76 61 6c 75 65     lt-input').value
    1e3a:	20 3d 20 76 6f 6c 74 3b 0a 73 65 74 56 61 6c 75      = volt;.setValu
    1e4a:	65 73 28 29 3b 0a 7d 0a 0a 64 6f 63 75 6d 65 6e     es();.}..documen
    1e5a:	74 2e 67 65 74 45 6c 65 6d 65 6e 74 42 79 49 64     t.getElementById
    1e6a:	28 27 72 65 6d 6f 74 65 2d 63 6f 6e 74 72 6f 6c     ('remote-control
    1e7a:	2d 63 68 65 63 6b 62 6f 78 27 29 2e 61 64 64 45     -checkbox').addE
    1e8a:	76 65 6e 74 4c 69 73 74 65 6e 65 72 28 27 63 68     ventListener('ch
    1e9a:	61 6e 67 65 27 2c 20 66 75 6e 63 74 69 6f 6e 28     ange', function(
    1eaa:	29 20 7b 0a 63 6f 6e 73 74 20 61 63 74 69 6f 6e     ) {.const action
    1eba:	20 3d 20 74 68 69 73 2e 63 68 65 63 6b 65 64 20      = this.checked 
    1eca:	3f 20 27 6f 6e 27 20 3a 20 27 6f 66 66 27 3b 0a     ? 'on' : 'off';.
    1eda:	66 65 74 63 68 28 60 2f 63 6f 6e 74 72 6f 6c 3f     fetch(`/control?
    1eea:	64 65 76 69 63 65 3d 72 65 6d 26 61 63 74 69 6f     device=rem&actio
    1efa:	6e 3d 24 7b 61 63 74 69 6f 6e 7d 60 29 0a 2e 74     n=${action}`)..t
    1f0a:	68 65 6e 28 72 65 73 70 6f 6e 73 65 20 3d 3e 20     hen(response => 
    1f1a:	72 65 73 70 6f 6e 73 65 2e 6a 73 6f 6e 28 29 29     response.json())
    1f2a:	0a 2e 74 68 65 6e 28 64 61 74 61 20 3d 3e 20 7b     ..then(data => {
    1f3a:	0a 69 66 20 28 64 61 74 61 2e 73 75 63 63 65 73     .if (data.succes
    1f4a:	73 29 20 7b 0a 63 6f 6e 73 6f 6c 65 2e 6c 6f 67     s) {.console.log
    1f5a:	28 60 52 65 6d 6f 74 65 20 63 6f 6e 74 72 6f 6c     (`Remote control
    1f6a:	20 24 7b 61 63 74 69 6f 6e 7d 20 73 75 63 63 65      ${action} succe
    1f7a:	73 73 66 75 6c 60 29 3b 0a 7d 20 65 6c 73 65 20     ssful`);.} else 
    1f8a:	7b 0a 61 6c 65 72 74 28 60 45 72 72 6f 72 20 24     {.alert(`Error $
    1f9a:	7b 61 63 74 69 6f 6e 7d 69 6e 67 20 72 65 6d 6f     {action}ing remo
    1faa:	74 65 20 63 6f 6e 74 72 6f 6c 60 29 3b 0a 7d 0a     te control`);.}.
    1fba:	7d 29 0a 2e 63 61 74 63 68 28 65 72 72 6f 72 20     })..catch(error 
    1fca:	3d 3e 20 63 6f 6e 73 6f 6c 65 2e 65 72 72 6f 72     => console.error
    1fda:	28 60 45 72 72 6f 72 20 24 7b 61 63 74 69 6f 6e     (`Error ${action
    1fea:	7d 69 6e 67 20 72 65 6d 6f 74 65 20 63 6f 6e 74     }ing remote cont
    1ffa:	72 6f 6c 3a 60 2c 20 65 72 72 6f 72 29 29 3b 0a     rol:`, error));.
    200a:	7d 29 3b 0a 0a 73 65 74 49 6e 74 65 72 76 61 6c     });..setInterval
    201a:	28 66 65 74 63 68 56 61 6c 75 65 73 2c 20 31 30     (fetchValues, 10
    202a:	30 30 29 3b 0a 3c 2f 73 63 72 69 70 74 3e 0a 3c     00);.</script>.<
    203a:	2f 62 6f 64 79 3e 0a 3c 2f 68 74 6d 6c 3e 0a 00     /body>.</html>..

0000204a <__ctors_end>:
    204a:	11 24       	eor	r1, r1
    204c:	1f be       	out	0x3f, r1	; 63
    204e:	cf ef       	ldi	r28, 0xFF	; 255
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	df e5       	ldi	r29, 0x5F	; 95
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	00 e0       	ldi	r16, 0x00	; 0
    2058:	0c bf       	out	0x3c, r16	; 60

0000205a <__do_copy_data>:
    205a:	18 e2       	ldi	r17, 0x28	; 40
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e2       	ldi	r27, 0x20	; 32
    2060:	ea e6       	ldi	r30, 0x6A	; 106
    2062:	f7 e6       	ldi	r31, 0x67	; 103
    2064:	00 e0       	ldi	r16, 0x00	; 0
    2066:	0b bf       	out	0x3b, r16	; 59
    2068:	02 c0       	rjmp	.+4      	; 0x206e <__do_copy_data+0x14>
    206a:	07 90       	elpm	r0, Z+
    206c:	0d 92       	st	X+, r0
    206e:	a6 3c       	cpi	r26, 0xC6	; 198
    2070:	b1 07       	cpc	r27, r17
    2072:	d9 f7       	brne	.-10     	; 0x206a <__do_copy_data+0x10>

00002074 <__do_clear_bss>:
    2074:	21 e3       	ldi	r18, 0x31	; 49
    2076:	a6 ec       	ldi	r26, 0xC6	; 198
    2078:	b8 e2       	ldi	r27, 0x28	; 40
    207a:	01 c0       	rjmp	.+2      	; 0x207e <.do_clear_bss_start>

0000207c <.do_clear_bss_loop>:
    207c:	1d 92       	st	X+, r1

0000207e <.do_clear_bss_start>:
    207e:	a2 3a       	cpi	r26, 0xA2	; 162
    2080:	b2 07       	cpc	r27, r18
    2082:	e1 f7       	brne	.-8      	; 0x207c <.do_clear_bss_loop>
    2084:	0e 94 20 2b 	call	0x5640	; 0x5640 <main>
    2088:	0c 94 b3 33 	jmp	0x6766	; 0x6766 <_exit>

0000208c <__bad_interrupt>:
    208c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00002090 <__vector_119>:

//PORTF2 - TX
//PORTF3 - RX
static FILE debugSerialStream = FDEV_SETUP_STREAM(debugSerialPutChar, NULL, _FDEV_SETUP_WRITE);

ISR(USARTF0_RXC_vect) {
    2090:	1f 92       	push	r1
    2092:	0f 92       	push	r0
    2094:	0f b6       	in	r0, 0x3f	; 63
    2096:	0f 92       	push	r0
    2098:	11 24       	eor	r1, r1
    209a:	8f 93       	push	r24
	receivedByte = USARTF0.DATA;
    209c:	80 91 a0 0b 	lds	r24, 0x0BA0	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
    20a0:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <receivedByte>
}
    20a4:	8f 91       	pop	r24
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	0f 90       	pop	r0
    20ac:	1f 90       	pop	r1
    20ae:	18 95       	reti

000020b0 <getRxByte>:

uint8_t getRxByte(void){
	return receivedByte;
}
    20b0:	80 91 0e 20 	lds	r24, 0x200E	; 0x80200e <receivedByte>
    20b4:	08 95       	ret

000020b6 <debugSerialInit>:
	}
	debugSerialWriteChar(c);
	return 0;
}

uint8_t debugSerialInit(uint32_t baud) {
    20b6:	8f 92       	push	r8
    20b8:	9f 92       	push	r9
    20ba:	af 92       	push	r10
    20bc:	bf 92       	push	r11
    20be:	cf 92       	push	r12
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
	max_rate = cpu_hz / 8;
	min_rate = cpu_hz / 4194304;
	max_rate /= 2;
	min_rate /= 2;

	if ((baud > max_rate) || (baud < min_rate)) {
    20cc:	6b 01       	movw	r12, r22
    20ce:	7c 01       	movw	r14, r24
    20d0:	23 e0       	ldi	r18, 0x03	; 3
    20d2:	c2 1a       	sub	r12, r18
    20d4:	d1 08       	sbc	r13, r1
    20d6:	e1 08       	sbc	r14, r1
    20d8:	f1 08       	sbc	r15, r1
    20da:	2e e7       	ldi	r18, 0x7E	; 126
    20dc:	c2 16       	cp	r12, r18
    20de:	24 e8       	ldi	r18, 0x84	; 132
    20e0:	d2 06       	cpc	r13, r18
    20e2:	2e e1       	ldi	r18, 0x1E	; 30
    20e4:	e2 06       	cpc	r14, r18
    20e6:	f1 04       	cpc	r15, r1
    20e8:	08 f0       	brcs	.+2      	; 0x20ec <debugSerialInit+0x36>
    20ea:	be c0       	rjmp	.+380    	; 0x2268 <debugSerialInit+0x1b2>
		return -1;
	}

	baud *= 2;
    20ec:	6b 01       	movw	r12, r22
    20ee:	7c 01       	movw	r14, r24
    20f0:	cc 0c       	add	r12, r12
    20f2:	dd 1c       	adc	r13, r13
    20f4:	ee 1c       	adc	r14, r14
    20f6:	ff 1c       	adc	r15, r15

	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    20f8:	60 e0       	ldi	r22, 0x00	; 0
    20fa:	78 e4       	ldi	r23, 0x48	; 72
    20fc:	88 ee       	ldi	r24, 0xE8	; 232
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	a7 01       	movw	r20, r14
    2102:	96 01       	movw	r18, r12
    2104:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    2108:	2f 3f       	cpi	r18, 0xFF	; 255
    210a:	31 05       	cpc	r19, r1
    210c:	41 05       	cpc	r20, r1
    210e:	51 05       	cpc	r21, r1
    2110:	08 f4       	brcc	.+2      	; 0x2114 <debugSerialInit+0x5e>
    2112:	ac c0       	rjmp	.+344    	; 0x226c <debugSerialInit+0x1b6>
    2114:	8f ef       	ldi	r24, 0xFF	; 255
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e0       	ldi	r26, 0x00	; 0
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	c9 ef       	ldi	r28, 0xF9	; 249
    211e:	05 c0       	rjmp	.+10     	; 0x212a <debugSerialInit+0x74>
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	4a 07       	cpc	r20, r26
    2126:	5b 07       	cpc	r21, r27
    2128:	58 f0       	brcs	.+22     	; 0x2140 <debugSerialInit+0x8a>
			break;
		}

		limit <<= 1;
    212a:	88 0f       	add	r24, r24
    212c:	99 1f       	adc	r25, r25
    212e:	aa 1f       	adc	r26, r26
    2130:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    2132:	cd 3f       	cpi	r28, 0xFD	; 253
    2134:	0c f4       	brge	.+2      	; 0x2138 <debugSerialInit+0x82>
			limit |= 1;
    2136:	81 60       	ori	r24, 0x01	; 1
    2138:	cf 5f       	subi	r28, 0xFF	; 255
	baud *= 2;

	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    213a:	c7 30       	cpi	r28, 0x07	; 7
    213c:	89 f7       	brne	.-30     	; 0x2120 <debugSerialInit+0x6a>
    213e:	55 c0       	rjmp	.+170    	; 0x21ea <debugSerialInit+0x134>
		if (exp < -3) {
			limit |= 1;
		}
	}

	if (exp < 0) {
    2140:	cc 23       	and	r28, r28
    2142:	0c f0       	brlt	.+2      	; 0x2146 <debugSerialInit+0x90>
    2144:	52 c0       	rjmp	.+164    	; 0x21ea <debugSerialInit+0x134>
		cpu_hz -= 8 * baud;
    2146:	97 01       	movw	r18, r14
    2148:	86 01       	movw	r16, r12
    214a:	00 0f       	add	r16, r16
    214c:	11 1f       	adc	r17, r17
    214e:	22 1f       	adc	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	00 0f       	add	r16, r16
    2154:	11 1f       	adc	r17, r17
    2156:	22 1f       	adc	r18, r18
    2158:	33 1f       	adc	r19, r19
    215a:	00 0f       	add	r16, r16
    215c:	11 1f       	adc	r17, r17
    215e:	22 1f       	adc	r18, r18
    2160:	33 1f       	adc	r19, r19
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	98 e4       	ldi	r25, 0x48	; 72
    2166:	a8 ee       	ldi	r26, 0xE8	; 232
    2168:	b1 e0       	ldi	r27, 0x01	; 1
    216a:	80 1b       	sub	r24, r16
    216c:	91 0b       	sbc	r25, r17
    216e:	a2 0b       	sbc	r26, r18
    2170:	b3 0b       	sbc	r27, r19

		if (exp <= -3) {
    2172:	ce 3f       	cpi	r28, 0xFE	; 254
    2174:	f4 f4       	brge	.+60     	; 0x21b2 <debugSerialInit+0xfc>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2176:	2d ef       	ldi	r18, 0xFD	; 253
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	2c 1b       	sub	r18, r28
    217c:	31 09       	sbc	r19, r1
    217e:	c7 fd       	sbrc	r28, 7
    2180:	33 95       	inc	r19
    2182:	04 c0       	rjmp	.+8      	; 0x218c <debugSerialInit+0xd6>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	aa 1f       	adc	r26, r26
    218a:	bb 1f       	adc	r27, r27
    218c:	2a 95       	dec	r18
    218e:	d2 f7       	brpl	.-12     	; 0x2184 <debugSerialInit+0xce>
    2190:	97 01       	movw	r18, r14
    2192:	86 01       	movw	r16, r12
    2194:	36 95       	lsr	r19
    2196:	27 95       	ror	r18
    2198:	17 95       	ror	r17
    219a:	07 95       	ror	r16
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	60 0f       	add	r22, r16
    21a2:	71 1f       	adc	r23, r17
    21a4:	82 1f       	adc	r24, r18
    21a6:	93 1f       	adc	r25, r19
    21a8:	a7 01       	movw	r20, r14
    21aa:	96 01       	movw	r18, r12
    21ac:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__udivmodsi4>
    21b0:	38 c0       	rjmp	.+112    	; 0x2222 <debugSerialInit+0x16c>
			} else {
			baud <<= exp + 3;
    21b2:	23 e0       	ldi	r18, 0x03	; 3
    21b4:	2c 0f       	add	r18, r28
    21b6:	46 01       	movw	r8, r12
    21b8:	57 01       	movw	r10, r14
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <debugSerialInit+0x10e>
    21bc:	88 0c       	add	r8, r8
    21be:	99 1c       	adc	r9, r9
    21c0:	aa 1c       	adc	r10, r10
    21c2:	bb 1c       	adc	r11, r11
    21c4:	2a 95       	dec	r18
    21c6:	d2 f7       	brpl	.-12     	; 0x21bc <debugSerialInit+0x106>
    21c8:	a5 01       	movw	r20, r10
    21ca:	94 01       	movw	r18, r8
			div = (cpu_hz + baud / 2) / baud;
    21cc:	75 01       	movw	r14, r10
    21ce:	64 01       	movw	r12, r8
    21d0:	f6 94       	lsr	r15
    21d2:	e7 94       	ror	r14
    21d4:	d7 94       	ror	r13
    21d6:	c7 94       	ror	r12
    21d8:	bc 01       	movw	r22, r24
    21da:	cd 01       	movw	r24, r26
    21dc:	6c 0d       	add	r22, r12
    21de:	7d 1d       	adc	r23, r13
    21e0:	8e 1d       	adc	r24, r14
    21e2:	9f 1d       	adc	r25, r15
    21e4:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__udivmodsi4>
    21e8:	1c c0       	rjmp	.+56     	; 0x2222 <debugSerialInit+0x16c>
		}
		} else {
		baud <<= exp + 3;
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	8c 0f       	add	r24, r28
    21ee:	a7 01       	movw	r20, r14
    21f0:	96 01       	movw	r18, r12
    21f2:	04 c0       	rjmp	.+8      	; 0x21fc <debugSerialInit+0x146>
    21f4:	22 0f       	add	r18, r18
    21f6:	33 1f       	adc	r19, r19
    21f8:	44 1f       	adc	r20, r20
    21fa:	55 1f       	adc	r21, r21
    21fc:	8a 95       	dec	r24
    21fe:	d2 f7       	brpl	.-12     	; 0x21f4 <debugSerialInit+0x13e>
		div = (cpu_hz + baud / 2) / baud - 1;
    2200:	da 01       	movw	r26, r20
    2202:	c9 01       	movw	r24, r18
    2204:	b6 95       	lsr	r27
    2206:	a7 95       	ror	r26
    2208:	97 95       	ror	r25
    220a:	87 95       	ror	r24
    220c:	bc 01       	movw	r22, r24
    220e:	cd 01       	movw	r24, r26
    2210:	78 5b       	subi	r23, 0xB8	; 184
    2212:	87 41       	sbci	r24, 0x17	; 23
    2214:	9e 4f       	sbci	r25, 0xFE	; 254
    2216:	0e 94 bc 2c 	call	0x5978	; 0x5978 <__udivmodsi4>
    221a:	21 50       	subi	r18, 0x01	; 1
    221c:	31 09       	sbc	r19, r1
    221e:	41 09       	sbc	r20, r1
    2220:	51 09       	sbc	r21, r1
	}

	// ???????????? ???????? ?????
	PORTF.DIRSET = PIN3_bm;  // TX
    2222:	e0 ea       	ldi	r30, 0xA0	; 160
    2224:	f6 e0       	ldi	r31, 0x06	; 6
    2226:	88 e0       	ldi	r24, 0x08	; 8
    2228:	81 83       	std	Z+1, r24	; 0x01
	PORTF.DIRCLR = PIN2_bm;  // RX
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	82 83       	std	Z+2, r24	; 0x02

	// ???????????? USART
	USARTF0.BAUDCTRLB = (uint8_t)(((div >> 8) & 0x0F) | (exp << 4));
    222e:	83 2f       	mov	r24, r19
    2230:	8f 70       	andi	r24, 0x0F	; 15
    2232:	c2 95       	swap	r28
    2234:	c0 7f       	andi	r28, 0xF0	; 240
    2236:	c8 2b       	or	r28, r24
    2238:	e0 ea       	ldi	r30, 0xA0	; 160
    223a:	fb e0       	ldi	r31, 0x0B	; 11
    223c:	c7 83       	std	Z+7, r28	; 0x07
	USARTF0.BAUDCTRLA = (uint8_t)div;
    223e:	26 83       	std	Z+6, r18	; 0x06

	USARTF0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc
    2240:	83 e0       	ldi	r24, 0x03	; 3
    2242:	85 83       	std	Z+5, r24	; 0x05
	| USART_PMODE_DISABLED_gc
	| USART_CHSIZE_8BIT_gc;

	USARTF0.CTRLB = 0 << USART_CLK2X_bp
    2244:	88 e1       	ldi	r24, 0x18	; 24
    2246:	84 83       	std	Z+4, r24	; 0x04
	| 0 << USART_MPCM_bp
	| 1 << USART_RXEN_bp
	| 1 << USART_TXEN_bp;
	
	USARTF0.CTRLA = USART_RXCINTLVL_MED_gc;
    2248:	80 e2       	ldi	r24, 0x20	; 32
    224a:	83 83       	std	Z+3, r24	; 0x03
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;
    224c:	e0 ea       	ldi	r30, 0xA0	; 160
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	82 60       	ori	r24, 0x02	; 2
    2254:	82 83       	std	Z+2, r24	; 0x02

	sei();
    2256:	78 94       	sei
	stdout = &debugSerialStream;
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	90 e2       	ldi	r25, 0x20	; 32
    225c:	80 93 9e 31 	sts	0x319E, r24	; 0x80319e <__iob+0x2>
    2260:	90 93 9f 31 	sts	0x319F, r25	; 0x80319f <__iob+0x3>
	return 0;
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	1a c0       	rjmp	.+52     	; 0x229c <debugSerialInit+0x1e6>
	min_rate = cpu_hz / 4194304;
	max_rate /= 2;
	min_rate /= 2;

	if ((baud > max_rate) || (baud < min_rate)) {
		return -1;
    2268:	8f ef       	ldi	r24, 0xFF	; 255
    226a:	18 c0       	rjmp	.+48     	; 0x229c <debugSerialInit+0x1e6>
			limit |= 1;
		}
	}

	if (exp < 0) {
		cpu_hz -= 8 * baud;
    226c:	97 01       	movw	r18, r14
    226e:	86 01       	movw	r16, r12
    2270:	00 0f       	add	r16, r16
    2272:	11 1f       	adc	r17, r17
    2274:	22 1f       	adc	r18, r18
    2276:	33 1f       	adc	r19, r19
    2278:	00 0f       	add	r16, r16
    227a:	11 1f       	adc	r17, r17
    227c:	22 1f       	adc	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	00 0f       	add	r16, r16
    2282:	11 1f       	adc	r17, r17
    2284:	22 1f       	adc	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	98 e4       	ldi	r25, 0x48	; 72
    228c:	a8 ee       	ldi	r26, 0xE8	; 232
    228e:	b1 e0       	ldi	r27, 0x01	; 1
    2290:	80 1b       	sub	r24, r16
    2292:	91 0b       	sbc	r25, r17
    2294:	a2 0b       	sbc	r26, r18
    2296:	b3 0b       	sbc	r27, r19
	baud *= 2;

	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    2298:	c9 ef       	ldi	r28, 0xF9	; 249
    229a:	6d cf       	rjmp	.-294    	; 0x2176 <debugSerialInit+0xc0>
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;

	sei();
	stdout = &debugSerialStream;
	return 0;
}
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	bf 90       	pop	r11
    22ac:	af 90       	pop	r10
    22ae:	9f 90       	pop	r9
    22b0:	8f 90       	pop	r8
    22b2:	08 95       	ret

000022b4 <debugSerialWriteChar>:

void debugSerialWriteChar(uint8_t tmpChar){
	while (!(USARTF0.STATUS & USART_DREIF_bm)); 
    22b4:	e0 ea       	ldi	r30, 0xA0	; 160
    22b6:	fb e0       	ldi	r31, 0x0B	; 11
    22b8:	91 81       	ldd	r25, Z+1	; 0x01
    22ba:	95 ff       	sbrs	r25, 5
    22bc:	fd cf       	rjmp	.-6      	; 0x22b8 <debugSerialWriteChar+0x4>
	USARTF0.DATA = tmpChar;
    22be:	80 93 a0 0b 	sts	0x0BA0, r24	; 0x800ba0 <__TEXT_REGION_LENGTH__+0x7beba0>
    22c2:	08 95       	ret

000022c4 <debugSerialPutChar>:

uint8_t getRxByte(void){
	return receivedByte;
}

uint16_t debugSerialPutChar(char c, FILE *stream) {
    22c4:	cf 93       	push	r28
    22c6:	c8 2f       	mov	r28, r24
	if (c == '\n') {
    22c8:	8a 30       	cpi	r24, 0x0A	; 10
    22ca:	19 f4       	brne	.+6      	; 0x22d2 <debugSerialPutChar+0xe>
		debugSerialWriteChar('\r');
    22cc:	8d e0       	ldi	r24, 0x0D	; 13
    22ce:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <debugSerialWriteChar>
	}
	debugSerialWriteChar(c);
    22d2:	8c 2f       	mov	r24, r28
    22d4:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <debugSerialWriteChar>
	return 0;
}
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	cf 91       	pop	r28
    22de:	08 95       	ret

000022e0 <gpio_set_pin_level>:
void gpio_set_port_direction(gpio *GPIOx, const uint8_t mask){
	
}
uint8_t gpio_get_port_level(gpio *GPIOx){
	return 0;	
}
    22e0:	dc 01       	movw	r26, r24
    22e2:	ed 91       	ld	r30, X+
    22e4:	fc 91       	ld	r31, X
    22e6:	11 97       	sbiw	r26, 0x01	; 1
    22e8:	66 23       	and	r22, r22
    22ea:	79 f0       	breq	.+30     	; 0x230a <gpio_set_pin_level+0x2a>
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	a9 01       	movw	r20, r18
    22f2:	12 96       	adiw	r26, 0x02	; 2
    22f4:	0c 90       	ld	r0, X
    22f6:	02 c0       	rjmp	.+4      	; 0x22fc <gpio_set_pin_level+0x1c>
    22f8:	44 0f       	add	r20, r20
    22fa:	55 1f       	adc	r21, r21
    22fc:	0a 94       	dec	r0
    22fe:	e2 f7       	brpl	.-8      	; 0x22f8 <gpio_set_pin_level+0x18>
    2300:	ca 01       	movw	r24, r20
    2302:	94 81       	ldd	r25, Z+4	; 0x04
    2304:	89 2b       	or	r24, r25
    2306:	84 83       	std	Z+4, r24	; 0x04
    2308:	08 95       	ret
    230a:	21 e0       	ldi	r18, 0x01	; 1
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	a9 01       	movw	r20, r18
    2310:	dc 01       	movw	r26, r24
    2312:	12 96       	adiw	r26, 0x02	; 2
    2314:	0c 90       	ld	r0, X
    2316:	02 c0       	rjmp	.+4      	; 0x231c <gpio_set_pin_level+0x3c>
    2318:	44 0f       	add	r20, r20
    231a:	55 1f       	adc	r21, r21
    231c:	0a 94       	dec	r0
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <gpio_set_pin_level+0x38>
    2320:	ca 01       	movw	r24, r20
    2322:	80 95       	com	r24
    2324:	94 81       	ldd	r25, Z+4	; 0x04
    2326:	89 23       	and	r24, r25
    2328:	84 83       	std	Z+4, r24	; 0x04
    232a:	08 95       	ret

0000232c <gpio_set_pin_direction>:
    232c:	fc 01       	movw	r30, r24
    232e:	a0 81       	ld	r26, Z
    2330:	b1 81       	ldd	r27, Z+1	; 0x01
    2332:	61 30       	cpi	r22, 0x01	; 1
    2334:	89 f0       	breq	.+34     	; 0x2358 <gpio_set_pin_direction+0x2c>
    2336:	18 f0       	brcs	.+6      	; 0x233e <gpio_set_pin_direction+0x12>
    2338:	62 30       	cpi	r22, 0x02	; 2
    233a:	d1 f0       	breq	.+52     	; 0x2370 <gpio_set_pin_direction+0x44>
    233c:	08 95       	ret
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	02 80       	ldd	r0, Z+2	; 0x02
    2344:	02 c0       	rjmp	.+4      	; 0x234a <gpio_set_pin_direction+0x1e>
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	0a 94       	dec	r0
    234c:	e2 f7       	brpl	.-8      	; 0x2346 <gpio_set_pin_direction+0x1a>
    234e:	80 95       	com	r24
    2350:	9c 91       	ld	r25, X
    2352:	89 23       	and	r24, r25
    2354:	8c 93       	st	X, r24
    2356:	08 95       	ret
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	02 80       	ldd	r0, Z+2	; 0x02
    235e:	02 c0       	rjmp	.+4      	; 0x2364 <gpio_set_pin_direction+0x38>
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	0a 94       	dec	r0
    2366:	e2 f7       	brpl	.-8      	; 0x2360 <gpio_set_pin_direction+0x34>
    2368:	9c 91       	ld	r25, X
    236a:	89 2b       	or	r24, r25
    236c:	8c 93       	st	X, r24
    236e:	08 95       	ret
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	9c 01       	movw	r18, r24
    2376:	02 80       	ldd	r0, Z+2	; 0x02
    2378:	02 c0       	rjmp	.+4      	; 0x237e <gpio_set_pin_direction+0x52>
    237a:	22 0f       	add	r18, r18
    237c:	33 1f       	adc	r19, r19
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <gpio_set_pin_direction+0x4e>
    2382:	20 95       	com	r18
    2384:	3c 91       	ld	r19, X
    2386:	23 23       	and	r18, r19
    2388:	2c 93       	st	X, r18
    238a:	a0 81       	ld	r26, Z
    238c:	b1 81       	ldd	r27, Z+1	; 0x01
    238e:	02 80       	ldd	r0, Z+2	; 0x02
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <gpio_set_pin_direction+0x6a>
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	0a 94       	dec	r0
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <gpio_set_pin_direction+0x66>
    239a:	80 95       	com	r24
    239c:	9c 91       	ld	r25, X
    239e:	89 23       	and	r24, r25
    23a0:	8c 93       	st	X, r24
    23a2:	08 95       	ret

000023a4 <gpio_get_pin_level>:


uint8_t gpio_get_pin_level(gpio *GPIOx){
	uint8_t *tmp_port = GPIOx->port+8;
	return *tmp_port & (1 << GPIOx->pin); 
    23a4:	dc 01       	movw	r26, r24
    23a6:	ed 91       	ld	r30, X+
    23a8:	fc 91       	ld	r31, X
    23aa:	11 97       	sbiw	r26, 0x01	; 1
    23ac:	21 e0       	ldi	r18, 0x01	; 1
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	a9 01       	movw	r20, r18
    23b2:	12 96       	adiw	r26, 0x02	; 2
    23b4:	0c 90       	ld	r0, X
    23b6:	02 c0       	rjmp	.+4      	; 0x23bc <gpio_get_pin_level+0x18>
    23b8:	44 0f       	add	r20, r20
    23ba:	55 1f       	adc	r21, r21
    23bc:	0a 94       	dec	r0
    23be:	e2 f7       	brpl	.-8      	; 0x23b8 <gpio_get_pin_level+0x14>
    23c0:	ca 01       	movw	r24, r20
    23c2:	90 85       	ldd	r25, Z+8	; 0x08
}
    23c4:	89 23       	and	r24, r25
    23c6:	08 95       	ret

000023c8 <gpio_toggle_pin_level>:
void gpio_toggle_pin_level(gpio *GPIOx){
	uint8_t *tmp_port = GPIOx->port+7;
    23c8:	dc 01       	movw	r26, r24
    23ca:	ed 91       	ld	r30, X+
    23cc:	fc 91       	ld	r31, X
    23ce:	11 97       	sbiw	r26, 0x01	; 1
	*tmp_port |= 1 << GPIOx->pin;
    23d0:	21 e0       	ldi	r18, 0x01	; 1
    23d2:	30 e0       	ldi	r19, 0x00	; 0
    23d4:	a9 01       	movw	r20, r18
    23d6:	12 96       	adiw	r26, 0x02	; 2
    23d8:	0c 90       	ld	r0, X
    23da:	02 c0       	rjmp	.+4      	; 0x23e0 <gpio_toggle_pin_level+0x18>
    23dc:	44 0f       	add	r20, r20
    23de:	55 1f       	adc	r21, r21
    23e0:	0a 94       	dec	r0
    23e2:	e2 f7       	brpl	.-8      	; 0x23dc <gpio_toggle_pin_level+0x14>
    23e4:	ca 01       	movw	r24, r20
    23e6:	97 81       	ldd	r25, Z+7	; 0x07
    23e8:	89 2b       	or	r24, r25
    23ea:	87 83       	std	Z+7, r24	; 0x07
    23ec:	08 95       	ret

000023ee <initSpic>:

void SD_Select(void){
	gpio_set_pin_level(&SD_CS, false);
}
void SD_Unselect(void){
	gpio_set_pin_level(&SD_CS, true);
    23ee:	e0 e4       	ldi	r30, 0x40	; 64
    23f0:	f6 e0       	ldi	r31, 0x06	; 6
    23f2:	80 eb       	ldi	r24, 0xB0	; 176
    23f4:	81 83       	std	Z+1, r24	; 0x01
    23f6:	80 e4       	ldi	r24, 0x40	; 64
    23f8:	82 83       	std	Z+2, r24	; 0x02
    23fa:	80 e5       	ldi	r24, 0x50	; 80
    23fc:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7be8c0>
    2400:	61 e0       	ldi	r22, 0x01	; 1
    2402:	8a e2       	ldi	r24, 0x2A	; 42
    2404:	90 e2       	ldi	r25, 0x20	; 32
    2406:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    240a:	61 e0       	ldi	r22, 0x01	; 1
    240c:	87 e2       	ldi	r24, 0x27	; 39
    240e:	90 e2       	ldi	r25, 0x20	; 32
    2410:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    2414:	61 e0       	ldi	r22, 0x01	; 1
    2416:	8b e1       	ldi	r24, 0x1B	; 27
    2418:	90 e2       	ldi	r25, 0x20	; 32
    241a:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    241e:	61 e0       	ldi	r22, 0x01	; 1
    2420:	88 e1       	ldi	r24, 0x18	; 24
    2422:	90 e2       	ldi	r25, 0x20	; 32
    2424:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	82 e1       	ldi	r24, 0x12	; 18
    242c:	90 e2       	ldi	r25, 0x20	; 32
    242e:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    2432:	61 e0       	ldi	r22, 0x01	; 1
    2434:	81 e2       	ldi	r24, 0x21	; 33
    2436:	90 e2       	ldi	r25, 0x20	; 32
    2438:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	84 e2       	ldi	r24, 0x24	; 36
    2440:	90 e2       	ldi	r25, 0x20	; 32
    2442:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    2446:	60 e0       	ldi	r22, 0x00	; 0
    2448:	8e e1       	ldi	r24, 0x1E	; 30
    244a:	90 e2       	ldi	r25, 0x20	; 32
    244c:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	8f e0       	ldi	r24, 0x0F	; 15
    2454:	90 e2       	ldi	r25, 0x20	; 32
    2456:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    245a:	60 e0       	ldi	r22, 0x00	; 0
    245c:	85 e1       	ldi	r24, 0x15	; 21
    245e:	90 e2       	ldi	r25, 0x20	; 32
    2460:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
    2464:	60 e0       	ldi	r22, 0x00	; 0
    2466:	8a e2       	ldi	r24, 0x2A	; 42
    2468:	90 e2       	ldi	r25, 0x20	; 32
    246a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    246e:	2f ef       	ldi	r18, 0xFF	; 255
    2470:	81 ee       	ldi	r24, 0xE1	; 225
    2472:	94 e0       	ldi	r25, 0x04	; 4
    2474:	21 50       	subi	r18, 0x01	; 1
    2476:	80 40       	sbci	r24, 0x00	; 0
    2478:	90 40       	sbci	r25, 0x00	; 0
    247a:	e1 f7       	brne	.-8      	; 0x2474 <initSpic+0x86>
    247c:	00 c0       	rjmp	.+0      	; 0x247e <initSpic+0x90>
    247e:	00 00       	nop
    2480:	61 e0       	ldi	r22, 0x01	; 1
    2482:	87 e2       	ldi	r24, 0x27	; 39
    2484:	90 e2       	ldi	r25, 0x20	; 32
    2486:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    248a:	61 e0       	ldi	r22, 0x01	; 1
    248c:	8b e1       	ldi	r24, 0x1B	; 27
    248e:	90 e2       	ldi	r25, 0x20	; 32
    2490:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	88 e1       	ldi	r24, 0x18	; 24
    2498:	90 e2       	ldi	r25, 0x20	; 32
    249a:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	8a e2       	ldi	r24, 0x2A	; 42
    24a2:	90 e2       	ldi	r25, 0x20	; 32
    24a4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	08 95       	ret

000024ac <spicTxBuff>:
    24ac:	61 15       	cp	r22, r1
    24ae:	71 05       	cpc	r23, r1
    24b0:	69 f0       	breq	.+26     	; 0x24cc <spicTxBuff+0x20>
    24b2:	dc 01       	movw	r26, r24
    24b4:	68 0f       	add	r22, r24
    24b6:	79 1f       	adc	r23, r25
    24b8:	e0 ec       	ldi	r30, 0xC0	; 192
    24ba:	f8 e0       	ldi	r31, 0x08	; 8
    24bc:	9d 91       	ld	r25, X+
    24be:	93 83       	std	Z+3, r25	; 0x03
    24c0:	92 81       	ldd	r25, Z+2	; 0x02
    24c2:	99 23       	and	r25, r25
    24c4:	ec f7       	brge	.-6      	; 0x24c0 <spicTxBuff+0x14>
    24c6:	a6 17       	cp	r26, r22
    24c8:	b7 07       	cpc	r27, r23
    24ca:	c1 f7       	brne	.-16     	; 0x24bc <spicTxBuff+0x10>
    24cc:	08 95       	ret

000024ce <spicRxBuff>:
    24ce:	61 15       	cp	r22, r1
    24d0:	71 05       	cpc	r23, r1
    24d2:	71 f0       	breq	.+28     	; 0x24f0 <spicRxBuff+0x22>
    24d4:	dc 01       	movw	r26, r24
    24d6:	68 0f       	add	r22, r24
    24d8:	79 1f       	adc	r23, r25
    24da:	e0 ec       	ldi	r30, 0xC0	; 192
    24dc:	f8 e0       	ldi	r31, 0x08	; 8
    24de:	13 82       	std	Z+3, r1	; 0x03
    24e0:	92 81       	ldd	r25, Z+2	; 0x02
    24e2:	99 23       	and	r25, r25
    24e4:	ec f7       	brge	.-6      	; 0x24e0 <spicRxBuff+0x12>
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	9d 93       	st	X+, r25
    24ea:	a6 17       	cp	r26, r22
    24ec:	b7 07       	cpc	r27, r23
    24ee:	b9 f7       	brne	.-18     	; 0x24de <spicRxBuff+0x10>
    24f0:	08 95       	ret

000024f2 <spicRxByte>:
    24f2:	10 92 c3 08 	sts	0x08C3, r1	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7be8c3>
    24f6:	e0 ec       	ldi	r30, 0xC0	; 192
    24f8:	f8 e0       	ldi	r31, 0x08	; 8
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	88 23       	and	r24, r24
    24fe:	ec f7       	brge	.-6      	; 0x24fa <spicRxByte+0x8>
    2500:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7be8c3>
    2504:	08 95       	ret

00002506 <spicTxByte>:
    2506:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7be8c3>
    250a:	e0 ec       	ldi	r30, 0xC0	; 192
    250c:	f8 e0       	ldi	r31, 0x08	; 8
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	88 23       	and	r24, r24
    2512:	ec f7       	brge	.-6      	; 0x250e <spicTxByte+0x8>
    2514:	08 95       	ret

00002516 <CAN_Select>:
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	87 e2       	ldi	r24, 0x27	; 39
    251a:	90 e2       	ldi	r25, 0x20	; 32
    251c:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    2520:	08 95       	ret

00002522 <CAN_Unselect>:
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	87 e2       	ldi	r24, 0x27	; 39
    2526:	90 e2       	ldi	r25, 0x20	; 32
    2528:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    252c:	08 95       	ret

0000252e <W5500_Select>:
}

void W5500_Select(void){
	gpio_set_pin_level(&ETH_CS, false);
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	8b e1       	ldi	r24, 0x1B	; 27
    2532:	90 e2       	ldi	r25, 0x20	; 32
    2534:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    2538:	08 95       	ret

0000253a <W5500_Unselect>:
}
void W5500_Unselect(void){
	gpio_set_pin_level(&ETH_CS, true);
    253a:	61 e0       	ldi	r22, 0x01	; 1
    253c:	8b e1       	ldi	r24, 0x1B	; 27
    253e:	90 e2       	ldi	r25, 0x20	; 32
    2540:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
    2544:	08 95       	ret

00002546 <W5500_ReadBuff>:
}
void W5500_ReadBuff(uint8_t* buff, uint16_t len){
	spicRxBuff(buff, len);
    2546:	0e 94 67 12 	call	0x24ce	; 0x24ce <spicRxBuff>
    254a:	08 95       	ret

0000254c <W5500_WriteBuff>:
}
void W5500_WriteBuff(uint8_t* buff, uint16_t len){
	spicTxBuff(buff, len);
    254c:	0e 94 56 12 	call	0x24ac	; 0x24ac <spicTxBuff>
    2550:	08 95       	ret

00002552 <W5500_ReadByte>:
}
uint8_t W5500_ReadByte(void){
	return spicRxByte();
    2552:	0e 94 79 12 	call	0x24f2	; 0x24f2 <spicRxByte>
}
    2556:	08 95       	ret

00002558 <W5500_Write_byte>:
void W5500_Write_byte(uint8_t byte){
	spicTxByte(byte);
    2558:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    255c:	08 95       	ret

0000255e <__vector_14>:
	sei();
	return 1;
}
uint32_t getSysTick(void){
	return sysTickCounter;
}
    255e:	1f 92       	push	r1
    2560:	0f 92       	push	r0
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	0f 92       	push	r0
    2566:	11 24       	eor	r1, r1
    2568:	2f 93       	push	r18
    256a:	8f 93       	push	r24
    256c:	9f 93       	push	r25
    256e:	af 93       	push	r26
    2570:	bf 93       	push	r27
    2572:	80 91 6e 29 	lds	r24, 0x296E	; 0x80296e <sysTickCounter>
    2576:	90 91 6f 29 	lds	r25, 0x296F	; 0x80296f <sysTickCounter+0x1>
    257a:	a0 91 70 29 	lds	r26, 0x2970	; 0x802970 <sysTickCounter+0x2>
    257e:	b0 91 71 29 	lds	r27, 0x2971	; 0x802971 <sysTickCounter+0x3>
    2582:	01 96       	adiw	r24, 0x01	; 1
    2584:	a1 1d       	adc	r26, r1
    2586:	b1 1d       	adc	r27, r1
    2588:	80 93 6e 29 	sts	0x296E, r24	; 0x80296e <sysTickCounter>
    258c:	90 93 6f 29 	sts	0x296F, r25	; 0x80296f <sysTickCounter+0x1>
    2590:	a0 93 70 29 	sts	0x2970, r26	; 0x802970 <sysTickCounter+0x2>
    2594:	b0 93 71 29 	sts	0x2971, r27	; 0x802971 <sysTickCounter+0x3>
    2598:	80 91 6c 29 	lds	r24, 0x296C	; 0x80296c <uptimePrescaler>
    259c:	90 91 6d 29 	lds	r25, 0x296D	; 0x80296d <uptimePrescaler+0x1>
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	87 3e       	cpi	r24, 0xE7	; 231
    25a4:	23 e0       	ldi	r18, 0x03	; 3
    25a6:	92 07       	cpc	r25, r18
    25a8:	29 f0       	breq	.+10     	; 0x25b4 <__vector_14+0x56>
    25aa:	80 93 6c 29 	sts	0x296C, r24	; 0x80296c <uptimePrescaler>
    25ae:	90 93 6d 29 	sts	0x296D, r25	; 0x80296d <uptimePrescaler+0x1>
    25b2:	17 c0       	rjmp	.+46     	; 0x25e2 <__vector_14+0x84>
    25b4:	10 92 6c 29 	sts	0x296C, r1	; 0x80296c <uptimePrescaler>
    25b8:	10 92 6d 29 	sts	0x296D, r1	; 0x80296d <uptimePrescaler+0x1>
    25bc:	80 91 72 29 	lds	r24, 0x2972	; 0x802972 <sysUpTimeCoumter>
    25c0:	90 91 73 29 	lds	r25, 0x2973	; 0x802973 <sysUpTimeCoumter+0x1>
    25c4:	a0 91 74 29 	lds	r26, 0x2974	; 0x802974 <sysUpTimeCoumter+0x2>
    25c8:	b0 91 75 29 	lds	r27, 0x2975	; 0x802975 <sysUpTimeCoumter+0x3>
    25cc:	01 96       	adiw	r24, 0x01	; 1
    25ce:	a1 1d       	adc	r26, r1
    25d0:	b1 1d       	adc	r27, r1
    25d2:	80 93 72 29 	sts	0x2972, r24	; 0x802972 <sysUpTimeCoumter>
    25d6:	90 93 73 29 	sts	0x2973, r25	; 0x802973 <sysUpTimeCoumter+0x1>
    25da:	a0 93 74 29 	sts	0x2974, r26	; 0x802974 <sysUpTimeCoumter+0x2>
    25de:	b0 93 75 29 	sts	0x2975, r27	; 0x802975 <sysUpTimeCoumter+0x3>
    25e2:	bf 91       	pop	r27
    25e4:	af 91       	pop	r26
    25e6:	9f 91       	pop	r25
    25e8:	8f 91       	pop	r24
    25ea:	2f 91       	pop	r18
    25ec:	0f 90       	pop	r0
    25ee:	0f be       	out	0x3f, r0	; 63
    25f0:	0f 90       	pop	r0
    25f2:	1f 90       	pop	r1
    25f4:	18 95       	reti

000025f6 <sysTickInit>:
    25f6:	e0 e4       	ldi	r30, 0x40	; 64
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	11 82       	std	Z+1, r1	; 0x01
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	80 83       	st	Z, r24
    2600:	e0 e0       	ldi	r30, 0x00	; 0
    2602:	f8 e0       	ldi	r31, 0x08	; 8
    2604:	85 e0       	ldi	r24, 0x05	; 5
    2606:	80 83       	st	Z, r24
    2608:	83 ef       	ldi	r24, 0xF3	; 243
    260a:	91 e0       	ldi	r25, 0x01	; 1
    260c:	86 a3       	std	Z+38, r24	; 0x26
    260e:	97 a3       	std	Z+39, r25	; 0x27
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	86 83       	std	Z+6, r24	; 0x06
    2614:	e0 ea       	ldi	r30, 0xA0	; 160
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	82 81       	ldd	r24, Z+2	; 0x02
    261a:	82 60       	ori	r24, 0x02	; 2
    261c:	82 83       	std	Z+2, r24	; 0x02
    261e:	78 94       	sei
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	08 95       	ret

00002624 <getUpTime>:

uint32_t getUpTime(void){
	return sysUpTimeCoumter;
    2624:	60 91 72 29 	lds	r22, 0x2972	; 0x802972 <sysUpTimeCoumter>
    2628:	70 91 73 29 	lds	r23, 0x2973	; 0x802973 <sysUpTimeCoumter+0x1>
    262c:	80 91 74 29 	lds	r24, 0x2974	; 0x802974 <sysUpTimeCoumter+0x2>
    2630:	90 91 75 29 	lds	r25, 0x2975	; 0x802975 <sysUpTimeCoumter+0x3>
    2634:	08 95       	ret

00002636 <__vector_64>:
 */ 
#include "twie_driver.h"

uint16_t intCounter;

ISR(PORTD_INT0_vect) {
    2636:	1f 92       	push	r1
    2638:	0f 92       	push	r0
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	0f 92       	push	r0
    263e:	11 24       	eor	r1, r1
    2640:	8f 93       	push	r24
    2642:	9f 93       	push	r25
	intCounter++;
    2644:	80 91 76 29 	lds	r24, 0x2976	; 0x802976 <intCounter>
    2648:	90 91 77 29 	lds	r25, 0x2977	; 0x802977 <intCounter+0x1>
    264c:	01 96       	adiw	r24, 0x01	; 1
    264e:	80 93 76 29 	sts	0x2976, r24	; 0x802976 <intCounter>
    2652:	90 93 77 29 	sts	0x2977, r25	; 0x802977 <intCounter+0x1>
}
    2656:	9f 91       	pop	r25
    2658:	8f 91       	pop	r24
    265a:	0f 90       	pop	r0
    265c:	0f be       	out	0x3f, r0	; 63
    265e:	0f 90       	pop	r0
    2660:	1f 90       	pop	r1
    2662:	18 95       	reti

00002664 <twieInit>:


uint8_t twieInit(void){
	PORTE.DIRSET = PIN1_bm; 
    2664:	e0 e8       	ldi	r30, 0x80	; 128
    2666:	f6 e0       	ldi	r31, 0x06	; 6
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	81 83       	std	Z+1, r24	; 0x01
	PORTE.DIRCLR = PIN0_bm; 
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	82 83       	std	Z+2, r24	; 0x02
	PORTE.PIN1CTRL = PORT_OPC_WIREDANDPULL_gc; 
    2670:	98 e3       	ldi	r25, 0x38	; 56
    2672:	91 8b       	std	Z+17, r25	; 0x11
	PORTE.PIN0CTRL = PORT_OPC_WIREDANDPULL_gc; 
    2674:	90 8b       	std	Z+16, r25	; 0x10
	TWIE.MASTER.BAUD = (uint8_t)TWIE_BAUD(F_CPU, TWIE_BAUDRATE); 
    2676:	e0 ea       	ldi	r30, 0xA0	; 160
    2678:	f4 e0       	ldi	r31, 0x04	; 4
    267a:	93 e2       	ldi	r25, 0x23	; 35
    267c:	95 83       	std	Z+5, r25	; 0x05
	TWIE.MASTER.CTRLA = TWI_MASTER_INTLVL_LO_gc     
    267e:	98 e7       	ldi	r25, 0x78	; 120
    2680:	91 83       	std	Z+1, r25	; 0x01
	| TWI_MASTER_RIEN_bm        
	| TWI_MASTER_WIEN_bm        
	| TWI_MASTER_ENABLE_bm;     
	TWIE.MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
    2682:	84 83       	std	Z+4, r24	; 0x04
	
	return 0;
}
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	08 95       	ret

00002688 <initTwieInt>:

void initTwieInt(void){
	PORTD.DIRCLR = PIN0_bm;
    2688:	e0 e6       	ldi	r30, 0x60	; 96
    268a:	f6 e0       	ldi	r31, 0x06	; 6
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	82 83       	std	Z+2, r24	; 0x02
	PORTD.PIN0CTRL = PORT_OPC_PULLUP_gc | PORT_ISC_FALLING_gc;
    2690:	9a e1       	ldi	r25, 0x1A	; 26
    2692:	90 8b       	std	Z+16, r25	; 0x10
	PORTD.INTCTRL = PORT_INT0LVL_MED_gc;
    2694:	92 e0       	ldi	r25, 0x02	; 2
    2696:	91 87       	std	Z+9, r25	; 0x09
	PORTD.INT0MASK = PIN0_bm;
    2698:	82 87       	std	Z+10, r24	; 0x0a
	//PMIC.CTRL |= PMIC_LOLVLEN_bm;
	sei();
    269a:	78 94       	sei
    269c:	08 95       	ret

0000269e <getTwieInt>:
}

uint8_t getTwieInt(void){
	uint16_t tmpVal = intCounter;
    269e:	80 91 76 29 	lds	r24, 0x2976	; 0x802976 <intCounter>
    26a2:	90 91 77 29 	lds	r25, 0x2977	; 0x802977 <intCounter+0x1>
	intCounter = 0;
    26a6:	10 92 76 29 	sts	0x2976, r1	; 0x802976 <intCounter>
    26aa:	10 92 77 29 	sts	0x2977, r1	; 0x802977 <intCounter+0x1>
	return (tmpVal > 0xff) ? 0xff : (tmpVal & 0xff);
    26ae:	8f 3f       	cpi	r24, 0xFF	; 255
    26b0:	91 05       	cpc	r25, r1
    26b2:	11 f0       	breq	.+4      	; 0x26b8 <getTwieInt+0x1a>
    26b4:	08 f0       	brcs	.+2      	; 0x26b8 <getTwieInt+0x1a>
    26b6:	8f ef       	ldi	r24, 0xFF	; 255
}
    26b8:	08 95       	ret

000026ba <twieTxBuff>:

bool twieTxBuff(uint8_t address, uint8_t reg, uint8_t *data, uint8_t data_len) {
	TWIE.MASTER.ADDR = (address << 1) | TWI_WRITE;
    26ba:	88 0f       	add	r24, r24
    26bc:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7be4a6>
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_WIF_bm));
    26c0:	e0 ea       	ldi	r30, 0xA0	; 160
    26c2:	f4 e0       	ldi	r31, 0x04	; 4
    26c4:	84 81       	ldd	r24, Z+4	; 0x04
    26c6:	86 ff       	sbrs	r24, 6
    26c8:	fd cf       	rjmp	.-6      	; 0x26c4 <twieTxBuff+0xa>
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    26ca:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7be4a4>
    26ce:	84 ff       	sbrs	r24, 4
    26d0:	05 c0       	rjmp	.+10     	; 0x26dc <twieTxBuff+0x22>
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    26d2:	83 e0       	ldi	r24, 0x03	; 3
    26d4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
		return false;
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	08 95       	ret
	}

	TWIE.MASTER.DATA = reg;
    26dc:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7be4a7>
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_WIF_bm));
    26e0:	e0 ea       	ldi	r30, 0xA0	; 160
    26e2:	f4 e0       	ldi	r31, 0x04	; 4
    26e4:	84 81       	ldd	r24, Z+4	; 0x04
    26e6:	86 ff       	sbrs	r24, 6
    26e8:	fd cf       	rjmp	.-6      	; 0x26e4 <twieTxBuff+0x2a>
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    26ea:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7be4a4>
    26ee:	84 fd       	sbrc	r24, 4
    26f0:	03 c0       	rjmp	.+6      	; 0x26f8 <twieTxBuff+0x3e>
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		return false;
	}

	for (uint8_t i = 0; i < data_len; i++) {
    26f2:	21 11       	cpse	r18, r1
    26f4:	06 c0       	rjmp	.+12     	; 0x2702 <twieTxBuff+0x48>
    26f6:	1e c0       	rjmp	.+60     	; 0x2734 <twieTxBuff+0x7a>
	}

	TWIE.MASTER.DATA = reg;
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_WIF_bm));
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    26f8:	83 e0       	ldi	r24, 0x03	; 3
    26fa:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
		return false;
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	08 95       	ret
    2702:	da 01       	movw	r26, r20
    2704:	21 50       	subi	r18, 0x01	; 1
    2706:	82 2f       	mov	r24, r18
    2708:	90 e0       	ldi	r25, 0x00	; 0
    270a:	01 96       	adiw	r24, 0x01	; 1
    270c:	48 0f       	add	r20, r24
    270e:	59 1f       	adc	r21, r25
	}

	for (uint8_t i = 0; i < data_len; i++) {
		TWIE.MASTER.DATA = data[i];
    2710:	e0 ea       	ldi	r30, 0xA0	; 160
    2712:	f4 e0       	ldi	r31, 0x04	; 4
    2714:	8d 91       	ld	r24, X+
    2716:	87 83       	std	Z+7, r24	; 0x07
		while (!(TWIE.MASTER.STATUS & TWI_MASTER_WIF_bm));
    2718:	84 81       	ldd	r24, Z+4	; 0x04
    271a:	86 ff       	sbrs	r24, 6
    271c:	fd cf       	rjmp	.-6      	; 0x2718 <twieTxBuff+0x5e>
		if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    271e:	84 81       	ldd	r24, Z+4	; 0x04
    2720:	84 ff       	sbrs	r24, 4
    2722:	05 c0       	rjmp	.+10     	; 0x272e <twieTxBuff+0x74>
			TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2724:	83 e0       	ldi	r24, 0x03	; 3
    2726:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
			return false;
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	08 95       	ret
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		return false;
	}

	for (uint8_t i = 0; i < data_len; i++) {
    272e:	a4 17       	cp	r26, r20
    2730:	b5 07       	cpc	r27, r21
    2732:	81 f7       	brne	.-32     	; 0x2714 <twieTxBuff+0x5a>
		if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
			TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
			return false;
		}
	}
	TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2734:	83 e0       	ldi	r24, 0x03	; 3
    2736:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
	return true;
    273a:	81 e0       	ldi	r24, 0x01	; 1
}
    273c:	08 95       	ret

0000273e <twieRxBuff>:


bool twieRxBuff(uint8_t address, uint8_t reg, uint8_t *data, uint8_t data_len) {
	TWIE.MASTER.ADDR = (address << 1) | TWI_WRITE;
    273e:	98 2f       	mov	r25, r24
    2740:	99 0f       	add	r25, r25
    2742:	90 93 a6 04 	sts	0x04A6, r25	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7be4a6>
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_WIF_bm));
    2746:	e0 ea       	ldi	r30, 0xA0	; 160
    2748:	f4 e0       	ldi	r31, 0x04	; 4
    274a:	94 81       	ldd	r25, Z+4	; 0x04
    274c:	96 ff       	sbrs	r25, 6
    274e:	fd cf       	rjmp	.-6      	; 0x274a <twieRxBuff+0xc>
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    2750:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7be4a4>
    2754:	94 ff       	sbrs	r25, 4
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <twieRxBuff+0x24>
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2758:	83 e0       	ldi	r24, 0x03	; 3
    275a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
		return false;
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	08 95       	ret
	}

	TWIE.MASTER.DATA = reg;
    2762:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7be4a7>
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_WIF_bm));
    2766:	e0 ea       	ldi	r30, 0xA0	; 160
    2768:	f4 e0       	ldi	r31, 0x04	; 4
    276a:	94 81       	ldd	r25, Z+4	; 0x04
    276c:	96 ff       	sbrs	r25, 6
    276e:	fd cf       	rjmp	.-6      	; 0x276a <twieRxBuff+0x2c>
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    2770:	90 91 a4 04 	lds	r25, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7be4a4>
    2774:	94 ff       	sbrs	r25, 4
    2776:	05 c0       	rjmp	.+10     	; 0x2782 <twieRxBuff+0x44>
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2778:	83 e0       	ldi	r24, 0x03	; 3
    277a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
		return false;
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	08 95       	ret
	}

	TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    2782:	e0 ea       	ldi	r30, 0xA0	; 160
    2784:	f4 e0       	ldi	r31, 0x04	; 4
    2786:	93 e0       	ldi	r25, 0x03	; 3
    2788:	93 83       	std	Z+3, r25	; 0x03
	TWIE.MASTER.ADDR = (address << 1) | TWI_READ;
    278a:	88 0f       	add	r24, r24
    278c:	81 60       	ori	r24, 0x01	; 1
    278e:	86 83       	std	Z+6, r24	; 0x06
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_RIF_bm));
    2790:	84 81       	ldd	r24, Z+4	; 0x04
    2792:	88 23       	and	r24, r24
    2794:	ec f7       	brge	.-6      	; 0x2790 <twieRxBuff+0x52>
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
    2796:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7be4a4>
    279a:	84 fd       	sbrc	r24, 4
    279c:	03 c0       	rjmp	.+6      	; 0x27a4 <twieRxBuff+0x66>
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		return false;
	}

	for (uint8_t i = 0; i < data_len; i++) {
    279e:	21 11       	cpse	r18, r1
    27a0:	06 c0       	rjmp	.+12     	; 0x27ae <twieRxBuff+0x70>
    27a2:	1d c0       	rjmp	.+58     	; 0x27de <twieRxBuff+0xa0>

	TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
	TWIE.MASTER.ADDR = (address << 1) | TWI_READ;
	while (!(TWIE.MASTER.STATUS & TWI_MASTER_RIF_bm));
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
    27a4:	83 e0       	ldi	r24, 0x03	; 3
    27a6:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
		return false;
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	08 95       	ret
    27ae:	a4 2f       	mov	r26, r20
    27b0:	b5 2f       	mov	r27, r21
	}

	for (uint8_t i = 0; i < data_len; i++) {
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	50 e0       	ldi	r21, 0x00	; 0
		while (!(TWIE.MASTER.STATUS & TWI_MASTER_RIF_bm));
    27b6:	e0 ea       	ldi	r30, 0xA0	; 160
    27b8:	f4 e0       	ldi	r31, 0x04	; 4
		data[i] = TWIE.MASTER.DATA;
		if (i < (data_len - 1)) {
    27ba:	62 2f       	mov	r22, r18
    27bc:	70 e0       	ldi	r23, 0x00	; 0
    27be:	61 50       	subi	r22, 0x01	; 1
    27c0:	71 09       	sbc	r23, r1
			TWIE.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    27c2:	92 e0       	ldi	r25, 0x02	; 2
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		return false;
	}

	for (uint8_t i = 0; i < data_len; i++) {
		while (!(TWIE.MASTER.STATUS & TWI_MASTER_RIF_bm));
    27c4:	84 81       	ldd	r24, Z+4	; 0x04
    27c6:	88 23       	and	r24, r24
    27c8:	ec f7       	brge	.-6      	; 0x27c4 <twieRxBuff+0x86>
		data[i] = TWIE.MASTER.DATA;
    27ca:	87 81       	ldd	r24, Z+7	; 0x07
    27cc:	8d 93       	st	X+, r24
		if (i < (data_len - 1)) {
    27ce:	46 17       	cp	r20, r22
    27d0:	57 07       	cpc	r21, r23
    27d2:	0c f4       	brge	.+2      	; 0x27d6 <twieRxBuff+0x98>
			TWIE.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
    27d4:	93 83       	std	Z+3, r25	; 0x03
    27d6:	4f 5f       	subi	r20, 0xFF	; 255
    27d8:	5f 4f       	sbci	r21, 0xFF	; 255
	if (TWIE.MASTER.STATUS & TWI_MASTER_RXACK_bm) {
		TWIE.MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		return false;
	}

	for (uint8_t i = 0; i < data_len; i++) {
    27da:	42 17       	cp	r20, r18
    27dc:	98 f3       	brcs	.-26     	; 0x27c4 <twieRxBuff+0x86>
		data[i] = TWIE.MASTER.DATA;
		if (i < (data_len - 1)) {
			TWIE.MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
		}
	}
	TWIE.MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
    27de:	87 e0       	ldi	r24, 0x07	; 7
    27e0:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7be4a3>
	return true;
    27e4:	81 e0       	ldi	r24, 0x01	; 1
}
    27e6:	08 95       	ret

000027e8 <convertCANid2Reg>:
  MCP2515_BitModify(MCP2515_CANINTF, 0x40, 0x00);        
  
  /* Enable CAN bus activity wakeup */
  MCP2515_BitModify(MCP2515_CANINTE, 0x40, 0x40);        
  
  MCP2515_SetSleepMode();
    27e8:	0f 93       	push	r16
    27ea:	1f 93       	push	r17
    27ec:	f9 01       	movw	r30, r18
    27ee:	42 30       	cpi	r20, 0x02	; 2
    27f0:	e1 f4       	brne	.+56     	; 0x282a <convertCANid2Reg+0x42>
    27f2:	63 83       	std	Z+3, r22	; 0x03
    27f4:	72 83       	std	Z+2, r23	; 0x02
    27f6:	aa 27       	eor	r26, r26
    27f8:	bb 27       	eor	r27, r27
    27fa:	8c 01       	movw	r16, r24
    27fc:	9d 01       	movw	r18, r26
    27fe:	00 0f       	add	r16, r16
    2800:	11 1f       	adc	r17, r17
    2802:	22 1f       	adc	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	00 0f       	add	r16, r16
    2808:	11 1f       	adc	r17, r17
    280a:	22 1f       	adc	r18, r18
    280c:	33 1f       	adc	r19, r19
    280e:	00 0f       	add	r16, r16
    2810:	11 1f       	adc	r17, r17
    2812:	22 1f       	adc	r18, r18
    2814:	33 1f       	adc	r19, r19
    2816:	68 2f       	mov	r22, r24
    2818:	63 70       	andi	r22, 0x03	; 3
    281a:	68 5f       	subi	r22, 0xF8	; 248
    281c:	80 2f       	mov	r24, r16
    281e:	80 7e       	andi	r24, 0xE0	; 224
    2820:	68 0f       	add	r22, r24
    2822:	6b 7e       	andi	r22, 0xEB	; 235
    2824:	61 83       	std	Z+1, r22	; 0x01
    2826:	10 83       	st	Z, r17
    2828:	1a c0       	rjmp	.+52     	; 0x285e <convertCANid2Reg+0x76>
    282a:	12 82       	std	Z+2, r1	; 0x02
    282c:	13 82       	std	Z+3, r1	; 0x03
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	88 0f       	add	r24, r24
    2834:	99 1f       	adc	r25, r25
    2836:	aa 1f       	adc	r26, r26
    2838:	bb 1f       	adc	r27, r27
    283a:	88 0f       	add	r24, r24
    283c:	99 1f       	adc	r25, r25
    283e:	aa 1f       	adc	r26, r26
    2840:	bb 1f       	adc	r27, r27
    2842:	88 0f       	add	r24, r24
    2844:	99 1f       	adc	r25, r25
    2846:	aa 1f       	adc	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	aa 1f       	adc	r26, r26
    2850:	bb 1f       	adc	r27, r27
    2852:	88 0f       	add	r24, r24
    2854:	99 1f       	adc	r25, r25
    2856:	aa 1f       	adc	r26, r26
    2858:	bb 1f       	adc	r27, r27
    285a:	81 83       	std	Z+1, r24	; 0x01
    285c:	90 83       	st	Z, r25
    285e:	1f 91       	pop	r17
    2860:	0f 91       	pop	r16
    2862:	08 95       	ret

00002864 <CANSPI_Initialize>:
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	a0 97       	sbiw	r28, 0x20	; 32
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	de bf       	out	0x3e, r29	; 62
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
    2872:	19 8e       	std	Y+25, r1	; 0x19
  RXM0reg.RXM0SIDL = 0x00;
    2874:	1a 8e       	std	Y+26, r1	; 0x1a
  RXM0reg.RXM0EID8 = 0x00;
    2876:	1b 8e       	std	Y+27, r1	; 0x1b
  RXM0reg.RXM0EID0 = 0x00;
    2878:	1c 8e       	std	Y+28, r1	; 0x1c
  
  RXM1reg.RXM1SIDH = 0x00;
    287a:	1d 8e       	std	Y+29, r1	; 0x1d
  RXM1reg.RXM1SIDL = 0x00;
    287c:	1e 8e       	std	Y+30, r1	; 0x1e
  RXM1reg.RXM1EID8 = 0x00;
    287e:	1f 8e       	std	Y+31, r1	; 0x1f
  RXM1reg.RXM1EID0 = 0x00;
    2880:	18 a2       	std	Y+32, r1	; 0x20
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
    2882:	19 82       	std	Y+1, r1	; 0x01
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
    2884:	1a 82       	std	Y+2, r1	; 0x02
  RXF0reg.RXF0EID8 = 0x00;
    2886:	1b 82       	std	Y+3, r1	; 0x03
  RXF0reg.RXF0EID0 = 0x00;
    2888:	1c 82       	std	Y+4, r1	; 0x04
  
  RXF1reg.RXF1SIDH = 0x00;
    288a:	1d 82       	std	Y+5, r1	; 0x05
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
    288c:	88 e0       	ldi	r24, 0x08	; 8
    288e:	8e 83       	std	Y+6, r24	; 0x06
  RXF1reg.RXF1EID8 = 0x00;
    2890:	1f 82       	std	Y+7, r1	; 0x07
  RXF1reg.RXF1EID0 = 0x00;
    2892:	18 86       	std	Y+8, r1	; 0x08
  
  RXF2reg.RXF2SIDH = 0x00;
    2894:	19 86       	std	Y+9, r1	; 0x09
  RXF2reg.RXF2SIDL = 0x00;
    2896:	1a 86       	std	Y+10, r1	; 0x0a
  RXF2reg.RXF2EID8 = 0x00;
    2898:	1b 86       	std	Y+11, r1	; 0x0b
  RXF2reg.RXF2EID0 = 0x00;
    289a:	1c 86       	std	Y+12, r1	; 0x0c
  
  RXF3reg.RXF3SIDH = 0x00;
    289c:	1d 86       	std	Y+13, r1	; 0x0d
  RXF3reg.RXF3SIDL = 0x00;
    289e:	1e 86       	std	Y+14, r1	; 0x0e
  RXF3reg.RXF3EID8 = 0x00;
    28a0:	1f 86       	std	Y+15, r1	; 0x0f
  RXF3reg.RXF3EID0 = 0x00;
    28a2:	18 8a       	std	Y+16, r1	; 0x10
  
  RXF4reg.RXF4SIDH = 0x00;
    28a4:	19 8a       	std	Y+17, r1	; 0x11
  RXF4reg.RXF4SIDL = 0x00;
    28a6:	1a 8a       	std	Y+18, r1	; 0x12
  RXF4reg.RXF4EID8 = 0x00;
    28a8:	1b 8a       	std	Y+19, r1	; 0x13
  RXF4reg.RXF4EID0 = 0x00;
    28aa:	1c 8a       	std	Y+20, r1	; 0x14
  
  RXF5reg.RXF5SIDH = 0x00;
    28ac:	1d 8a       	std	Y+21, r1	; 0x15
  RXF5reg.RXF5SIDL = 0x08;
    28ae:	8e 8b       	std	Y+22, r24	; 0x16
  RXF5reg.RXF5EID8 = 0x00;
    28b0:	1f 8a       	std	Y+23, r1	; 0x17
  RXF5reg.RXF5EID0 = 0x00;
    28b2:	18 8e       	std	Y+24, r1	; 0x18
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
    28b4:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <MCP2515_Initialize>
    28b8:	88 23       	and	r24, r24
    28ba:	09 f4       	brne	.+2      	; 0x28be <CANSPI_Initialize+0x5a>
    28bc:	53 c0       	rjmp	.+166    	; 0x2964 <CANSPI_Initialize+0x100>
  {
    return false;
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
    28be:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <MCP2515_SetConfigMode>
    28c2:	88 23       	and	r24, r24
    28c4:	09 f4       	brne	.+2      	; 0x28c8 <CANSPI_Initialize+0x64>
    28c6:	4e c0       	rjmp	.+156    	; 0x2964 <CANSPI_Initialize+0x100>
  {
    return false;
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
    28c8:	ae 01       	movw	r20, r28
    28ca:	47 5e       	subi	r20, 0xE7	; 231
    28cc:	5f 4f       	sbci	r21, 0xFF	; 255
    28ce:	63 e2       	ldi	r22, 0x23	; 35
    28d0:	80 e2       	ldi	r24, 0x20	; 32
    28d2:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
    28d6:	ae 01       	movw	r20, r28
    28d8:	43 5e       	subi	r20, 0xE3	; 227
    28da:	5f 4f       	sbci	r21, 0xFF	; 255
    28dc:	67 e2       	ldi	r22, 0x27	; 39
    28de:	84 e2       	ldi	r24, 0x24	; 36
    28e0:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
    28e4:	ae 01       	movw	r20, r28
    28e6:	4f 5f       	subi	r20, 0xFF	; 255
    28e8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ea:	63 e0       	ldi	r22, 0x03	; 3
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
    28f2:	ae 01       	movw	r20, r28
    28f4:	4b 5f       	subi	r20, 0xFB	; 251
    28f6:	5f 4f       	sbci	r21, 0xFF	; 255
    28f8:	67 e0       	ldi	r22, 0x07	; 7
    28fa:	84 e0       	ldi	r24, 0x04	; 4
    28fc:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
    2900:	ae 01       	movw	r20, r28
    2902:	47 5f       	subi	r20, 0xF7	; 247
    2904:	5f 4f       	sbci	r21, 0xFF	; 255
    2906:	6b e0       	ldi	r22, 0x0B	; 11
    2908:	88 e0       	ldi	r24, 0x08	; 8
    290a:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
    290e:	ae 01       	movw	r20, r28
    2910:	43 5f       	subi	r20, 0xF3	; 243
    2912:	5f 4f       	sbci	r21, 0xFF	; 255
    2914:	63 e1       	ldi	r22, 0x13	; 19
    2916:	80 e1       	ldi	r24, 0x10	; 16
    2918:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
    291c:	ae 01       	movw	r20, r28
    291e:	4f 5e       	subi	r20, 0xEF	; 239
    2920:	5f 4f       	sbci	r21, 0xFF	; 255
    2922:	67 e1       	ldi	r22, 0x17	; 23
    2924:	84 e1       	ldi	r24, 0x14	; 20
    2926:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
    292a:	ae 01       	movw	r20, r28
    292c:	4b 5e       	subi	r20, 0xEB	; 235
    292e:	5f 4f       	sbci	r21, 0xFF	; 255
    2930:	6b e1       	ldi	r22, 0x1B	; 27
    2932:	88 e1       	ldi	r24, 0x18	; 24
    2934:	0e 94 17 16 	call	0x2c2e	; 0x2c2e <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
    2938:	64 e0       	ldi	r22, 0x04	; 4
    293a:	80 e6       	ldi	r24, 0x60	; 96
    293c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
    2940:	61 e0       	ldi	r22, 0x01	; 1
    2942:	80 e7       	ldi	r24, 0x70	; 112
    2944:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
    2948:	60 e0       	ldi	r22, 0x00	; 0
    294a:	8a e2       	ldi	r24, 0x2A	; 42
    294c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
    2950:	65 ee       	ldi	r22, 0xE5	; 229
    2952:	89 e2       	ldi	r24, 0x29	; 41
    2954:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
    2958:	63 e8       	ldi	r22, 0x83	; 131
    295a:	88 e2       	ldi	r24, 0x28	; 40
    295c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
  
  /* Normal ??? ?? */
  if(!MCP2515_SetNormalMode())
    2960:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <MCP2515_SetNormalMode>
    return false;
  
  return true;
}
    2964:	a0 96       	adiw	r28, 0x20	; 32
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	df 91       	pop	r29
    296c:	cf 91       	pop	r28
    296e:	08 95       	ret

00002970 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	ec 01       	movw	r28, r24
  uint8_t returnValue = 0;
  
  idReg.tempSIDH = 0;
    2976:	ea e7       	ldi	r30, 0x7A	; 122
    2978:	f9 e2       	ldi	r31, 0x29	; 41
    297a:	10 82       	st	Z, r1
  idReg.tempSIDL = 0;
    297c:	11 82       	std	Z+1, r1	; 0x01
  idReg.tempEID8 = 0;
    297e:	12 82       	std	Z+2, r1	; 0x02
  idReg.tempEID0 = 0;
    2980:	13 82       	std	Z+3, r1	; 0x03
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
    2982:	0e 94 64 16 	call	0x2cc8	; 0x2cc8 <MCP2515_ReadStatus>
    2986:	80 93 79 29 	sts	0x2979, r24	; 0x802979 <ctrlStatus>
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
    298a:	82 fd       	sbrc	r24, 2
    298c:	17 c0       	rjmp	.+46     	; 0x29bc <CANSPI_Transmit+0x4c>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
    298e:	69 81       	ldd	r22, Y+1	; 0x01
    2990:	7a 81       	ldd	r23, Y+2	; 0x02
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	2a e7       	ldi	r18, 0x7A	; 122
    2998:	39 e2       	ldi	r19, 0x29	; 41
    299a:	48 81       	ld	r20, Y
    299c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
    29a0:	9e 01       	movw	r18, r28
    29a2:	2a 5f       	subi	r18, 0xFA	; 250
    29a4:	3f 4f       	sbci	r19, 0xFF	; 255
    29a6:	4d 81       	ldd	r20, Y+5	; 0x05
    29a8:	6a e7       	ldi	r22, 0x7A	; 122
    29aa:	79 e2       	ldi	r23, 0x29	; 41
    29ac:	80 e4       	ldi	r24, 0x40	; 64
    29ae:	0e 94 34 16 	call	0x2c68	; 0x2c68 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
    29b2:	81 e8       	ldi	r24, 0x81	; 129
    29b4:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <MCP2515_RequestToSend>
    
    returnValue = 1;
    29b8:	81 e0       	ldi	r24, 0x01	; 1
    29ba:	33 c0       	rjmp	.+102    	; 0x2a22 <CANSPI_Transmit+0xb2>
  }
  else if (ctrlStatus.TXB1REQ != 1)
    29bc:	84 fd       	sbrc	r24, 4
    29be:	17 c0       	rjmp	.+46     	; 0x29ee <CANSPI_Transmit+0x7e>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
    29c0:	69 81       	ldd	r22, Y+1	; 0x01
    29c2:	7a 81       	ldd	r23, Y+2	; 0x02
    29c4:	8b 81       	ldd	r24, Y+3	; 0x03
    29c6:	9c 81       	ldd	r25, Y+4	; 0x04
    29c8:	2a e7       	ldi	r18, 0x7A	; 122
    29ca:	39 e2       	ldi	r19, 0x29	; 41
    29cc:	48 81       	ld	r20, Y
    29ce:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
    29d2:	9e 01       	movw	r18, r28
    29d4:	2a 5f       	subi	r18, 0xFA	; 250
    29d6:	3f 4f       	sbci	r19, 0xFF	; 255
    29d8:	4d 81       	ldd	r20, Y+5	; 0x05
    29da:	6a e7       	ldi	r22, 0x7A	; 122
    29dc:	79 e2       	ldi	r23, 0x29	; 41
    29de:	82 e4       	ldi	r24, 0x42	; 66
    29e0:	0e 94 34 16 	call	0x2c68	; 0x2c68 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
    29e4:	82 e8       	ldi	r24, 0x82	; 130
    29e6:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <MCP2515_RequestToSend>
    
    returnValue = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	1a c0       	rjmp	.+52     	; 0x2a22 <CANSPI_Transmit+0xb2>
  }
  else if (ctrlStatus.TXB2REQ != 1)
    29ee:	86 fd       	sbrc	r24, 6
    29f0:	17 c0       	rjmp	.+46     	; 0x2a20 <CANSPI_Transmit+0xb0>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
    29f2:	69 81       	ldd	r22, Y+1	; 0x01
    29f4:	7a 81       	ldd	r23, Y+2	; 0x02
    29f6:	8b 81       	ldd	r24, Y+3	; 0x03
    29f8:	9c 81       	ldd	r25, Y+4	; 0x04
    29fa:	2a e7       	ldi	r18, 0x7A	; 122
    29fc:	39 e2       	ldi	r19, 0x29	; 41
    29fe:	48 81       	ld	r20, Y
    2a00:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
    2a04:	9e 01       	movw	r18, r28
    2a06:	2a 5f       	subi	r18, 0xFA	; 250
    2a08:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0a:	4d 81       	ldd	r20, Y+5	; 0x05
    2a0c:	6a e7       	ldi	r22, 0x7A	; 122
    2a0e:	79 e2       	ldi	r23, 0x29	; 41
    2a10:	84 e4       	ldi	r24, 0x44	; 68
    2a12:	0e 94 34 16 	call	0x2c68	; 0x2c68 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
    2a16:	84 e8       	ldi	r24, 0x84	; 132
    2a18:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <MCP2515_RequestToSend>
    
    returnValue = 1;
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <CANSPI_Transmit+0xb2>
}

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
  uint8_t returnValue = 0;
    2a20:	80 e0       	ldi	r24, 0x00	; 0
    
    returnValue = 1;
  }
  
  return (returnValue);
}
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	08 95       	ret

00002a28 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	cf 93       	push	r28
    2a30:	df 93       	push	r29
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	2d 97       	sbiw	r28, 0x0d	; 13
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	8c 01       	movw	r16, r24
  uint8_t returnValue = 0;
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
    2a3e:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <MCP2515_GetRxStatus>
    2a42:	f8 2e       	mov	r15, r24
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
    2a44:	80 7c       	andi	r24, 0xC0	; 192
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <CANSPI_Receive+0x22>
    2a48:	83 c0       	rjmp	.+262    	; 0x2b50 <CANSPI_Receive+0x128>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
    2a4a:	f6 fe       	sbrs	r15, 6
    2a4c:	08 c0       	rjmp	.+16     	; 0x2a5e <CANSPI_Receive+0x36>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
    2a4e:	4d e0       	ldi	r20, 0x0D	; 13
    2a50:	be 01       	movw	r22, r28
    2a52:	6f 5f       	subi	r22, 0xFF	; 255
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	80 e9       	ldi	r24, 0x90	; 144
    2a58:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <MCP2515_ReadRxSequence>
    2a5c:	09 c0       	rjmp	.+18     	; 0x2a70 <CANSPI_Receive+0x48>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
    2a5e:	80 38       	cpi	r24, 0x80	; 128
    2a60:	39 f4       	brne	.+14     	; 0x2a70 <CANSPI_Receive+0x48>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
    2a62:	4d e0       	ldi	r20, 0x0D	; 13
    2a64:	be 01       	movw	r22, r28
    2a66:	6f 5f       	subi	r22, 0xFF	; 255
    2a68:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6a:	84 e9       	ldi	r24, 0x94	; 148
    2a6c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
    2a70:	8f 2d       	mov	r24, r15
    2a72:	88 71       	andi	r24, 0x18	; 24
    2a74:	80 31       	cpi	r24, 0x10	; 16
    2a76:	e1 f5       	brne	.+120    	; 0x2af0 <CANSPI_Receive+0xc8>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	f8 01       	movw	r30, r16
    2a7c:	80 83       	st	Z, r24
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
    2a7e:	2a 81       	ldd	r18, Y+2	; 0x02
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
  ConvertedID = (tempRXBn_SIDH << 3);
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	88 0f       	add	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	88 0f       	add	r24, r24
    2a8a:	99 1f       	adc	r25, r25
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	09 2e       	mov	r0, r25
    2a92:	00 0c       	add	r0, r0
    2a94:	aa 0b       	sbc	r26, r26
    2a96:	bb 0b       	sbc	r27, r27
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
    2a98:	32 2f       	mov	r19, r18
    2a9a:	32 95       	swap	r19
    2a9c:	36 95       	lsr	r19
    2a9e:	37 70       	andi	r19, 0x07	; 7
    2aa0:	83 0f       	add	r24, r19
    2aa2:	91 1d       	adc	r25, r1
    2aa4:	a1 1d       	adc	r26, r1
    2aa6:	b1 1d       	adc	r27, r1
  ConvertedID = (ConvertedID << 2);
    2aa8:	88 0f       	add	r24, r24
    2aaa:	99 1f       	adc	r25, r25
    2aac:	aa 1f       	adc	r26, r26
    2aae:	bb 1f       	adc	r27, r27
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	aa 1f       	adc	r26, r26
    2ab6:	bb 1f       	adc	r27, r27
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
    2ab8:	23 70       	andi	r18, 0x03	; 3
    2aba:	82 0f       	add	r24, r18
    2abc:	91 1d       	adc	r25, r1
    2abe:	a1 1d       	adc	r26, r1
    2ac0:	b1 1d       	adc	r27, r1
  ConvertedID = (ConvertedID << 8);
    2ac2:	ba 2f       	mov	r27, r26
    2ac4:	a9 2f       	mov	r26, r25
    2ac6:	98 2f       	mov	r25, r24
    2ac8:	88 27       	eor	r24, r24
  ConvertedID = ConvertedID + tempRXBn_EIDH;
    2aca:	2b 81       	ldd	r18, Y+3	; 0x03
    2acc:	82 0f       	add	r24, r18
    2ace:	91 1d       	adc	r25, r1
    2ad0:	a1 1d       	adc	r26, r1
    2ad2:	b1 1d       	adc	r27, r1
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
    2ad4:	ba 2f       	mov	r27, r26
    2ad6:	a9 2f       	mov	r26, r25
    2ad8:	98 2f       	mov	r25, r24
    2ada:	88 27       	eor	r24, r24
    2adc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ade:	82 0f       	add	r24, r18
    2ae0:	91 1d       	adc	r25, r1
    2ae2:	a1 1d       	adc	r26, r1
    2ae4:	b1 1d       	adc	r27, r1
    2ae6:	81 83       	std	Z+1, r24	; 0x01
    2ae8:	92 83       	std	Z+2, r25	; 0x02
    2aea:	a3 83       	std	Z+3, r26	; 0x03
    2aec:	b4 83       	std	Z+4, r27	; 0x04
    2aee:	1b c0       	rjmp	.+54     	; 0x2b26 <CANSPI_Receive+0xfe>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	f8 01       	movw	r30, r16
    2af4:	80 83       	st	Z, r24
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	90 e0       	ldi	r25, 0x00	; 0
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	09 2e       	mov	r0, r25
    2b08:	00 0c       	add	r0, r0
    2b0a:	aa 0b       	sbc	r26, r26
    2b0c:	bb 0b       	sbc	r27, r27
    2b0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b10:	22 95       	swap	r18
    2b12:	26 95       	lsr	r18
    2b14:	27 70       	andi	r18, 0x07	; 7
    2b16:	82 0f       	add	r24, r18
    2b18:	91 1d       	adc	r25, r1
    2b1a:	a1 1d       	adc	r26, r1
    2b1c:	b1 1d       	adc	r27, r1
    2b1e:	81 83       	std	Z+1, r24	; 0x01
    2b20:	92 83       	std	Z+2, r25	; 0x02
    2b22:	a3 83       	std	Z+3, r26	; 0x03
    2b24:	b4 83       	std	Z+4, r27	; 0x04
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
    2b26:	8d 81       	ldd	r24, Y+5	; 0x05
    2b28:	f8 01       	movw	r30, r16
    2b2a:	85 83       	std	Z+5, r24	; 0x05
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
    2b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b2e:	86 83       	std	Z+6, r24	; 0x06
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
    2b30:	8f 81       	ldd	r24, Y+7	; 0x07
    2b32:	87 83       	std	Z+7, r24	; 0x07
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
    2b34:	88 85       	ldd	r24, Y+8	; 0x08
    2b36:	80 87       	std	Z+8, r24	; 0x08
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
    2b38:	89 85       	ldd	r24, Y+9	; 0x09
    2b3a:	81 87       	std	Z+9, r24	; 0x09
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
    2b3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b3e:	82 87       	std	Z+10, r24	; 0x0a
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
    2b40:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b42:	83 87       	std	Z+11, r24	; 0x0b
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
    2b44:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b46:	84 87       	std	Z+12, r24	; 0x0c
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
    2b48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b4a:	85 87       	std	Z+13, r24	; 0x0d
    
    returnValue = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <CANSPI_Receive+0x12a>
}

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
  uint8_t returnValue = 0;
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    
    returnValue = 1;
  }
  
  return (returnValue);
}
    2b52:	2d 96       	adiw	r28, 0x0d	; 13
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	08 95       	ret

00002b64 <MCP2515_Initialize>:
	
	SPI_Tx(instruction);
	SPI_Tx(data);
	
	CAN_Unselect();
}
    2b64:	81 e0       	ldi	r24, 0x01	; 1
    2b66:	08 95       	ret

00002b68 <MCP2515_ReadByte>:
    2b68:	cf 93       	push	r28
    2b6a:	c8 2f       	mov	r28, r24
    2b6c:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2b76:	8c 2f       	mov	r24, r28
    2b78:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2b7c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <spicRxByte>
    2b80:	c8 2f       	mov	r28, r24
    2b82:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
    2b86:	8c 2f       	mov	r24, r28
    2b88:	cf 91       	pop	r28
    2b8a:	08 95       	ret

00002b8c <MCP2515_ReadRxSequence>:
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
    2b94:	d8 2f       	mov	r29, r24
    2b96:	8b 01       	movw	r16, r22
    2b98:	c4 2f       	mov	r28, r20
    2b9a:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
    2b9e:	8d 2f       	mov	r24, r29
    2ba0:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2ba4:	6c 2f       	mov	r22, r28
    2ba6:	70 e0       	ldi	r23, 0x00	; 0
    2ba8:	c8 01       	movw	r24, r16
    2baa:	0e 94 67 12 	call	0x24ce	; 0x24ce <spicRxBuff>
    2bae:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	08 95       	ret

00002bbc <MCP2515_WriteByte>:
    2bbc:	cf 93       	push	r28
    2bbe:	df 93       	push	r29
    2bc0:	d8 2f       	mov	r29, r24
    2bc2:	c6 2f       	mov	r28, r22
    2bc4:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
    2bc8:	82 e0       	ldi	r24, 0x02	; 2
    2bca:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2bce:	8d 2f       	mov	r24, r29
    2bd0:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2bd4:	8c 2f       	mov	r24, r28
    2bd6:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2bda:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	08 95       	ret

00002be4 <MCP2515_SetConfigMode>:
    2be4:	cf 93       	push	r28
    2be6:	60 e8       	ldi	r22, 0x80	; 128
    2be8:	8f e0       	ldi	r24, 0x0F	; 15
    2bea:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
    2bee:	ca e0       	ldi	r28, 0x0A	; 10
    2bf0:	8e e0       	ldi	r24, 0x0E	; 14
    2bf2:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <MCP2515_ReadByte>
    2bf6:	80 7e       	andi	r24, 0xE0	; 224
    2bf8:	80 38       	cpi	r24, 0x80	; 128
    2bfa:	21 f0       	breq	.+8      	; 0x2c04 <MCP2515_SetConfigMode+0x20>
    2bfc:	c1 50       	subi	r28, 0x01	; 1
    2bfe:	c1 f7       	brne	.-16     	; 0x2bf0 <MCP2515_SetConfigMode+0xc>
    2c00:	80 e0       	ldi	r24, 0x00	; 0
    2c02:	01 c0       	rjmp	.+2      	; 0x2c06 <MCP2515_SetConfigMode+0x22>
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	cf 91       	pop	r28
    2c08:	08 95       	ret

00002c0a <MCP2515_SetNormalMode>:
    2c0a:	cf 93       	push	r28
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	8f e0       	ldi	r24, 0x0F	; 15
    2c10:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <MCP2515_WriteByte>
    2c14:	ca e0       	ldi	r28, 0x0A	; 10
    2c16:	8e e0       	ldi	r24, 0x0E	; 14
    2c18:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <MCP2515_ReadByte>
    2c1c:	80 7e       	andi	r24, 0xE0	; 224
    2c1e:	21 f0       	breq	.+8      	; 0x2c28 <MCP2515_SetNormalMode+0x1e>
    2c20:	c1 50       	subi	r28, 0x01	; 1
    2c22:	c9 f7       	brne	.-14     	; 0x2c16 <MCP2515_SetNormalMode+0xc>
    2c24:	80 e0       	ldi	r24, 0x00	; 0
    2c26:	01 c0       	rjmp	.+2      	; 0x2c2a <MCP2515_SetNormalMode+0x20>
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	cf 91       	pop	r28
    2c2c:	08 95       	ret

00002c2e <MCP2515_WriteByteSequence>:
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	d8 2f       	mov	r29, r24
    2c38:	c6 2f       	mov	r28, r22
    2c3a:	8a 01       	movw	r16, r20
    2c3c:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2c46:	8d 2f       	mov	r24, r29
    2c48:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2c4c:	cf 5f       	subi	r28, 0xFF	; 255
    2c4e:	cd 1b       	sub	r28, r29
    2c50:	6c 2f       	mov	r22, r28
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	c8 01       	movw	r24, r16
    2c56:	0e 94 56 12 	call	0x24ac	; 0x24ac <spicTxBuff>
    2c5a:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	1f 91       	pop	r17
    2c64:	0f 91       	pop	r16
    2c66:	08 95       	ret

00002c68 <MCP2515_LoadTxSequence>:
    2c68:	ef 92       	push	r14
    2c6a:	ff 92       	push	r15
    2c6c:	0f 93       	push	r16
    2c6e:	1f 93       	push	r17
    2c70:	cf 93       	push	r28
    2c72:	df 93       	push	r29
    2c74:	d8 2f       	mov	r29, r24
    2c76:	7b 01       	movw	r14, r22
    2c78:	c4 2f       	mov	r28, r20
    2c7a:	89 01       	movw	r16, r18
    2c7c:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
    2c80:	8d 2f       	mov	r24, r29
    2c82:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2c86:	64 e0       	ldi	r22, 0x04	; 4
    2c88:	70 e0       	ldi	r23, 0x00	; 0
    2c8a:	c7 01       	movw	r24, r14
    2c8c:	0e 94 56 12 	call	0x24ac	; 0x24ac <spicTxBuff>
    2c90:	8c 2f       	mov	r24, r28
    2c92:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
    2c96:	6c 2f       	mov	r22, r28
    2c98:	70 e0       	ldi	r23, 0x00	; 0
    2c9a:	c8 01       	movw	r24, r16
    2c9c:	0e 94 56 12 	call	0x24ac	; 0x24ac <spicTxBuff>
    2ca0:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	ff 90       	pop	r15
    2cae:	ef 90       	pop	r14
    2cb0:	08 95       	ret

00002cb2 <MCP2515_RequestToSend>:

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
    2cb2:	cf 93       	push	r28
    2cb4:	c8 2f       	mov	r28, r24
	CAN_Select();
    2cb6:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
	spicTxByte(data);
    2cba:	8c 2f       	mov	r24, r28
    2cbc:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
{
	CAN_Select();
	
	SPI_Tx(instruction);
	
	CAN_Unselect();
    2cc0:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
}
    2cc4:	cf 91       	pop	r28
    2cc6:	08 95       	ret

00002cc8 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
    2cc8:	cf 93       	push	r28
	uint8_t retVal;
	
	CAN_Select();
    2cca:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
	spicTxByte(data);
    2cce:	80 ea       	ldi	r24, 0xA0	; 160
    2cd0:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
}

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
	return spicRxByte();
    2cd4:	0e 94 79 12 	call	0x24f2	; 0x24f2 <spicRxByte>
    2cd8:	c8 2f       	mov	r28, r24
	CAN_Select();
	
	SPI_Tx(MCP2515_READ_STATUS);
	retVal = SPI_Rx();
	
	CAN_Unselect();
    2cda:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
	
	return retVal;
}
    2cde:	8c 2f       	mov	r24, r28
    2ce0:	cf 91       	pop	r28
    2ce2:	08 95       	ret

00002ce4 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
    2ce4:	cf 93       	push	r28
	uint8_t retVal;
	
	CAN_Select();
    2ce6:	0e 94 8b 12 	call	0x2516	; 0x2516 <CAN_Select>
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
	spicTxByte(data);
    2cea:	80 eb       	ldi	r24, 0xB0	; 176
    2cec:	0e 94 83 12 	call	0x2506	; 0x2506 <spicTxByte>
}

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
	return spicRxByte();
    2cf0:	0e 94 79 12 	call	0x24f2	; 0x24f2 <spicRxByte>
    2cf4:	c8 2f       	mov	r28, r24
	CAN_Select();
	
	SPI_Tx(MCP2515_RX_STATUS);
	retVal = SPI_Rx();
	
	CAN_Unselect();
    2cf6:	0e 94 91 12 	call	0x2522	; 0x2522 <CAN_Unselect>
	
	return retVal;
}
    2cfa:	8c 2f       	mov	r24, r28
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <netInit>:
	.dns =  {8,8,8,8},								// DNS address (google dns)
	.gw   = {192, 168, 1, 1},						// Gateway address
.dhcp = NETINFO_STATIC};						//Static IP configuration


uint8_t netInit(void){
    2d00:	cf 93       	push	r28
    2d02:	df 93       	push	r29
	psuErr = 1;
    2d04:	81 e0       	ldi	r24, 0x01	; 1
    2d06:	80 93 c6 28 	sts	0x28C6, r24	; 0x8028c6 <__data_end>
	
	reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
    2d0a:	6d e9       	ldi	r22, 0x9D	; 157
    2d0c:	72 e1       	ldi	r23, 0x12	; 18
    2d0e:	87 e9       	ldi	r24, 0x97	; 151
    2d10:	92 e1       	ldi	r25, 0x12	; 18
    2d12:	0e 94 51 28 	call	0x50a2	; 0x50a2 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_Write_byte);
    2d16:	6c ea       	ldi	r22, 0xAC	; 172
    2d18:	72 e1       	ldi	r23, 0x12	; 18
    2d1a:	89 ea       	ldi	r24, 0xA9	; 169
    2d1c:	92 e1       	ldi	r25, 0x12	; 18
    2d1e:	0e 94 68 28 	call	0x50d0	; 0x50d0 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
    2d22:	66 ea       	ldi	r22, 0xA6	; 166
    2d24:	72 e1       	ldi	r23, 0x12	; 18
    2d26:	83 ea       	ldi	r24, 0xA3	; 163
    2d28:	92 e1       	ldi	r25, 0x12	; 18
    2d2a:	0e 94 88 28 	call	0x5110	; 0x5110 <reg_wizchip_spiburst_cbfunc>
	wizphy_reset();
    2d2e:	0e 94 8a 29 	call	0x5314	; 0x5314 <wizphy_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d32:	2f ef       	ldi	r18, 0xFF	; 255
    2d34:	83 ec       	ldi	r24, 0xC3	; 195
    2d36:	99 e0       	ldi	r25, 0x09	; 9
    2d38:	21 50       	subi	r18, 0x01	; 1
    2d3a:	80 40       	sbci	r24, 0x00	; 0
    2d3c:	90 40       	sbci	r25, 0x00	; 0
    2d3e:	e1 f7       	brne	.-8      	; 0x2d38 <netInit+0x38>
    2d40:	00 c0       	rjmp	.+0      	; 0x2d42 <netInit+0x42>
    2d42:	00 00       	nop
	_delay_ms(100);
	wizchip_init(rx_tx_buff_sizes,rx_tx_buff_sizes);
    2d44:	6e e6       	ldi	r22, 0x6E	; 110
    2d46:	70 e2       	ldi	r23, 0x20	; 32
    2d48:	cb 01       	movw	r24, r22
    2d4a:	0e 94 18 29 	call	0x5230	; 0x5230 <wizchip_init>
	//netInfo.ip[3] = 90+GetIpSwitch();
	wizchip_setnetinfo(&netInfo);
    2d4e:	8d e2       	ldi	r24, 0x2D	; 45
    2d50:	90 e2       	ldi	r25, 0x20	; 32
    2d52:	0e 94 a7 29 	call	0x534e	; 0x534e <wizchip_setnetinfo>
	ctlnetwork(CN_SET_NETINFO, (void*) &netInfo);
    2d56:	6d e2       	ldi	r22, 0x2D	; 45
    2d58:	70 e2       	ldi	r23, 0x20	; 32
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	0e 94 7c 2a 	call	0x54f8	; 0x54f8 <ctlnetwork>
	
	
	setIMR(0xff);
    2d60:	4f ef       	ldi	r20, 0xFF	; 255
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	76 e1       	ldi	r23, 0x16	; 22
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
	setSIMR(0xff);
    2d6e:	4f ef       	ldi	r20, 0xFF	; 255
    2d70:	60 e0       	ldi	r22, 0x00	; 0
    2d72:	78 e1       	ldi	r23, 0x18	; 24
    2d74:	80 e0       	ldi	r24, 0x00	; 0
    2d76:	90 e0       	ldi	r25, 0x00	; 0
    2d78:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
	setINTLEVEL(1);
    2d7c:	40 e0       	ldi	r20, 0x00	; 0
    2d7e:	60 e0       	ldi	r22, 0x00	; 0
    2d80:	73 e1       	ldi	r23, 0x13	; 19
    2d82:	80 e0       	ldi	r24, 0x00	; 0
    2d84:	90 e0       	ldi	r25, 0x00	; 0
    2d86:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    2d8a:	41 e0       	ldi	r20, 0x01	; 1
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	74 e1       	ldi	r23, 0x14	; 20
    2d90:	80 e0       	ldi	r24, 0x00	; 0
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    2d98:	c1 e0       	ldi	r28, 0x01	; 1
    2d9a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
		//setINTLEVEL(500);
		//setSn_IMR(HTTP_SOCKET, 0x04);
		setSn_IMR(HTTP_SOCKET, 0x04);
    2d9c:	be 01       	movw	r22, r28
    2d9e:	66 0f       	add	r22, r22
    2da0:	77 1f       	adc	r23, r23
    2da2:	66 0f       	add	r22, r22
    2da4:	77 1f       	adc	r23, r23
    2da6:	66 0f       	add	r22, r22
    2da8:	77 1f       	adc	r23, r23
    2daa:	74 5d       	subi	r23, 0xD4	; 212
    2dac:	07 2e       	mov	r0, r23
    2dae:	00 0c       	add	r0, r0
    2db0:	88 0b       	sbc	r24, r24
    2db2:	99 0b       	sbc	r25, r25
    2db4:	44 e0       	ldi	r20, 0x04	; 4
    2db6:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    2dba:	24 96       	adiw	r28, 0x04	; 4
	
	
	setIMR(0xff);
	setSIMR(0xff);
	setINTLEVEL(1);
	for(uint8_t HTTP_SOCKET = 0; HTTP_SOCKET <= 7; HTTP_SOCKET++){
    2dbc:	c1 32       	cpi	r28, 0x21	; 33
    2dbe:	d1 05       	cpc	r29, r1
    2dc0:	69 f7       	brne	.-38     	; 0x2d9c <netInit+0x9c>
		//setSn_IMR(HTTP_SOCKET, 0x04);
		setSn_IMR(HTTP_SOCKET, 0x04);
		//setSn_IR(HTTP_SOCKET, 0x1F);
	}
	return 1;
}
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	08 95       	ret

00002dca <netHandler>:

void netHandler(void){
    2dca:	2f 92       	push	r2
    2dcc:	3f 92       	push	r3
    2dce:	4f 92       	push	r4
    2dd0:	5f 92       	push	r5
    2dd2:	6f 92       	push	r6
    2dd4:	7f 92       	push	r7
    2dd6:	8f 92       	push	r8
    2dd8:	9f 92       	push	r9
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	c3 52       	subi	r28, 0x23	; 35
    2df4:	d8 40       	sbci	r29, 0x08	; 8
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	de bf       	out	0x3e, r29	; 62
	if(getSn_SR(UdpRxSockNum) == SOCK_CLOSED){
    2dfa:	60 91 55 20 	lds	r22, 0x2055	; 0x802055 <UdpRxSockNum>
    2dfe:	20 e2       	ldi	r18, 0x20	; 32
    2e00:	62 9f       	mul	r22, r18
    2e02:	b0 01       	movw	r22, r0
    2e04:	11 24       	eor	r1, r1
    2e06:	68 5f       	subi	r22, 0xF8	; 248
    2e08:	7c 4f       	sbci	r23, 0xFC	; 252
    2e0a:	07 2e       	mov	r0, r23
    2e0c:	00 0c       	add	r0, r0
    2e0e:	88 0b       	sbc	r24, r24
    2e10:	99 0b       	sbc	r25, r25
    2e12:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    2e16:	81 11       	cpse	r24, r1
    2e18:	0e c0       	rjmp	.+28     	; 0x2e36 <netHandler+0x6c>
		socket(UdpRxSockNum, Sn_MR_UDP, UdpRxPort, SF_MULTI_ENABLE);
    2e1a:	40 91 56 20 	lds	r20, 0x2056	; 0x802056 <UdpRxPort>
    2e1e:	50 91 57 20 	lds	r21, 0x2057	; 0x802057 <UdpRxPort+0x1>
    2e22:	20 e8       	ldi	r18, 0x80	; 128
    2e24:	62 e0       	ldi	r22, 0x02	; 2
    2e26:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <UdpRxSockNum>
    2e2a:	0e 94 bd 1b 	call	0x377a	; 0x377a <socket>
		listen(UdpRxSockNum);
    2e2e:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <UdpRxSockNum>
    2e32:	0e 94 c6 1c 	call	0x398c	; 0x398c <listen>
	}
	
	if(getSn_IR(UdpRxSockNum)){ // & Sn_CR_RECV
    2e36:	60 91 55 20 	lds	r22, 0x2055	; 0x802055 <UdpRxSockNum>
    2e3a:	30 e2       	ldi	r19, 0x20	; 32
    2e3c:	63 9f       	mul	r22, r19
    2e3e:	b0 01       	movw	r22, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	68 5f       	subi	r22, 0xF8	; 248
    2e44:	7d 4f       	sbci	r23, 0xFD	; 253
    2e46:	07 2e       	mov	r0, r23
    2e48:	00 0c       	add	r0, r0
    2e4a:	88 0b       	sbc	r24, r24
    2e4c:	99 0b       	sbc	r25, r25
    2e4e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    2e52:	8f 71       	andi	r24, 0x1F	; 31
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <netHandler+0x8e>
    2e56:	d3 c3       	rjmp	.+1958   	; 0x35fe <netHandler+0x834>
		uint16_t udp_size = getSn_RX_RSR(UdpRxSockNum);
    2e58:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <UdpRxSockNum>
    2e5c:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <getSn_RX_RSR>
		if (udp_size > 0) {
    2e60:	00 97       	sbiw	r24, 0x00	; 0
    2e62:	09 f4       	brne	.+2      	; 0x2e66 <netHandler+0x9c>
    2e64:	cc c3       	rjmp	.+1944   	; 0x35fe <netHandler+0x834>
			uint8_t ip[4];
			uint16_t port;
			if (udp_size > DATA_BUFF_SIZE) udp_size = DATA_BUFF_SIZE;
			memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	38 e0       	ldi	r19, 0x08	; 8
    2e6a:	ee e7       	ldi	r30, 0x7E	; 126
    2e6c:	f9 e2       	ldi	r31, 0x29	; 41
    2e6e:	df 01       	movw	r26, r30
    2e70:	a9 01       	movw	r20, r18
    2e72:	1d 92       	st	X+, r1
    2e74:	41 50       	subi	r20, 0x01	; 1
    2e76:	50 40       	sbci	r21, 0x00	; 0
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <netHandler+0xa8>
			uint16_t ret = recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
    2e7a:	ac 01       	movw	r20, r24
    2e7c:	41 30       	cpi	r20, 0x01	; 1
    2e7e:	88 e0       	ldi	r24, 0x08	; 8
    2e80:	58 07       	cpc	r21, r24
    2e82:	10 f0       	brcs	.+4      	; 0x2e88 <netHandler+0xbe>
    2e84:	40 e0       	ldi	r20, 0x00	; 0
    2e86:	58 e0       	ldi	r21, 0x08	; 8
    2e88:	8e 01       	movw	r16, r28
    2e8a:	01 5f       	subi	r16, 0xF1	; 241
    2e8c:	17 4f       	sbci	r17, 0xF7	; 247
    2e8e:	9e 01       	movw	r18, r28
    2e90:	25 5f       	subi	r18, 0xF5	; 245
    2e92:	37 4f       	sbci	r19, 0xF7	; 247
    2e94:	6e e7       	ldi	r22, 0x7E	; 126
    2e96:	79 e2       	ldi	r23, 0x29	; 41
    2e98:	80 91 55 20 	lds	r24, 0x2055	; 0x802055 <UdpRxSockNum>
    2e9c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <recvfrom>
			// UDP Datagram - TCP_RX_BUF
			uint8_t okFlg = 0;
			char state[4];
			if (sscanf(TCP_RX_BUF, "OUTP:STAT %3s", state) == 1) {
    2ea0:	ce 01       	movw	r24, r28
    2ea2:	8f 5f       	subi	r24, 0xFF	; 255
    2ea4:	97 4f       	sbci	r25, 0xF7	; 247
    2ea6:	9f 93       	push	r25
    2ea8:	8f 93       	push	r24
    2eaa:	8b ea       	ldi	r24, 0xAB	; 171
    2eac:	90 e2       	ldi	r25, 0x20	; 32
    2eae:	9f 93       	push	r25
    2eb0:	8f 93       	push	r24
    2eb2:	8e e7       	ldi	r24, 0x7E	; 126
    2eb4:	99 e2       	ldi	r25, 0x29	; 41
    2eb6:	9f 93       	push	r25
    2eb8:	8f 93       	push	r24
    2eba:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <sscanf>
    2ebe:	0f 90       	pop	r0
    2ec0:	0f 90       	pop	r0
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	61 f5       	brne	.+88     	; 0x2f26 <netHandler+0x15c>
				if (strcasecmp(state, "OFF") == 0) {
    2ece:	69 eb       	ldi	r22, 0xB9	; 185
    2ed0:	70 e2       	ldi	r23, 0x20	; 32
    2ed2:	ce 01       	movw	r24, r28
    2ed4:	8f 5f       	subi	r24, 0xFF	; 255
    2ed6:	97 4f       	sbci	r25, 0xF7	; 247
    2ed8:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strcasecmp>
    2edc:	89 2b       	or	r24, r25
    2ede:	69 f4       	brne	.+26     	; 0x2efa <netHandler+0x130>
					printf("Output is OFF\r\n");
    2ee0:	8d eb       	ldi	r24, 0xBD	; 189
    2ee2:	90 e2       	ldi	r25, 0x20	; 32
    2ee4:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <puts>
					sprintf(UdpAnsver, "ok");
    2ee8:	e8 ec       	ldi	r30, 0xC8	; 200
    2eea:	f8 e2       	ldi	r31, 0x28	; 40
    2eec:	8f e6       	ldi	r24, 0x6F	; 111
    2eee:	9b e6       	ldi	r25, 0x6B	; 107
    2ef0:	80 83       	st	Z, r24
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	12 82       	std	Z+2, r1	; 0x02
					okFlg = 1;
    2ef6:	11 e0       	ldi	r17, 0x01	; 1
    2ef8:	19 c0       	rjmp	.+50     	; 0x2f2c <netHandler+0x162>
					} else if (strcasecmp(state, "ON") == 0) {
    2efa:	6c ec       	ldi	r22, 0xCC	; 204
    2efc:	70 e2       	ldi	r23, 0x20	; 32
    2efe:	ce 01       	movw	r24, r28
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	97 4f       	sbci	r25, 0xF7	; 247
    2f04:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strcasecmp>
    2f08:	89 2b       	or	r24, r25
    2f0a:	79 f4       	brne	.+30     	; 0x2f2a <netHandler+0x160>
					printf("Output is ON\r\n");
    2f0c:	8f ec       	ldi	r24, 0xCF	; 207
    2f0e:	90 e2       	ldi	r25, 0x20	; 32
    2f10:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <puts>
					sprintf(UdpAnsver, "ok");
    2f14:	e8 ec       	ldi	r30, 0xC8	; 200
    2f16:	f8 e2       	ldi	r31, 0x28	; 40
    2f18:	8f e6       	ldi	r24, 0x6F	; 111
    2f1a:	9b e6       	ldi	r25, 0x6B	; 107
    2f1c:	80 83       	st	Z, r24
    2f1e:	91 83       	std	Z+1, r25	; 0x01
    2f20:	12 82       	std	Z+2, r1	; 0x02
					okFlg = 1;
    2f22:	11 e0       	ldi	r17, 0x01	; 1
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <netHandler+0x162>
			uint16_t port;
			if (udp_size > DATA_BUFF_SIZE) udp_size = DATA_BUFF_SIZE;
			memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
			uint16_t ret = recvfrom(UdpRxSockNum, (uint8_t*)TCP_RX_BUF, udp_size, ip, &port);
			// UDP Datagram - TCP_RX_BUF
			uint8_t okFlg = 0;
    2f26:	10 e0       	ldi	r17, 0x00	; 0
    2f28:	01 c0       	rjmp	.+2      	; 0x2f2c <netHandler+0x162>
    2f2a:	10 e0       	ldi	r17, 0x00	; 0
				}
				
			}
			
			char command[10];
			if (sscanf(TCP_RX_BUF, "MEAS:%[^?]", command) == 1) {
    2f2c:	ce 01       	movw	r24, r28
    2f2e:	01 96       	adiw	r24, 0x01	; 1
    2f30:	9f 93       	push	r25
    2f32:	8f 93       	push	r24
    2f34:	8d ed       	ldi	r24, 0xDD	; 221
    2f36:	90 e2       	ldi	r25, 0x20	; 32
    2f38:	9f 93       	push	r25
    2f3a:	8f 93       	push	r24
    2f3c:	8e e7       	ldi	r24, 0x7E	; 126
    2f3e:	99 e2       	ldi	r25, 0x29	; 41
    2f40:	9f 93       	push	r25
    2f42:	8f 93       	push	r24
    2f44:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <sscanf>
    2f48:	0f 90       	pop	r0
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	61 f5       	brne	.+88     	; 0x2fb0 <netHandler+0x1e6>
				if (strcasecmp(command, "VOLT") == 0) {
    2f58:	68 ee       	ldi	r22, 0xE8	; 232
    2f5a:	70 e2       	ldi	r23, 0x20	; 32
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strcasecmp>
    2f64:	89 2b       	or	r24, r25
    2f66:	71 f4       	brne	.+28     	; 0x2f84 <netHandler+0x1ba>
					printf("Measure Voltage command\r\n");
    2f68:	8d ee       	ldi	r24, 0xED	; 237
    2f6a:	90 e2       	ldi	r25, 0x20	; 32
    2f6c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <puts>
					sprintf(UdpAnsver, "48.031");
    2f70:	87 e0       	ldi	r24, 0x07	; 7
    2f72:	e6 e0       	ldi	r30, 0x06	; 6
    2f74:	f1 e2       	ldi	r31, 0x21	; 33
    2f76:	a8 ec       	ldi	r26, 0xC8	; 200
    2f78:	b8 e2       	ldi	r27, 0x28	; 40
    2f7a:	01 90       	ld	r0, Z+
    2f7c:	0d 92       	st	X+, r0
    2f7e:	8a 95       	dec	r24
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <netHandler+0x1b0>
    2f82:	33 c3       	rjmp	.+1638   	; 0x35ea <netHandler+0x820>
					okFlg = 1;
					} else if (strcasecmp(command, "CURR") == 0) {
    2f84:	6d e0       	ldi	r22, 0x0D	; 13
    2f86:	71 e2       	ldi	r23, 0x21	; 33
    2f88:	ce 01       	movw	r24, r28
    2f8a:	01 96       	adiw	r24, 0x01	; 1
    2f8c:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strcasecmp>
    2f90:	89 2b       	or	r24, r25
    2f92:	71 f4       	brne	.+28     	; 0x2fb0 <netHandler+0x1e6>
					printf("Measure Current command\r\n");
    2f94:	82 e1       	ldi	r24, 0x12	; 18
    2f96:	91 e2       	ldi	r25, 0x21	; 33
    2f98:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <puts>
					sprintf(UdpAnsver, "0.121");
    2f9c:	86 e0       	ldi	r24, 0x06	; 6
    2f9e:	eb e2       	ldi	r30, 0x2B	; 43
    2fa0:	f1 e2       	ldi	r31, 0x21	; 33
    2fa2:	a8 ec       	ldi	r26, 0xC8	; 200
    2fa4:	b8 e2       	ldi	r27, 0x28	; 40
    2fa6:	01 90       	ld	r0, Z+
    2fa8:	0d 92       	st	X+, r0
    2faa:	8a 95       	dec	r24
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <netHandler+0x1dc>
    2fae:	1d c3       	rjmp	.+1594   	; 0x35ea <netHandler+0x820>
				
			}
			
			
			
			if(strcasecmp(TCP_RX_BUF, "*RST") == 0){
    2fb0:	61 e3       	ldi	r22, 0x31	; 49
    2fb2:	71 e2       	ldi	r23, 0x21	; 33
    2fb4:	8e e7       	ldi	r24, 0x7E	; 126
    2fb6:	99 e2       	ldi	r25, 0x29	; 41
    2fb8:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strcasecmp>
    2fbc:	89 2b       	or	r24, r25
    2fbe:	41 f4       	brne	.+16     	; 0x2fd0 <netHandler+0x206>
				sprintf(UdpAnsver, "ok");
    2fc0:	e8 ec       	ldi	r30, 0xC8	; 200
    2fc2:	f8 e2       	ldi	r31, 0x28	; 40
    2fc4:	8f e6       	ldi	r24, 0x6F	; 111
    2fc6:	9b e6       	ldi	r25, 0x6B	; 107
    2fc8:	80 83       	st	Z, r24
    2fca:	91 83       	std	Z+1, r25	; 0x01
    2fcc:	12 82       	std	Z+2, r1	; 0x02
    2fce:	0c c0       	rjmp	.+24     	; 0x2fe8 <netHandler+0x21e>
				}else{
				if(okFlg == 0){
    2fd0:	11 11       	cpse	r17, r1
    2fd2:	0a c0       	rjmp	.+20     	; 0x2fe8 <netHandler+0x21e>
					sprintf(UdpAnsver, "err");
    2fd4:	e8 ec       	ldi	r30, 0xC8	; 200
    2fd6:	f8 e2       	ldi	r31, 0x28	; 40
    2fd8:	85 e6       	ldi	r24, 0x65	; 101
    2fda:	92 e7       	ldi	r25, 0x72	; 114
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	82 e7       	ldi	r24, 0x72	; 114
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	82 83       	std	Z+2, r24	; 0x02
    2fe6:	93 83       	std	Z+3, r25	; 0x03
				}
			}
			result = socket(UdpTxSockNum, Sn_MR_UDP, UdpTxPort, SF_IO_NONBLOCK);
    2fe8:	40 91 58 20 	lds	r20, 0x2058	; 0x802058 <UdpTxPort>
    2fec:	50 91 59 20 	lds	r21, 0x2059	; 0x802059 <UdpTxPort+0x1>
    2ff0:	21 e0       	ldi	r18, 0x01	; 1
    2ff2:	62 e0       	ldi	r22, 0x02	; 2
    2ff4:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <UdpTxSockNum>
    2ff8:	0e 94 bd 1b 	call	0x377a	; 0x377a <socket>
    2ffc:	80 93 7e 31 	sts	0x317E, r24	; 0x80317e <result>
			result = sendto(UdpTxSockNum, (uint8_t*)UdpAnsver, strlen(UdpAnsver), UdpDestAddress, UdpTxPort);
    3000:	e8 ec       	ldi	r30, 0xC8	; 200
    3002:	f8 e2       	ldi	r31, 0x28	; 40
    3004:	01 90       	ld	r0, Z+
    3006:	00 20       	and	r0, r0
    3008:	e9 f7       	brne	.-6      	; 0x3004 <netHandler+0x23a>
    300a:	31 97       	sbiw	r30, 0x01	; 1
    300c:	af 01       	movw	r20, r30
    300e:	48 5c       	subi	r20, 0xC8	; 200
    3010:	58 42       	sbci	r21, 0x28	; 40
    3012:	00 91 58 20 	lds	r16, 0x2058	; 0x802058 <UdpTxPort>
    3016:	10 91 59 20 	lds	r17, 0x2059	; 0x802059 <UdpTxPort+0x1>
    301a:	2a e5       	ldi	r18, 0x5A	; 90
    301c:	30 e2       	ldi	r19, 0x20	; 32
    301e:	68 ec       	ldi	r22, 0xC8	; 200
    3020:	78 e2       	ldi	r23, 0x28	; 40
    3022:	80 91 48 29 	lds	r24, 0x2948	; 0x802948 <UdpTxSockNum>
    3026:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <sendto>
    302a:	60 93 7e 31 	sts	0x317E, r22	; 0x80317e <result>
    302e:	e7 c2       	rjmp	.+1486   	; 0x35fe <netHandler+0x834>
    3030:	c7 5e       	subi	r28, 0xE7	; 231
    3032:	d7 4f       	sbci	r29, 0xF7	; 247
    3034:	28 82       	st	Y, r2
    3036:	c9 51       	subi	r28, 0x19	; 25
    3038:	d8 40       	sbci	r29, 0x08	; 8
			//setSn_IR(UdpRxSockNum, 0x1F);
		}
	}
	
	for (uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
		if (getSn_SR(HTTP_SOCKET) == SOCK_ESTABLISHED) {
    303a:	54 01       	movw	r10, r8
    303c:	aa 0c       	add	r10, r10
    303e:	bb 1c       	adc	r11, r11
    3040:	aa 0c       	add	r10, r10
    3042:	bb 1c       	adc	r11, r11
    3044:	aa 0c       	add	r10, r10
    3046:	bb 1c       	adc	r11, r11
    3048:	25 01       	movw	r4, r10
    304a:	9d ef       	ldi	r25, 0xFD	; 253
    304c:	59 1a       	sub	r5, r25
    304e:	05 2c       	mov	r0, r5
    3050:	00 0c       	add	r0, r0
    3052:	66 08       	sbc	r6, r6
    3054:	77 08       	sbc	r7, r7
    3056:	c3 01       	movw	r24, r6
    3058:	b2 01       	movw	r22, r4
    305a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    305e:	87 31       	cpi	r24, 0x17	; 23
    3060:	09 f0       	breq	.+2      	; 0x3064 <netHandler+0x29a>
    3062:	99 c2       	rjmp	.+1330   	; 0x3596 <netHandler+0x7cc>
			uint8_t rIP[4];
			getsockopt(HTTP_SOCKET, SO_DESTIP, rIP);
    3064:	ae 01       	movw	r20, r28
    3066:	45 5f       	subi	r20, 0xF5	; 245
    3068:	57 4f       	sbci	r21, 0xF7	; 247
    306a:	64 e0       	ldi	r22, 0x04	; 4
    306c:	82 2d       	mov	r24, r2
    306e:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <getsockopt>

			uint16_t res_size = getSn_RX_RSR(HTTP_SOCKET);
    3072:	82 2d       	mov	r24, r2
    3074:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <getSn_RX_RSR>
    3078:	8c 01       	movw	r16, r24
			if (res_size > 0) {
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	09 f4       	brne	.+2      	; 0x3080 <netHandler+0x2b6>
    307e:	8b c2       	rjmp	.+1302   	; 0x3596 <netHandler+0x7cc>
			
				printf("Read bytes: %d, SOCK: %d \r\n", res_size, HTTP_SOCKET);
    3080:	3f 92       	push	r3
    3082:	2f 92       	push	r2
    3084:	1f 93       	push	r17
    3086:	8f 93       	push	r24
    3088:	a6 e3       	ldi	r26, 0x36	; 54
    308a:	b1 e2       	ldi	r27, 0x21	; 33
    308c:	bf 93       	push	r27
    308e:	af 93       	push	r26
    3090:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <printf>
				if (res_size > sizeof(TCP_RX_BUF)) {
					res_size = sizeof(TCP_RX_BUF);
				}
				
				
				memset(TCP_RX_BUF, 0, sizeof(TCP_RX_BUF));
    3094:	ae e7       	ldi	r26, 0x7E	; 126
    3096:	b9 e2       	ldi	r27, 0x29	; 41
    3098:	e0 e0       	ldi	r30, 0x00	; 0
    309a:	f8 e0       	ldi	r31, 0x08	; 8
    309c:	1d 92       	st	X+, r1
    309e:	31 97       	sbiw	r30, 0x01	; 1
    30a0:	e9 f7       	brne	.-6      	; 0x309c <netHandler+0x2d2>
				recv(HTTP_SOCKET, (uint8_t *)TCP_RX_BUF, res_size);
    30a2:	a8 01       	movw	r20, r16
    30a4:	01 30       	cpi	r16, 0x01	; 1
    30a6:	18 40       	sbci	r17, 0x08	; 8
    30a8:	10 f0       	brcs	.+4      	; 0x30ae <netHandler+0x2e4>
    30aa:	40 e0       	ldi	r20, 0x00	; 0
    30ac:	58 e0       	ldi	r21, 0x08	; 8
    30ae:	6e e7       	ldi	r22, 0x7E	; 126
    30b0:	79 e2       	ldi	r23, 0x29	; 41
    30b2:	c7 5e       	subi	r28, 0xE7	; 231
    30b4:	d7 4f       	sbci	r29, 0xF7	; 247
    30b6:	88 81       	ld	r24, Y
    30b8:	c9 51       	subi	r28, 0x19	; 25
    30ba:	d8 40       	sbci	r29, 0x08	; 8
    30bc:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <recv>


				
				if (strstr((char *)TCP_RX_BUF, "GET / ") != NULL) {
    30c0:	62 e5       	ldi	r22, 0x52	; 82
    30c2:	71 e2       	ldi	r23, 0x21	; 33
    30c4:	8e e7       	ldi	r24, 0x7E	; 126
    30c6:	99 e2       	ldi	r25, 0x29	; 41
    30c8:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strstr>
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	0f 90       	pop	r0
    30d8:	89 2b       	or	r24, r25
    30da:	09 f4       	brne	.+2      	; 0x30de <netHandler+0x314>
    30dc:	ad c0       	rjmp	.+346    	; 0x3238 <netHandler+0x46e>
					 size_t total_length = strlen_P(psu_page); 
					 size_t sent_length = 0;
					 uint8_t buffer[2048];

					 printf("index.html send\r\n");
    30de:	89 e5       	ldi	r24, 0x59	; 89
    30e0:	91 e2       	ldi	r25, 0x21	; 33
    30e2:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <puts>


				
				if (strstr((char *)TCP_RX_BUF, "GET / ") != NULL) {
					 size_t total_length = strlen_P(psu_page); 
					 size_t sent_length = 0;
    30e6:	c6 5e       	subi	r28, 0xE6	; 230
    30e8:	d7 4f       	sbci	r29, 0xF7	; 247
    30ea:	18 82       	st	Y, r1
    30ec:	19 82       	std	Y+1, r1	; 0x01
    30ee:	ca 51       	subi	r28, 0x1A	; 26
    30f0:	d8 40       	sbci	r29, 0x08	; 8
						 size_t chunk_size = (total_length - sent_length > sizeof(buffer)) ? sizeof(buffer) : total_length - sent_length;
						 for (size_t i = 0; i < chunk_size; i++) {
							 buffer[i] = pgm_read_byte(&psu_page[sent_length + i]);
						 }
						 send(HTTP_SOCKET, buffer, chunk_size);
						 while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    30f2:	c5 01       	movw	r24, r10
    30f4:	91 5e       	subi	r25, 0xE1	; 225
    30f6:	9c 01       	movw	r18, r24
    30f8:	99 0f       	add	r25, r25
    30fa:	44 0b       	sbc	r20, r20
    30fc:	55 0b       	sbc	r21, r21
    30fe:	cb 5e       	subi	r28, 0xEB	; 235
    3100:	d7 4f       	sbci	r29, 0xF7	; 247
    3102:	28 83       	st	Y, r18
    3104:	39 83       	std	Y+1, r19	; 0x01
    3106:	4a 83       	std	Y+2, r20	; 0x02
    3108:	5b 83       	std	Y+3, r21	; 0x03
    310a:	c5 51       	subi	r28, 0x15	; 21
    310c:	d8 40       	sbci	r29, 0x08	; 8
    310e:	c2 5e       	subi	r28, 0xE2	; 226
    3110:	d7 4f       	sbci	r29, 0xF7	; 247
    3112:	a8 82       	st	Y, r10
    3114:	b9 82       	std	Y+1, r11	; 0x01
    3116:	ce 51       	subi	r28, 0x1E	; 30
    3118:	d8 40       	sbci	r29, 0x08	; 8
    311a:	c0 5e       	subi	r28, 0xE0	; 224
    311c:	d7 4f       	sbci	r29, 0xF7	; 247
    311e:	88 82       	st	Y, r8
    3120:	99 82       	std	Y+1, r9	; 0x01
    3122:	c0 52       	subi	r28, 0x20	; 32
    3124:	d8 40       	sbci	r29, 0x08	; 8
    3126:	ce 5d       	subi	r28, 0xDE	; 222
    3128:	d7 4f       	sbci	r29, 0xF7	; 247
    312a:	e8 82       	st	Y, r14
    312c:	f9 82       	std	Y+1, r15	; 0x01
    312e:	c2 52       	subi	r28, 0x22	; 34
    3130:	d8 40       	sbci	r29, 0x08	; 8
    3132:	c7 5e       	subi	r28, 0xE7	; 231
    3134:	d7 4f       	sbci	r29, 0xF7	; 247
    3136:	f8 80       	ld	r15, Y
    3138:	c9 51       	subi	r28, 0x19	; 25
    313a:	d8 40       	sbci	r29, 0x08	; 8
    313c:	c4 5e       	subi	r28, 0xE4	; 228
    313e:	d7 4f       	sbci	r29, 0xF7	; 247
    3140:	b8 80       	ld	r11, Y
    3142:	cc 51       	subi	r28, 0x1C	; 28
    3144:	d8 40       	sbci	r29, 0x08	; 8
    3146:	c3 5e       	subi	r28, 0xE3	; 227
    3148:	d7 4f       	sbci	r29, 0xF7	; 247
    314a:	98 80       	ld	r9, Y
    314c:	cd 51       	subi	r28, 0x1D	; 29
    314e:	d8 40       	sbci	r29, 0x08	; 8
					 uint8_t buffer[2048];

					 printf("index.html send\r\n");
					 
					 while (sent_length < total_length) {
						 size_t chunk_size = (total_length - sent_length > sizeof(buffer)) ? sizeof(buffer) : total_length - sent_length;
    3150:	0f 2e       	mov	r0, r31
    3152:	ff ea       	ldi	r31, 0xAF	; 175
    3154:	cf 2e       	mov	r12, r31
    3156:	fd e1       	ldi	r31, 0x1D	; 29
    3158:	df 2e       	mov	r13, r31
    315a:	f0 2d       	mov	r31, r0
    315c:	c6 5e       	subi	r28, 0xE6	; 230
    315e:	d7 4f       	sbci	r29, 0xF7	; 247
    3160:	48 81       	ld	r20, Y
    3162:	59 81       	ldd	r21, Y+1	; 0x01
    3164:	ca 51       	subi	r28, 0x1A	; 26
    3166:	d8 40       	sbci	r29, 0x08	; 8
    3168:	c4 1a       	sub	r12, r20
    316a:	d5 0a       	sbc	r13, r21
    316c:	51 e0       	ldi	r21, 0x01	; 1
    316e:	c5 16       	cp	r12, r21
    3170:	58 e0       	ldi	r21, 0x08	; 8
    3172:	d5 06       	cpc	r13, r21
    3174:	10 f0       	brcs	.+4      	; 0x317a <netHandler+0x3b0>
    3176:	cb 2c       	mov	r12, r11
    3178:	d9 2c       	mov	r13, r9
						 for (size_t i = 0; i < chunk_size; i++) {
    317a:	c1 14       	cp	r12, r1
    317c:	d1 04       	cpc	r13, r1
    317e:	99 f0       	breq	.+38     	; 0x31a6 <netHandler+0x3dc>
    3180:	c6 5e       	subi	r28, 0xE6	; 230
    3182:	d7 4f       	sbci	r29, 0xF7	; 247
    3184:	e8 81       	ld	r30, Y
    3186:	f9 81       	ldd	r31, Y+1	; 0x01
    3188:	ca 51       	subi	r28, 0x1A	; 26
    318a:	d8 40       	sbci	r29, 0x08	; 8
    318c:	e6 56       	subi	r30, 0x66	; 102
    318e:	fd 4f       	sbci	r31, 0xFD	; 253
    3190:	de 01       	movw	r26, r28
    3192:	11 96       	adiw	r26, 0x01	; 1
    3194:	9d 01       	movw	r18, r26
    3196:	2c 0d       	add	r18, r12
    3198:	3d 1d       	adc	r19, r13
							 buffer[i] = pgm_read_byte(&psu_page[sent_length + i]);
    319a:	84 91       	lpm	r24, Z
    319c:	8d 93       	st	X+, r24
    319e:	31 96       	adiw	r30, 0x01	; 1

					 printf("index.html send\r\n");
					 
					 while (sent_length < total_length) {
						 size_t chunk_size = (total_length - sent_length > sizeof(buffer)) ? sizeof(buffer) : total_length - sent_length;
						 for (size_t i = 0; i < chunk_size; i++) {
    31a0:	a2 17       	cp	r26, r18
    31a2:	b3 07       	cpc	r27, r19
    31a4:	d1 f7       	brne	.-12     	; 0x319a <netHandler+0x3d0>
							 buffer[i] = pgm_read_byte(&psu_page[sent_length + i]);
						 }
						 send(HTTP_SOCKET, buffer, chunk_size);
    31a6:	a6 01       	movw	r20, r12
    31a8:	be 01       	movw	r22, r28
    31aa:	6f 5f       	subi	r22, 0xFF	; 255
    31ac:	7f 4f       	sbci	r23, 0xFF	; 255
    31ae:	8f 2d       	mov	r24, r15
    31b0:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <send>
						 while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    31b4:	06 c0       	rjmp	.+12     	; 0x31c2 <netHandler+0x3f8>
    31b6:	8f e3       	ldi	r24, 0x3F	; 63
    31b8:	9f e1       	ldi	r25, 0x1F	; 31
    31ba:	01 97       	sbiw	r24, 0x01	; 1
    31bc:	f1 f7       	brne	.-4      	; 0x31ba <netHandler+0x3f0>
    31be:	00 c0       	rjmp	.+0      	; 0x31c0 <netHandler+0x3f6>
    31c0:	00 00       	nop
    31c2:	8f 2d       	mov	r24, r15
    31c4:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <getSn_TX_FSR>
    31c8:	8c 01       	movw	r16, r24
    31ca:	cb 5e       	subi	r28, 0xEB	; 235
    31cc:	d7 4f       	sbci	r29, 0xF7	; 247
    31ce:	68 81       	ld	r22, Y
    31d0:	79 81       	ldd	r23, Y+1	; 0x01
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	9b 81       	ldd	r25, Y+3	; 0x03
    31d6:	c5 51       	subi	r28, 0x15	; 21
    31d8:	d8 40       	sbci	r29, 0x08	; 8
    31da:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    31de:	90 e0       	ldi	r25, 0x00	; 0
    31e0:	98 2f       	mov	r25, r24
    31e2:	88 27       	eor	r24, r24
    31e4:	99 0f       	add	r25, r25
    31e6:	99 0f       	add	r25, r25
    31e8:	08 17       	cp	r16, r24
    31ea:	19 07       	cpc	r17, r25
    31ec:	21 f7       	brne	.-56     	; 0x31b6 <netHandler+0x3ec>
							 _delay_ms(1);
						 }
						 sent_length += chunk_size;
    31ee:	c6 5e       	subi	r28, 0xE6	; 230
    31f0:	d7 4f       	sbci	r29, 0xF7	; 247
    31f2:	a8 81       	ld	r26, Y
    31f4:	b9 81       	ldd	r27, Y+1	; 0x01
    31f6:	ca 51       	subi	r28, 0x1A	; 26
    31f8:	d8 40       	sbci	r29, 0x08	; 8
    31fa:	ac 0d       	add	r26, r12
    31fc:	bd 1d       	adc	r27, r13
    31fe:	c6 5e       	subi	r28, 0xE6	; 230
    3200:	d7 4f       	sbci	r29, 0xF7	; 247
    3202:	a8 83       	st	Y, r26
    3204:	b9 83       	std	Y+1, r27	; 0x01
    3206:	ca 51       	subi	r28, 0x1A	; 26
    3208:	d8 40       	sbci	r29, 0x08	; 8
					 size_t sent_length = 0;
					 uint8_t buffer[2048];

					 printf("index.html send\r\n");
					 
					 while (sent_length < total_length) {
    320a:	af 3a       	cpi	r26, 0xAF	; 175
    320c:	bd 41       	sbci	r27, 0x1D	; 29
    320e:	08 f4       	brcc	.+2      	; 0x3212 <netHandler+0x448>
    3210:	9f cf       	rjmp	.-194    	; 0x3150 <netHandler+0x386>
    3212:	c2 5e       	subi	r28, 0xE2	; 226
    3214:	d7 4f       	sbci	r29, 0xF7	; 247
    3216:	a8 80       	ld	r10, Y
    3218:	b9 80       	ldd	r11, Y+1	; 0x01
    321a:	ce 51       	subi	r28, 0x1E	; 30
    321c:	d8 40       	sbci	r29, 0x08	; 8
    321e:	c0 5e       	subi	r28, 0xE0	; 224
    3220:	d7 4f       	sbci	r29, 0xF7	; 247
    3222:	88 80       	ld	r8, Y
    3224:	99 80       	ldd	r9, Y+1	; 0x01
    3226:	c0 52       	subi	r28, 0x20	; 32
    3228:	d8 40       	sbci	r29, 0x08	; 8
    322a:	ce 5d       	subi	r28, 0xDE	; 222
    322c:	d7 4f       	sbci	r29, 0xF7	; 247
    322e:	e8 80       	ld	r14, Y
    3230:	f9 80       	ldd	r15, Y+1	; 0x01
    3232:	c2 52       	subi	r28, 0x22	; 34
    3234:	d8 40       	sbci	r29, 0x08	; 8
    3236:	78 c1       	rjmp	.+752    	; 0x3528 <netHandler+0x75e>
							 _delay_ms(1);
						 }
						 sent_length += chunk_size;
					 }
					
					} else if (strstr((char *)TCP_RX_BUF, "GET /favicon.ico") != NULL) {
    3238:	6a e6       	ldi	r22, 0x6A	; 106
    323a:	71 e2       	ldi	r23, 0x21	; 33
    323c:	8e e7       	ldi	r24, 0x7E	; 126
    323e:	99 e2       	ldi	r25, 0x29	; 41
    3240:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strstr>
    3244:	89 2b       	or	r24, r25
    3246:	d9 f0       	breq	.+54     	; 0x327e <netHandler+0x4b4>
					printf("favicon.ico send\r\n");
    3248:	8b e7       	ldi	r24, 0x7B	; 123
    324a:	91 e2       	ldi	r25, 0x21	; 33
    324c:	0e 94 30 2d 	call	0x5a60	; 0x5a60 <puts>
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: image/x-icon\r\r\n\n", 47);
    3250:	4f e2       	ldi	r20, 0x2F	; 47
    3252:	50 e0       	ldi	r21, 0x00	; 0
    3254:	6d e8       	ldi	r22, 0x8D	; 141
    3256:	71 e2       	ldi	r23, 0x21	; 33
    3258:	c7 5e       	subi	r28, 0xE7	; 231
    325a:	d7 4f       	sbci	r29, 0xF7	; 247
    325c:	88 81       	ld	r24, Y
    325e:	c9 51       	subi	r28, 0x19	; 25
    3260:	d8 40       	sbci	r29, 0x08	; 8
    3262:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <send>
					send(HTTP_SOCKET, (uint8_t *)favicon_ico, sizeof(favicon_ico));
    3266:	42 e8       	ldi	r20, 0x82	; 130
    3268:	55 e0       	ldi	r21, 0x05	; 5
    326a:	61 e2       	ldi	r22, 0x21	; 33
    326c:	73 e2       	ldi	r23, 0x23	; 35
    326e:	c7 5e       	subi	r28, 0xE7	; 231
    3270:	d7 4f       	sbci	r29, 0xF7	; 247
    3272:	88 81       	ld	r24, Y
    3274:	c9 51       	subi	r28, 0x19	; 25
    3276:	d8 40       	sbci	r29, 0x08	; 8
    3278:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <send>
    327c:	55 c1       	rjmp	.+682    	; 0x3528 <netHandler+0x75e>

					} else if (strstr((char *)TCP_RX_BUF, "GET /get_vals") != NULL) {
    327e:	6d eb       	ldi	r22, 0xBD	; 189
    3280:	71 e2       	ldi	r23, 0x21	; 33
    3282:	8e e7       	ldi	r24, 0x7E	; 126
    3284:	99 e2       	ldi	r25, 0x29	; 41
    3286:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strstr>
    328a:	89 2b       	or	r24, r25
    328c:	09 f4       	brne	.+2      	; 0x3290 <netHandler+0x4c6>
    328e:	83 c0       	rjmp	.+262    	; 0x3396 <netHandler+0x5cc>
					float watt = ampDMM * voltDMM;
    3290:	70 91 49 20 	lds	r23, 0x2049	; 0x802049 <ampDMM>
    3294:	60 91 4a 20 	lds	r22, 0x204A	; 0x80204a <ampDMM+0x1>
    3298:	90 91 4b 20 	lds	r25, 0x204B	; 0x80204b <ampDMM+0x2>
    329c:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <ampDMM+0x3>
    32a0:	50 91 45 20 	lds	r21, 0x2045	; 0x802045 <voltDMM>
    32a4:	40 91 46 20 	lds	r20, 0x2046	; 0x802046 <voltDMM+0x1>
    32a8:	30 91 47 20 	lds	r19, 0x2047	; 0x802047 <voltDMM+0x2>
    32ac:	20 91 48 20 	lds	r18, 0x2048	; 0x802048 <voltDMM+0x3>
					char json_response[256];
					snprintf(json_response, sizeof(json_response),
    32b0:	1f 92       	push	r1
    32b2:	11 e0       	ldi	r17, 0x01	; 1
    32b4:	1f 93       	push	r17
    32b6:	1f 92       	push	r1
    32b8:	1f 93       	push	r17
    32ba:	1f 92       	push	r1
    32bc:	1f 92       	push	r1
    32be:	e0 91 c6 28 	lds	r30, 0x28C6	; 0x8028c6 <__data_end>
    32c2:	1f 92       	push	r1
    32c4:	ef 93       	push	r30
    32c6:	e0 91 c7 28 	lds	r30, 0x28C7	; 0x8028c7 <remoteCtrl>
    32ca:	1f 92       	push	r1
    32cc:	ef 93       	push	r30
    32ce:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <outState>
    32d2:	1f 92       	push	r1
    32d4:	ef 93       	push	r30
    32d6:	2f 93       	push	r18
    32d8:	3f 93       	push	r19
    32da:	4f 93       	push	r20
    32dc:	5f 93       	push	r21
    32de:	8f 93       	push	r24
    32e0:	9f 93       	push	r25
    32e2:	6f 93       	push	r22
    32e4:	7f 93       	push	r23
    32e6:	f3 2f       	mov	r31, r19
    32e8:	e2 2f       	mov	r30, r18
    32ea:	25 2f       	mov	r18, r21
    32ec:	34 2f       	mov	r19, r20
    32ee:	4f 2f       	mov	r20, r31
    32f0:	5e 2f       	mov	r21, r30
    32f2:	a6 2f       	mov	r26, r22
    32f4:	e8 2f       	mov	r30, r24
    32f6:	67 2f       	mov	r22, r23
    32f8:	7a 2f       	mov	r23, r26
    32fa:	89 2f       	mov	r24, r25
    32fc:	9e 2f       	mov	r25, r30
    32fe:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__mulsf3>
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	7f 93       	push	r23
    3308:	6f 93       	push	r22
    330a:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <volt+0x3>
    330e:	8f 93       	push	r24
    3310:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <volt+0x2>
    3314:	8f 93       	push	r24
    3316:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <volt+0x1>
    331a:	8f 93       	push	r24
    331c:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <volt>
    3320:	8f 93       	push	r24
    3322:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <amp+0x3>
    3326:	8f 93       	push	r24
    3328:	80 91 53 20 	lds	r24, 0x2053	; 0x802053 <amp+0x2>
    332c:	8f 93       	push	r24
    332e:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <amp+0x1>
    3332:	8f 93       	push	r24
    3334:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <amp>
    3338:	8f 93       	push	r24
    333a:	8b ec       	ldi	r24, 0xCB	; 203
    333c:	91 e2       	ldi	r25, 0x21	; 33
    333e:	9f 93       	push	r25
    3340:	8f 93       	push	r24
    3342:	1f 93       	push	r17
    3344:	1f 92       	push	r1
    3346:	21 e0       	ldi	r18, 0x01	; 1
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	2c 0f       	add	r18, r28
    334c:	3d 1f       	adc	r19, r29
    334e:	3f 93       	push	r19
    3350:	2f 93       	push	r18
    3352:	0e 94 60 2d 	call	0x5ac0	; 0x5ac0 <snprintf>
					"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n"
					"{\"amp\":%.3f,\"volt\":%.3f,\"watt\":%.3f,\"ampDMM\":%.3f,\"voltDMM\":%.3f,"
					"\"outState\":%d,\"rem\":%d,\"err\":%d,\"in0\":%d,\"in1\":%d,\"in2\":%d}",
					amp, volt, watt, ampDMM, voltDMM, outState, remoteCtrl, psuErr, 0, 1, 1);
					send(HTTP_SOCKET, (uint8_t *)json_response, strlen(json_response));
    3356:	cf 5e       	subi	r28, 0xEF	; 239
    3358:	d7 4f       	sbci	r29, 0xF7	; 247
    335a:	e8 81       	ld	r30, Y
    335c:	f9 81       	ldd	r31, Y+1	; 0x01
    335e:	c1 51       	subi	r28, 0x11	; 17
    3360:	d8 40       	sbci	r29, 0x08	; 8
    3362:	01 90       	ld	r0, Z+
    3364:	00 20       	and	r0, r0
    3366:	e9 f7       	brne	.-6      	; 0x3362 <netHandler+0x598>
    3368:	31 97       	sbiw	r30, 0x01	; 1
    336a:	af 01       	movw	r20, r30
    336c:	cf 5e       	subi	r28, 0xEF	; 239
    336e:	d7 4f       	sbci	r29, 0xF7	; 247
    3370:	88 81       	ld	r24, Y
    3372:	99 81       	ldd	r25, Y+1	; 0x01
    3374:	c1 51       	subi	r28, 0x11	; 17
    3376:	d8 40       	sbci	r29, 0x08	; 8
    3378:	48 1b       	sub	r20, r24
    337a:	59 0b       	sbc	r21, r25
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	de bf       	out	0x3e, r29	; 62
    3380:	be 01       	movw	r22, r28
    3382:	6f 5f       	subi	r22, 0xFF	; 255
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	c7 5e       	subi	r28, 0xE7	; 231
    3388:	d7 4f       	sbci	r29, 0xF7	; 247
    338a:	88 81       	ld	r24, Y
    338c:	c9 51       	subi	r28, 0x19	; 25
    338e:	d8 40       	sbci	r29, 0x08	; 8
    3390:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <send>
    3394:	c9 c0       	rjmp	.+402    	; 0x3528 <netHandler+0x75e>
					
					} else if (strstr((char *)TCP_RX_BUF, "GET /set_vals") != NULL) {
    3396:	6b e7       	ldi	r22, 0x7B	; 123
    3398:	72 e2       	ldi	r23, 0x22	; 34
    339a:	8e e7       	ldi	r24, 0x7E	; 126
    339c:	99 e2       	ldi	r25, 0x29	; 41
    339e:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strstr>
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <netHandler+0x5de>
    33a6:	40 c0       	rjmp	.+128    	; 0x3428 <netHandler+0x65e>
					char *query_string = strstr((char *)TCP_RX_BUF, "GET /set_vals") + strlen("GET /set_vals?");
					sscanf(query_string, "amp=%f&volt=%f", &amp, &volt);
    33a8:	ed e4       	ldi	r30, 0x4D	; 77
    33aa:	f0 e2       	ldi	r31, 0x20	; 32
    33ac:	ff 93       	push	r31
    33ae:	ef 93       	push	r30
    33b0:	41 e5       	ldi	r20, 0x51	; 81
    33b2:	50 e2       	ldi	r21, 0x20	; 32
    33b4:	5f 93       	push	r21
    33b6:	4f 93       	push	r20
    33b8:	29 e8       	ldi	r18, 0x89	; 137
    33ba:	32 e2       	ldi	r19, 0x22	; 34
    33bc:	3f 93       	push	r19
    33be:	2f 93       	push	r18
    33c0:	0e 96       	adiw	r24, 0x0e	; 14
    33c2:	9f 93       	push	r25
    33c4:	8f 93       	push	r24
    33c6:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <sscanf>
					printf("%f; %f\r\n", amp, volt);
    33ca:	80 91 50 20 	lds	r24, 0x2050	; 0x802050 <volt+0x3>
    33ce:	8f 93       	push	r24
    33d0:	80 91 4f 20 	lds	r24, 0x204F	; 0x80204f <volt+0x2>
    33d4:	8f 93       	push	r24
    33d6:	80 91 4e 20 	lds	r24, 0x204E	; 0x80204e <volt+0x1>
    33da:	8f 93       	push	r24
    33dc:	80 91 4d 20 	lds	r24, 0x204D	; 0x80204d <volt>
    33e0:	8f 93       	push	r24
    33e2:	80 91 54 20 	lds	r24, 0x2054	; 0x802054 <amp+0x3>
    33e6:	8f 93       	push	r24
    33e8:	80 91 53 20 	lds	r24, 0x2053	; 0x802053 <amp+0x2>
    33ec:	8f 93       	push	r24
    33ee:	80 91 52 20 	lds	r24, 0x2052	; 0x802052 <amp+0x1>
    33f2:	8f 93       	push	r24
    33f4:	80 91 51 20 	lds	r24, 0x2051	; 0x802051 <amp>
    33f8:	8f 93       	push	r24
    33fa:	88 e9       	ldi	r24, 0x98	; 152
    33fc:	92 e2       	ldi	r25, 0x22	; 34
    33fe:	9f 93       	push	r25
    3400:	8f 93       	push	r24
    3402:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <printf>
					
					//SET_DAC_VOLTAGE(volt);
					//SET_DAC_CURRENT(amp);
					remoteCtrl = 1;
    3406:	81 e0       	ldi	r24, 0x01	; 1
    3408:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <remoteCtrl>
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 67);
    340c:	43 e4       	ldi	r20, 0x43	; 67
    340e:	50 e0       	ldi	r21, 0x00	; 0
    3410:	61 ea       	ldi	r22, 0xA1	; 161
    3412:	72 e2       	ldi	r23, 0x22	; 34
    3414:	c7 5e       	subi	r28, 0xE7	; 231
    3416:	d7 4f       	sbci	r29, 0xF7	; 247
    3418:	88 81       	ld	r24, Y
    341a:	c9 51       	subi	r28, 0x19	; 25
    341c:	d8 40       	sbci	r29, 0x08	; 8
    341e:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <send>
    3422:	cd bf       	out	0x3d, r28	; 61
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	80 c0       	rjmp	.+256    	; 0x3528 <netHandler+0x75e>
					
					} else if (strstr((char *)TCP_RX_BUF, "GET /control") != NULL) {
    3428:	65 ee       	ldi	r22, 0xE5	; 229
    342a:	72 e2       	ldi	r23, 0x22	; 34
    342c:	8e e7       	ldi	r24, 0x7E	; 126
    342e:	99 e2       	ldi	r25, 0x29	; 41
    3430:	0e 94 02 2d 	call	0x5a04	; 0x5a04 <strstr>
    3434:	00 97       	sbiw	r24, 0x00	; 0
    3436:	09 f4       	brne	.+2      	; 0x343a <netHandler+0x670>
    3438:	77 c0       	rjmp	.+238    	; 0x3528 <netHandler+0x75e>
					char *query_string = strstr((char *)TCP_RX_BUF, "GET /control") + strlen("GET /control?");
					char device[10], action[10];
					
					sscanf(query_string, "device=%[^&]&action=%s", device, action);
    343a:	21 e0       	ldi	r18, 0x01	; 1
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	2c 0f       	add	r18, r28
    3440:	3d 1f       	adc	r19, r29
    3442:	3f 93       	push	r19
    3444:	2f 93       	push	r18
    3446:	cc 5e       	subi	r28, 0xEC	; 236
    3448:	d7 4f       	sbci	r29, 0xF7	; 247
    344a:	38 81       	ld	r19, Y
    344c:	c4 51       	subi	r28, 0x14	; 20
    344e:	d8 40       	sbci	r29, 0x08	; 8
    3450:	3f 93       	push	r19
    3452:	cd 5e       	subi	r28, 0xED	; 237
    3454:	d7 4f       	sbci	r29, 0xF7	; 247
    3456:	48 81       	ld	r20, Y
    3458:	c3 51       	subi	r28, 0x13	; 19
    345a:	d8 40       	sbci	r29, 0x08	; 8
    345c:	4f 93       	push	r20
    345e:	a2 ef       	ldi	r26, 0xF2	; 242
    3460:	b2 e2       	ldi	r27, 0x22	; 34
    3462:	bf 93       	push	r27
    3464:	af 93       	push	r26
    3466:	0d 96       	adiw	r24, 0x0d	; 13
    3468:	9f 93       	push	r25
    346a:	8f 93       	push	r24
    346c:	0e 94 97 2d 	call	0x5b2e	; 0x5b2e <sscanf>
					printf("%s; %s\r\n", device, action);
    3470:	21 e0       	ldi	r18, 0x01	; 1
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	2c 0f       	add	r18, r28
    3476:	3d 1f       	adc	r19, r29
    3478:	3f 93       	push	r19
    347a:	2f 93       	push	r18
    347c:	cc 5e       	subi	r28, 0xEC	; 236
    347e:	d7 4f       	sbci	r29, 0xF7	; 247
    3480:	38 81       	ld	r19, Y
    3482:	c4 51       	subi	r28, 0x14	; 20
    3484:	d8 40       	sbci	r29, 0x08	; 8
    3486:	3f 93       	push	r19
    3488:	cd 5e       	subi	r28, 0xED	; 237
    348a:	d7 4f       	sbci	r29, 0xF7	; 247
    348c:	48 81       	ld	r20, Y
    348e:	c3 51       	subi	r28, 0x13	; 19
    3490:	d8 40       	sbci	r29, 0x08	; 8
    3492:	4f 93       	push	r20
    3494:	89 e0       	ldi	r24, 0x09	; 9
    3496:	93 e2       	ldi	r25, 0x23	; 35
    3498:	9f 93       	push	r25
    349a:	8f 93       	push	r24
    349c:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <printf>
					
					if (strcmp(device, "fan") == 0) {
    34a0:	62 e1       	ldi	r22, 0x12	; 18
    34a2:	73 e2       	ldi	r23, 0x23	; 35
    34a4:	ce 01       	movw	r24, r28
    34a6:	8f 5f       	subi	r24, 0xFF	; 255
    34a8:	97 4f       	sbci	r25, 0xF7	; 247
    34aa:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <strcmp>
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	89 2b       	or	r24, r25
    34b4:	71 f1       	breq	.+92     	; 0x3512 <netHandler+0x748>
						
						//gpio_set_pin_level(O2, strcmp(action, "on") == 0);
						//gpio_set_pin_level(O3, strcmp(action, "on") == 0);
						} else if (strcmp(device, "rem") == 0) {
    34b6:	66 e1       	ldi	r22, 0x16	; 22
    34b8:	73 e2       	ldi	r23, 0x23	; 35
    34ba:	ce 01       	movw	r24, r28
    34bc:	8f 5f       	subi	r24, 0xFF	; 255
    34be:	97 4f       	sbci	r25, 0xF7	; 247
    34c0:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <strcmp>
    34c4:	89 2b       	or	r24, r25
    34c6:	69 f4       	brne	.+26     	; 0x34e2 <netHandler+0x718>
						
						remoteCtrl = (strcmp(action, "on") == 0);
    34c8:	6a e1       	ldi	r22, 0x1A	; 26
    34ca:	73 e2       	ldi	r23, 0x23	; 35
    34cc:	ce 01       	movw	r24, r28
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <strcmp>
    34d4:	21 e0       	ldi	r18, 0x01	; 1
    34d6:	89 2b       	or	r24, r25
    34d8:	09 f0       	breq	.+2      	; 0x34dc <netHandler+0x712>
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	20 93 c7 28 	sts	0x28C7, r18	; 0x8028c7 <remoteCtrl>
    34e0:	18 c0       	rjmp	.+48     	; 0x3512 <netHandler+0x748>
						//gpio_set_pin_level(O1, remoteCtrl);
						} else if (strcmp(device, "psu") == 0) {
    34e2:	6d e1       	ldi	r22, 0x1D	; 29
    34e4:	73 e2       	ldi	r23, 0x23	; 35
    34e6:	ce 01       	movw	r24, r28
    34e8:	8f 5f       	subi	r24, 0xFF	; 255
    34ea:	97 4f       	sbci	r25, 0xF7	; 247
    34ec:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <strcmp>
    34f0:	89 2b       	or	r24, r25
    34f2:	79 f4       	brne	.+30     	; 0x3512 <netHandler+0x748>
						
						outState = (strcmp(action, "on") == 0) ? 1 : 0;
    34f4:	6a e1       	ldi	r22, 0x1A	; 26
    34f6:	73 e2       	ldi	r23, 0x23	; 35
    34f8:	ce 01       	movw	r24, r28
    34fa:	01 96       	adiw	r24, 0x01	; 1
    34fc:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <strcmp>
    3500:	21 e0       	ldi	r18, 0x01	; 1
    3502:	89 2b       	or	r24, r25
    3504:	09 f0       	breq	.+2      	; 0x3508 <netHandler+0x73e>
    3506:	20 e0       	ldi	r18, 0x00	; 0
    3508:	20 93 44 20 	sts	0x2044, r18	; 0x802044 <outState>
						remoteCtrl = 1;
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	80 93 c7 28 	sts	0x28C7, r24	; 0x8028c7 <remoteCtrl>
					}
					send(HTTP_SOCKET, (uint8_t *)"HTTP/1.1 200 OK\r\nContent-Type: application/json\r\r\n\n{\"success\":true}", 65);
    3512:	41 e4       	ldi	r20, 0x41	; 65
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	61 ea       	ldi	r22, 0xA1	; 161
    3518:	72 e2       	ldi	r23, 0x22	; 34
    351a:	c7 5e       	subi	r28, 0xE7	; 231
    351c:	d7 4f       	sbci	r29, 0xF7	; 247
    351e:	88 81       	ld	r24, Y
    3520:	c9 51       	subi	r28, 0x19	; 25
    3522:	d8 40       	sbci	r29, 0x08	; 8
    3524:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <send>
				}
				disconnect(HTTP_SOCKET);
    3528:	c7 5e       	subi	r28, 0xE7	; 231
    352a:	d7 4f       	sbci	r29, 0xF7	; 247
    352c:	88 81       	ld	r24, Y
    352e:	c9 51       	subi	r28, 0x19	; 25
    3530:	d8 40       	sbci	r29, 0x08	; 8
    3532:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <disconnect>
				
				while (getSn_TX_FSR(HTTP_SOCKET) != getSn_TxMAX(HTTP_SOCKET)) {
    3536:	c5 01       	movw	r24, r10
    3538:	91 5e       	subi	r25, 0xE1	; 225
    353a:	9c 01       	movw	r18, r24
    353c:	99 0f       	add	r25, r25
    353e:	44 0b       	sbc	r20, r20
    3540:	55 0b       	sbc	r21, r21
    3542:	cb 5e       	subi	r28, 0xEB	; 235
    3544:	d7 4f       	sbci	r29, 0xF7	; 247
    3546:	28 83       	st	Y, r18
    3548:	39 83       	std	Y+1, r19	; 0x01
    354a:	4a 83       	std	Y+2, r20	; 0x02
    354c:	5b 83       	std	Y+3, r21	; 0x03
    354e:	c5 51       	subi	r28, 0x15	; 21
    3550:	d8 40       	sbci	r29, 0x08	; 8
    3552:	c7 5e       	subi	r28, 0xE7	; 231
    3554:	d7 4f       	sbci	r29, 0xF7	; 247
    3556:	d8 80       	ld	r13, Y
    3558:	c9 51       	subi	r28, 0x19	; 25
    355a:	d8 40       	sbci	r29, 0x08	; 8
    355c:	8d 2d       	mov	r24, r13
    355e:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <getSn_TX_FSR>
    3562:	8c 01       	movw	r16, r24
    3564:	cb 5e       	subi	r28, 0xEB	; 235
    3566:	d7 4f       	sbci	r29, 0xF7	; 247
    3568:	68 81       	ld	r22, Y
    356a:	79 81       	ldd	r23, Y+1	; 0x01
    356c:	8a 81       	ldd	r24, Y+2	; 0x02
    356e:	9b 81       	ldd	r25, Y+3	; 0x03
    3570:	c5 51       	subi	r28, 0x15	; 21
    3572:	d8 40       	sbci	r29, 0x08	; 8
    3574:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	98 2f       	mov	r25, r24
    357c:	88 27       	eor	r24, r24
    357e:	99 0f       	add	r25, r25
    3580:	99 0f       	add	r25, r25
    3582:	08 17       	cp	r16, r24
    3584:	19 07       	cpc	r17, r25
    3586:	51 f7       	brne	.-44     	; 0x355c <netHandler+0x792>
					//delay_ms(1);
				}
				close(HTTP_SOCKET);
    3588:	c7 5e       	subi	r28, 0xE7	; 231
    358a:	d7 4f       	sbci	r29, 0xF7	; 247
    358c:	88 81       	ld	r24, Y
    358e:	c9 51       	subi	r28, 0x19	; 25
    3590:	d8 40       	sbci	r29, 0x08	; 8
    3592:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
		//}
		//if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSE_WAIT) {
		//disconnect(HTTP_SOCKET);
		//}

		if (getSn_SR(HTTP_SOCKET) == SOCK_CLOSED) {
    3596:	c3 01       	movw	r24, r6
    3598:	b2 01       	movw	r22, r4
    359a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    359e:	81 11       	cpse	r24, r1
    35a0:	15 c0       	rjmp	.+42     	; 0x35cc <netHandler+0x802>
			socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
    35a2:	d7 01       	movw	r26, r14
    35a4:	1a 96       	adiw	r26, 0x0a	; 10
    35a6:	4d 91       	ld	r20, X+
    35a8:	5c 91       	ld	r21, X
    35aa:	1b 97       	sbiw	r26, 0x0b	; 11
    35ac:	20 e0       	ldi	r18, 0x00	; 0
    35ae:	61 e0       	ldi	r22, 0x01	; 1
    35b0:	c7 5e       	subi	r28, 0xE7	; 231
    35b2:	d7 4f       	sbci	r29, 0xF7	; 247
    35b4:	88 81       	ld	r24, Y
    35b6:	c9 51       	subi	r28, 0x19	; 25
    35b8:	d8 40       	sbci	r29, 0x08	; 8
    35ba:	0e 94 bd 1b 	call	0x377a	; 0x377a <socket>
			listen(HTTP_SOCKET);
    35be:	c7 5e       	subi	r28, 0xE7	; 231
    35c0:	d7 4f       	sbci	r29, 0xF7	; 247
    35c2:	88 81       	ld	r24, Y
    35c4:	c9 51       	subi	r28, 0x19	; 25
    35c6:	d8 40       	sbci	r29, 0x08	; 8
    35c8:	0e 94 c6 1c 	call	0x398c	; 0x398c <listen>
    35cc:	b4 e0       	ldi	r27, 0x04	; 4
    35ce:	8b 0e       	add	r8, r27
    35d0:	91 1c       	adc	r9, r1
    35d2:	e2 e0       	ldi	r30, 0x02	; 2
    35d4:	ee 0e       	add	r14, r30
    35d6:	f1 1c       	adc	r15, r1
    35d8:	ff ef       	ldi	r31, 0xFF	; 255
    35da:	2f 1a       	sub	r2, r31
    35dc:	3f 0a       	sbc	r3, r31
			//sendto(UdpTxSockNum, (uint8_t *)TCP_RX_BUF, udp_size, ip, UdpTxPort);
			//setSn_IR(UdpRxSockNum, 0x1F);
		}
	}
	
	for (uint8_t HTTP_SOCKET = 5; HTTP_SOCKET <= 7; HTTP_SOCKET++) {
    35de:	28 e0       	ldi	r18, 0x08	; 8
    35e0:	22 16       	cp	r2, r18
    35e2:	31 04       	cpc	r3, r1
    35e4:	09 f0       	breq	.+2      	; 0x35e8 <netHandler+0x81e>
    35e6:	24 cd       	rjmp	.-1464   	; 0x3030 <netHandler+0x266>
    35e8:	38 c0       	rjmp	.+112    	; 0x365a <netHandler+0x890>
				
			}
			
			
			
			if(strcasecmp(TCP_RX_BUF, "*RST") == 0){
    35ea:	61 e3       	ldi	r22, 0x31	; 49
    35ec:	71 e2       	ldi	r23, 0x21	; 33
    35ee:	8e e7       	ldi	r24, 0x7E	; 126
    35f0:	99 e2       	ldi	r25, 0x29	; 41
    35f2:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <strcasecmp>
    35f6:	89 2b       	or	r24, r25
    35f8:	09 f0       	breq	.+2      	; 0x35fc <netHandler+0x832>
    35fa:	f6 cc       	rjmp	.-1556   	; 0x2fe8 <netHandler+0x21e>
    35fc:	e1 cc       	rjmp	.-1598   	; 0x2fc0 <netHandler+0x1f6>
    35fe:	0f 2e       	mov	r0, r31
    3600:	fe e5       	ldi	r31, 0x5E	; 94
    3602:	ef 2e       	mov	r14, r31
    3604:	f0 e2       	ldi	r31, 0x20	; 32
    3606:	ff 2e       	mov	r15, r31
    3608:	f0 2d       	mov	r31, r0
					sprintf(UdpAnsver, "ok");
					okFlg = 1;
					} else if (strcasecmp(state, "ON") == 0) {
					printf("Output is ON\r\n");
					sprintf(UdpAnsver, "ok");
					okFlg = 1;
    360a:	0f 2e       	mov	r0, r31
    360c:	f5 e0       	ldi	r31, 0x05	; 5
    360e:	2f 2e       	mov	r2, r31
    3610:	31 2c       	mov	r3, r1
    3612:	f0 2d       	mov	r31, r0
    3614:	0f 2e       	mov	r0, r31
    3616:	f5 e1       	ldi	r31, 0x15	; 21
    3618:	8f 2e       	mov	r8, r31
    361a:	91 2c       	mov	r9, r1
    361c:	f0 2d       	mov	r31, r0
					
					} else if (strstr((char *)TCP_RX_BUF, "GET /control") != NULL) {
					char *query_string = strstr((char *)TCP_RX_BUF, "GET /control") + strlen("GET /control?");
					char device[10], action[10];
					
					sscanf(query_string, "device=%[^&]&action=%s", device, action);
    361e:	ae 01       	movw	r20, r28
    3620:	4f 5f       	subi	r20, 0xFF	; 255
    3622:	5f 4f       	sbci	r21, 0xFF	; 255
    3624:	cf 5e       	subi	r28, 0xEF	; 239
    3626:	d7 4f       	sbci	r29, 0xF7	; 247
    3628:	48 83       	st	Y, r20
    362a:	59 83       	std	Y+1, r21	; 0x01
    362c:	c1 51       	subi	r28, 0x11	; 17
    362e:	d8 40       	sbci	r29, 0x08	; 8
    3630:	ce 01       	movw	r24, r28
    3632:	8f 5f       	subi	r24, 0xFF	; 255
    3634:	97 4f       	sbci	r25, 0xF7	; 247
    3636:	cd 5e       	subi	r28, 0xED	; 237
    3638:	d7 4f       	sbci	r29, 0xF7	; 247
    363a:	88 83       	st	Y, r24
    363c:	99 83       	std	Y+1, r25	; 0x01
    363e:	c3 51       	subi	r28, 0x13	; 19
    3640:	d8 40       	sbci	r29, 0x08	; 8
					 uint8_t buffer[2048];

					 printf("index.html send\r\n");
					 
					 while (sent_length < total_length) {
						 size_t chunk_size = (total_length - sent_length > sizeof(buffer)) ? sizeof(buffer) : total_length - sent_length;
    3642:	c4 5e       	subi	r28, 0xE4	; 228
    3644:	d7 4f       	sbci	r29, 0xF7	; 247
    3646:	18 82       	st	Y, r1
    3648:	cc 51       	subi	r28, 0x1C	; 28
    364a:	d8 40       	sbci	r29, 0x08	; 8
    364c:	98 e0       	ldi	r25, 0x08	; 8
    364e:	c3 5e       	subi	r28, 0xE3	; 227
    3650:	d7 4f       	sbci	r29, 0xF7	; 247
    3652:	98 83       	st	Y, r25
    3654:	cd 51       	subi	r28, 0x1D	; 29
    3656:	d8 40       	sbci	r29, 0x08	; 8
    3658:	eb cc       	rjmp	.-1578   	; 0x3030 <netHandler+0x266>
			socket(HTTP_SOCKET, Sn_MR_TCP, socketPort[HTTP_SOCKET], 0);
			listen(HTTP_SOCKET);
		}
	}
	
    365a:	cd 5d       	subi	r28, 0xDD	; 221
    365c:	d7 4f       	sbci	r29, 0xF7	; 247
    365e:	cd bf       	out	0x3d, r28	; 61
    3660:	de bf       	out	0x3e, r29	; 62
    3662:	df 91       	pop	r29
    3664:	cf 91       	pop	r28
    3666:	1f 91       	pop	r17
    3668:	0f 91       	pop	r16
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	df 90       	pop	r13
    3670:	cf 90       	pop	r12
    3672:	bf 90       	pop	r11
    3674:	af 90       	pop	r10
    3676:	9f 90       	pop	r9
    3678:	8f 90       	pop	r8
    367a:	7f 90       	pop	r7
    367c:	6f 90       	pop	r6
    367e:	5f 90       	pop	r5
    3680:	4f 90       	pop	r4
    3682:	3f 90       	pop	r3
    3684:	2f 90       	pop	r2
    3686:	08 95       	ret

00003688 <close>:
#endif   
      default:
         return SOCKERR_ARG;
   }   
   return SOCK_OK;
}
    3688:	8f 92       	push	r8
    368a:	9f 92       	push	r9
    368c:	af 92       	push	r10
    368e:	bf 92       	push	r11
    3690:	cf 92       	push	r12
    3692:	df 92       	push	r13
    3694:	ef 92       	push	r14
    3696:	ff 92       	push	r15
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
    369c:	89 30       	cpi	r24, 0x09	; 9
    369e:	08 f0       	brcs	.+2      	; 0x36a2 <close+0x1a>
    36a0:	60 c0       	rjmp	.+192    	; 0x3762 <close+0xda>
    36a2:	f8 2e       	mov	r15, r24
    36a4:	c8 2f       	mov	r28, r24
    36a6:	d0 e0       	ldi	r29, 0x00	; 0
    36a8:	6e 01       	movw	r12, r28
    36aa:	cc 0c       	add	r12, r12
    36ac:	dd 1c       	adc	r13, r13
    36ae:	cc 0c       	add	r12, r12
    36b0:	dd 1c       	adc	r13, r13
    36b2:	8f ef       	ldi	r24, 0xFF	; 255
    36b4:	c8 1a       	sub	r12, r24
    36b6:	d8 0a       	sbc	r13, r24
    36b8:	cc 0c       	add	r12, r12
    36ba:	dd 1c       	adc	r13, r13
    36bc:	cc 0c       	add	r12, r12
    36be:	dd 1c       	adc	r13, r13
    36c0:	cc 0c       	add	r12, r12
    36c2:	dd 1c       	adc	r13, r13
    36c4:	46 01       	movw	r8, r12
    36c6:	93 94       	inc	r9
    36c8:	09 2c       	mov	r0, r9
    36ca:	00 0c       	add	r0, r0
    36cc:	aa 08       	sbc	r10, r10
    36ce:	bb 08       	sbc	r11, r11
    36d0:	40 e1       	ldi	r20, 0x10	; 16
    36d2:	c5 01       	movw	r24, r10
    36d4:	b4 01       	movw	r22, r8
    36d6:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    36da:	c5 01       	movw	r24, r10
    36dc:	b4 01       	movw	r22, r8
    36de:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    36e2:	81 11       	cpse	r24, r1
    36e4:	fa cf       	rjmp	.-12     	; 0x36da <close+0x52>
    36e6:	b6 01       	movw	r22, r12
    36e8:	7e 5f       	subi	r23, 0xFE	; 254
    36ea:	07 2e       	mov	r0, r23
    36ec:	00 0c       	add	r0, r0
    36ee:	88 0b       	sbc	r24, r24
    36f0:	99 0b       	sbc	r25, r25
    36f2:	4f e1       	ldi	r20, 0x1F	; 31
    36f4:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <close+0x7a>
    36fe:	88 0f       	add	r24, r24
    3700:	99 1f       	adc	r25, r25
    3702:	fa 94       	dec	r15
    3704:	e2 f7       	brpl	.-8      	; 0x36fe <close+0x76>
    3706:	80 95       	com	r24
    3708:	90 95       	com	r25
    370a:	20 91 63 29 	lds	r18, 0x2963	; 0x802963 <sock_io_mode>
    370e:	30 91 64 29 	lds	r19, 0x2964	; 0x802964 <sock_io_mode+0x1>
    3712:	28 23       	and	r18, r24
    3714:	39 23       	and	r19, r25
    3716:	20 93 63 29 	sts	0x2963, r18	; 0x802963 <sock_io_mode>
    371a:	30 93 64 29 	sts	0x2964, r19	; 0x802964 <sock_io_mode+0x1>
    371e:	20 91 61 29 	lds	r18, 0x2961	; 0x802961 <sock_is_sending>
    3722:	30 91 62 29 	lds	r19, 0x2962	; 0x802962 <sock_is_sending+0x1>
    3726:	82 23       	and	r24, r18
    3728:	93 23       	and	r25, r19
    372a:	80 93 61 29 	sts	0x2961, r24	; 0x802961 <sock_is_sending>
    372e:	90 93 62 29 	sts	0x2962, r25	; 0x802962 <sock_is_sending+0x1>
    3732:	fe 01       	movw	r30, r28
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	ef 5a       	subi	r30, 0xAF	; 175
    373a:	f6 4d       	sbci	r31, 0xD6	; 214
    373c:	10 82       	st	Z, r1
    373e:	11 82       	std	Z+1, r1	; 0x01
    3740:	c7 5b       	subi	r28, 0xB7	; 183
    3742:	d6 4d       	sbci	r29, 0xD6	; 214
    3744:	18 82       	st	Y, r1
    3746:	8d ef       	ldi	r24, 0xFD	; 253
    3748:	d8 1a       	sub	r13, r24
    374a:	0d 2c       	mov	r0, r13
    374c:	00 0c       	add	r0, r0
    374e:	ee 08       	sbc	r14, r14
    3750:	ff 08       	sbc	r15, r15
    3752:	c7 01       	movw	r24, r14
    3754:	b6 01       	movw	r22, r12
    3756:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    375a:	81 11       	cpse	r24, r1
    375c:	fa cf       	rjmp	.-12     	; 0x3752 <close+0xca>
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	01 c0       	rjmp	.+2      	; 0x3764 <close+0xdc>
    3762:	8f ef       	ldi	r24, 0xFF	; 255
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	ff 90       	pop	r15
    376a:	ef 90       	pop	r14
    376c:	df 90       	pop	r13
    376e:	cf 90       	pop	r12
    3770:	bf 90       	pop	r11
    3772:	af 90       	pop	r10
    3774:	9f 90       	pop	r9
    3776:	8f 90       	pop	r8
    3778:	08 95       	ret

0000377a <socket>:
    377a:	4f 92       	push	r4
    377c:	5f 92       	push	r5
    377e:	6f 92       	push	r6
    3780:	7f 92       	push	r7
    3782:	af 92       	push	r10
    3784:	bf 92       	push	r11
    3786:	cf 92       	push	r12
    3788:	df 92       	push	r13
    378a:	ef 92       	push	r14
    378c:	ff 92       	push	r15
    378e:	0f 93       	push	r16
    3790:	1f 93       	push	r17
    3792:	cf 93       	push	r28
    3794:	df 93       	push	r29
    3796:	00 d0       	rcall	.+0      	; 0x3798 <socket+0x1e>
    3798:	1f 92       	push	r1
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	18 2f       	mov	r17, r24
    37a0:	56 2e       	mov	r5, r22
    37a2:	3a 01       	movw	r6, r20
    37a4:	02 2f       	mov	r16, r18
    37a6:	89 30       	cpi	r24, 0x09	; 9
    37a8:	08 f0       	brcs	.+2      	; 0x37ac <socket+0x32>
    37aa:	d3 c0       	rjmp	.+422    	; 0x3952 <socket+0x1d8>
    37ac:	21 e0       	ldi	r18, 0x01	; 1
    37ae:	62 17       	cp	r22, r18
    37b0:	39 f0       	breq	.+14     	; 0x37c0 <socket+0x46>
    37b2:	62 17       	cp	r22, r18
    37b4:	08 f4       	brcc	.+2      	; 0x37b8 <socket+0x3e>
    37b6:	cf c0       	rjmp	.+414    	; 0x3956 <socket+0x1dc>
    37b8:	84 e0       	ldi	r24, 0x04	; 4
    37ba:	86 17       	cp	r24, r22
    37bc:	b0 f4       	brcc	.+44     	; 0x37ea <socket+0x70>
    37be:	cb c0       	rjmp	.+406    	; 0x3956 <socket+0x1dc>
    37c0:	24 e0       	ldi	r18, 0x04	; 4
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	ae 01       	movw	r20, r28
    37c6:	4f 5f       	subi	r20, 0xFF	; 255
    37c8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ca:	60 e0       	ldi	r22, 0x00	; 0
    37cc:	7f e0       	ldi	r23, 0x0F	; 15
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	9a 81       	ldd	r25, Y+2	; 0x02
    37da:	ab 81       	ldd	r26, Y+3	; 0x03
    37dc:	bc 81       	ldd	r27, Y+4	; 0x04
    37de:	89 2b       	or	r24, r25
    37e0:	8a 2b       	or	r24, r26
    37e2:	8b 2b       	or	r24, r27
    37e4:	11 f4       	brne	.+4      	; 0x37ea <socket+0x70>
    37e6:	8d ef       	ldi	r24, 0xFD	; 253
    37e8:	bf c0       	rjmp	.+382    	; 0x3968 <socket+0x1ee>
    37ea:	02 fd       	sbrc	r16, 2
    37ec:	b6 c0       	rjmp	.+364    	; 0x395a <socket+0x1e0>
    37ee:	00 23       	and	r16, r16
    37f0:	a9 f0       	breq	.+42     	; 0x381c <socket+0xa2>
    37f2:	21 e0       	ldi	r18, 0x01	; 1
    37f4:	52 16       	cp	r5, r18
    37f6:	21 f0       	breq	.+8      	; 0x3800 <socket+0x86>
    37f8:	82 e0       	ldi	r24, 0x02	; 2
    37fa:	58 16       	cp	r5, r24
    37fc:	29 f0       	breq	.+10     	; 0x3808 <socket+0x8e>
    37fe:	0e c0       	rjmp	.+28     	; 0x381c <socket+0xa2>
    3800:	80 2f       	mov	r24, r16
    3802:	81 72       	andi	r24, 0x21	; 33
    3804:	59 f4       	brne	.+22     	; 0x381c <socket+0xa2>
    3806:	ab c0       	rjmp	.+342    	; 0x395e <socket+0x1e4>
    3808:	05 ff       	sbrs	r16, 5
    380a:	03 c0       	rjmp	.+6      	; 0x3812 <socket+0x98>
    380c:	00 23       	and	r16, r16
    380e:	34 f0       	brlt	.+12     	; 0x381c <socket+0xa2>
    3810:	a8 c0       	rjmp	.+336    	; 0x3962 <socket+0x1e8>
    3812:	04 ff       	sbrs	r16, 4
    3814:	03 c0       	rjmp	.+6      	; 0x381c <socket+0xa2>
    3816:	00 23       	and	r16, r16
    3818:	0c f0       	brlt	.+2      	; 0x381c <socket+0xa2>
    381a:	a5 c0       	rjmp	.+330    	; 0x3966 <socket+0x1ec>
    381c:	81 2f       	mov	r24, r17
    381e:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3822:	a1 2e       	mov	r10, r17
    3824:	b1 2c       	mov	r11, r1
    3826:	65 01       	movw	r12, r10
    3828:	cc 0c       	add	r12, r12
    382a:	dd 1c       	adc	r13, r13
    382c:	cc 0c       	add	r12, r12
    382e:	dd 1c       	adc	r13, r13
    3830:	2f ef       	ldi	r18, 0xFF	; 255
    3832:	c2 1a       	sub	r12, r18
    3834:	d2 0a       	sbc	r13, r18
    3836:	cc 0c       	add	r12, r12
    3838:	dd 1c       	adc	r13, r13
    383a:	cc 0c       	add	r12, r12
    383c:	dd 1c       	adc	r13, r13
    383e:	cc 0c       	add	r12, r12
    3840:	dd 1c       	adc	r13, r13
    3842:	40 2f       	mov	r20, r16
    3844:	40 7f       	andi	r20, 0xF0	; 240
    3846:	45 29       	or	r20, r5
    3848:	b6 01       	movw	r22, r12
    384a:	0d 2c       	mov	r0, r13
    384c:	00 0c       	add	r0, r0
    384e:	88 0b       	sbc	r24, r24
    3850:	99 0b       	sbc	r25, r25
    3852:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3856:	61 14       	cp	r6, r1
    3858:	71 04       	cpc	r7, r1
    385a:	a9 f4       	brne	.+42     	; 0x3886 <socket+0x10c>
    385c:	60 90 76 20 	lds	r6, 0x2076	; 0x802076 <sock_any_port>
    3860:	70 90 77 20 	lds	r7, 0x2077	; 0x802077 <sock_any_port+0x1>
    3864:	c3 01       	movw	r24, r6
    3866:	01 96       	adiw	r24, 0x01	; 1
    3868:	80 3f       	cpi	r24, 0xF0	; 240
    386a:	2f ef       	ldi	r18, 0xFF	; 255
    386c:	92 07       	cpc	r25, r18
    386e:	29 f0       	breq	.+10     	; 0x387a <socket+0x100>
    3870:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <sock_any_port>
    3874:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <sock_any_port+0x1>
    3878:	06 c0       	rjmp	.+12     	; 0x3886 <socket+0x10c>
    387a:	80 e0       	ldi	r24, 0x00	; 0
    387c:	90 ec       	ldi	r25, 0xC0	; 192
    387e:	80 93 76 20 	sts	0x2076, r24	; 0x802076 <sock_any_port>
    3882:	90 93 77 20 	sts	0x2077, r25	; 0x802077 <sock_any_port+0x1>
    3886:	b6 01       	movw	r22, r12
    3888:	7c 5f       	subi	r23, 0xFC	; 252
    388a:	07 2e       	mov	r0, r23
    388c:	00 0c       	add	r0, r0
    388e:	88 0b       	sbc	r24, r24
    3890:	99 0b       	sbc	r25, r25
    3892:	47 2d       	mov	r20, r7
    3894:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3898:	b6 01       	movw	r22, r12
    389a:	7b 5f       	subi	r23, 0xFB	; 251
    389c:	07 2e       	mov	r0, r23
    389e:	00 0c       	add	r0, r0
    38a0:	88 0b       	sbc	r24, r24
    38a2:	99 0b       	sbc	r25, r25
    38a4:	46 2d       	mov	r20, r6
    38a6:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    38aa:	26 01       	movw	r4, r12
    38ac:	53 94       	inc	r5
    38ae:	05 2c       	mov	r0, r5
    38b0:	00 0c       	add	r0, r0
    38b2:	66 08       	sbc	r6, r6
    38b4:	77 08       	sbc	r7, r7
    38b6:	41 e0       	ldi	r20, 0x01	; 1
    38b8:	c3 01       	movw	r24, r6
    38ba:	b2 01       	movw	r22, r4
    38bc:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    38c0:	c3 01       	movw	r24, r6
    38c2:	b2 01       	movw	r22, r4
    38c4:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    38c8:	81 11       	cpse	r24, r1
    38ca:	fa cf       	rjmp	.-12     	; 0x38c0 <socket+0x146>
    38cc:	81 e0       	ldi	r24, 0x01	; 1
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	01 2e       	mov	r0, r17
    38d2:	02 c0       	rjmp	.+4      	; 0x38d8 <socket+0x15e>
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	0a 94       	dec	r0
    38da:	e2 f7       	brpl	.-8      	; 0x38d4 <socket+0x15a>
    38dc:	80 95       	com	r24
    38de:	90 95       	com	r25
    38e0:	20 91 63 29 	lds	r18, 0x2963	; 0x802963 <sock_io_mode>
    38e4:	30 91 64 29 	lds	r19, 0x2964	; 0x802964 <sock_io_mode+0x1>
    38e8:	28 23       	and	r18, r24
    38ea:	39 23       	and	r19, r25
    38ec:	00 fb       	bst	r16, 0
    38ee:	ee 24       	eor	r14, r14
    38f0:	e0 f8       	bld	r14, 0
    38f2:	f1 2c       	mov	r15, r1
    38f4:	01 2e       	mov	r0, r17
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <socket+0x182>
    38f8:	ee 0c       	add	r14, r14
    38fa:	ff 1c       	adc	r15, r15
    38fc:	0a 94       	dec	r0
    38fe:	e2 f7       	brpl	.-8      	; 0x38f8 <socket+0x17e>
    3900:	e2 2a       	or	r14, r18
    3902:	f3 2a       	or	r15, r19
    3904:	e0 92 63 29 	sts	0x2963, r14	; 0x802963 <sock_io_mode>
    3908:	f0 92 64 29 	sts	0x2964, r15	; 0x802964 <sock_io_mode+0x1>
    390c:	20 91 61 29 	lds	r18, 0x2961	; 0x802961 <sock_is_sending>
    3910:	30 91 62 29 	lds	r19, 0x2962	; 0x802962 <sock_is_sending+0x1>
    3914:	82 23       	and	r24, r18
    3916:	93 23       	and	r25, r19
    3918:	80 93 61 29 	sts	0x2961, r24	; 0x802961 <sock_is_sending>
    391c:	90 93 62 29 	sts	0x2962, r25	; 0x802962 <sock_is_sending+0x1>
    3920:	f5 01       	movw	r30, r10
    3922:	ee 0f       	add	r30, r30
    3924:	ff 1f       	adc	r31, r31
    3926:	ef 5a       	subi	r30, 0xAF	; 175
    3928:	f6 4d       	sbci	r31, 0xD6	; 214
    392a:	10 82       	st	Z, r1
    392c:	11 82       	std	Z+1, r1	; 0x01
    392e:	f5 01       	movw	r30, r10
    3930:	e7 5b       	subi	r30, 0xB7	; 183
    3932:	f6 4d       	sbci	r31, 0xD6	; 214
    3934:	10 82       	st	Z, r1
    3936:	2d ef       	ldi	r18, 0xFD	; 253
    3938:	d2 1a       	sub	r13, r18
    393a:	0d 2c       	mov	r0, r13
    393c:	00 0c       	add	r0, r0
    393e:	ee 08       	sbc	r14, r14
    3940:	ff 08       	sbc	r15, r15
    3942:	c7 01       	movw	r24, r14
    3944:	b6 01       	movw	r22, r12
    3946:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    394a:	88 23       	and	r24, r24
    394c:	d1 f3       	breq	.-12     	; 0x3942 <socket+0x1c8>
    394e:	81 2f       	mov	r24, r17
    3950:	0b c0       	rjmp	.+22     	; 0x3968 <socket+0x1ee>
    3952:	8f ef       	ldi	r24, 0xFF	; 255
    3954:	09 c0       	rjmp	.+18     	; 0x3968 <socket+0x1ee>
    3956:	8b ef       	ldi	r24, 0xFB	; 251
    3958:	07 c0       	rjmp	.+14     	; 0x3968 <socket+0x1ee>
    395a:	8a ef       	ldi	r24, 0xFA	; 250
    395c:	05 c0       	rjmp	.+10     	; 0x3968 <socket+0x1ee>
    395e:	8a ef       	ldi	r24, 0xFA	; 250
    3960:	03 c0       	rjmp	.+6      	; 0x3968 <socket+0x1ee>
    3962:	8a ef       	ldi	r24, 0xFA	; 250
    3964:	01 c0       	rjmp	.+2      	; 0x3968 <socket+0x1ee>
    3966:	8a ef       	ldi	r24, 0xFA	; 250
    3968:	24 96       	adiw	r28, 0x04	; 4
    396a:	cd bf       	out	0x3d, r28	; 61
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	df 91       	pop	r29
    3970:	cf 91       	pop	r28
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	ff 90       	pop	r15
    3978:	ef 90       	pop	r14
    397a:	df 90       	pop	r13
    397c:	cf 90       	pop	r12
    397e:	bf 90       	pop	r11
    3980:	af 90       	pop	r10
    3982:	7f 90       	pop	r7
    3984:	6f 90       	pop	r6
    3986:	5f 90       	pop	r5
    3988:	4f 90       	pop	r4
    398a:	08 95       	ret

0000398c <listen>:
    398c:	8f 92       	push	r8
    398e:	9f 92       	push	r9
    3990:	af 92       	push	r10
    3992:	bf 92       	push	r11
    3994:	cf 92       	push	r12
    3996:	df 92       	push	r13
    3998:	ef 92       	push	r14
    399a:	ff 92       	push	r15
    399c:	cf 93       	push	r28
    399e:	89 30       	cpi	r24, 0x09	; 9
    39a0:	08 f0       	brcs	.+2      	; 0x39a4 <listen+0x18>
    39a2:	45 c0       	rjmp	.+138    	; 0x3a2e <listen+0xa2>
    39a4:	c8 2f       	mov	r28, r24
    39a6:	c8 2e       	mov	r12, r24
    39a8:	d1 2c       	mov	r13, r1
    39aa:	cc 0c       	add	r12, r12
    39ac:	dd 1c       	adc	r13, r13
    39ae:	cc 0c       	add	r12, r12
    39b0:	dd 1c       	adc	r13, r13
    39b2:	8f ef       	ldi	r24, 0xFF	; 255
    39b4:	c8 1a       	sub	r12, r24
    39b6:	d8 0a       	sbc	r13, r24
    39b8:	cc 0c       	add	r12, r12
    39ba:	dd 1c       	adc	r13, r13
    39bc:	cc 0c       	add	r12, r12
    39be:	dd 1c       	adc	r13, r13
    39c0:	cc 0c       	add	r12, r12
    39c2:	dd 1c       	adc	r13, r13
    39c4:	b6 01       	movw	r22, r12
    39c6:	0d 2c       	mov	r0, r13
    39c8:	00 0c       	add	r0, r0
    39ca:	88 0b       	sbc	r24, r24
    39cc:	99 0b       	sbc	r25, r25
    39ce:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    39d2:	8f 70       	andi	r24, 0x0F	; 15
    39d4:	81 30       	cpi	r24, 0x01	; 1
    39d6:	69 f5       	brne	.+90     	; 0x3a32 <listen+0xa6>
    39d8:	46 01       	movw	r8, r12
    39da:	8d ef       	ldi	r24, 0xFD	; 253
    39dc:	98 1a       	sub	r9, r24
    39de:	09 2c       	mov	r0, r9
    39e0:	00 0c       	add	r0, r0
    39e2:	aa 08       	sbc	r10, r10
    39e4:	bb 08       	sbc	r11, r11
    39e6:	c5 01       	movw	r24, r10
    39e8:	b4 01       	movw	r22, r8
    39ea:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    39ee:	83 31       	cpi	r24, 0x13	; 19
    39f0:	11 f5       	brne	.+68     	; 0x3a36 <listen+0xaa>
    39f2:	d3 94       	inc	r13
    39f4:	0d 2c       	mov	r0, r13
    39f6:	00 0c       	add	r0, r0
    39f8:	ee 08       	sbc	r14, r14
    39fa:	ff 08       	sbc	r15, r15
    39fc:	42 e0       	ldi	r20, 0x02	; 2
    39fe:	c7 01       	movw	r24, r14
    3a00:	b6 01       	movw	r22, r12
    3a02:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3a06:	c7 01       	movw	r24, r14
    3a08:	b6 01       	movw	r22, r12
    3a0a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3a0e:	81 11       	cpse	r24, r1
    3a10:	fa cf       	rjmp	.-12     	; 0x3a06 <listen+0x7a>
    3a12:	05 c0       	rjmp	.+10     	; 0x3a1e <listen+0x92>
    3a14:	8c 2f       	mov	r24, r28
    3a16:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3a1a:	8c ef       	ldi	r24, 0xFC	; 252
    3a1c:	0d c0       	rjmp	.+26     	; 0x3a38 <listen+0xac>
    3a1e:	c5 01       	movw	r24, r10
    3a20:	b4 01       	movw	r22, r8
    3a22:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3a26:	84 31       	cpi	r24, 0x14	; 20
    3a28:	a9 f7       	brne	.-22     	; 0x3a14 <listen+0x88>
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	05 c0       	rjmp	.+10     	; 0x3a38 <listen+0xac>
    3a2e:	8f ef       	ldi	r24, 0xFF	; 255
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <listen+0xac>
    3a32:	8b ef       	ldi	r24, 0xFB	; 251
    3a34:	01 c0       	rjmp	.+2      	; 0x3a38 <listen+0xac>
    3a36:	8d ef       	ldi	r24, 0xFD	; 253
    3a38:	cf 91       	pop	r28
    3a3a:	ff 90       	pop	r15
    3a3c:	ef 90       	pop	r14
    3a3e:	df 90       	pop	r13
    3a40:	cf 90       	pop	r12
    3a42:	bf 90       	pop	r11
    3a44:	af 90       	pop	r10
    3a46:	9f 90       	pop	r9
    3a48:	8f 90       	pop	r8
    3a4a:	08 95       	ret

00003a4c <disconnect>:
    3a4c:	8f 92       	push	r8
    3a4e:	9f 92       	push	r9
    3a50:	af 92       	push	r10
    3a52:	bf 92       	push	r11
    3a54:	cf 92       	push	r12
    3a56:	df 92       	push	r13
    3a58:	ef 92       	push	r14
    3a5a:	ff 92       	push	r15
    3a5c:	1f 93       	push	r17
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	89 30       	cpi	r24, 0x09	; 9
    3a64:	08 f0       	brcs	.+2      	; 0x3a68 <disconnect+0x1c>
    3a66:	69 c0       	rjmp	.+210    	; 0x3b3a <disconnect+0xee>
    3a68:	18 2f       	mov	r17, r24
    3a6a:	c8 2f       	mov	r28, r24
    3a6c:	d0 e0       	ldi	r29, 0x00	; 0
    3a6e:	cc 0f       	add	r28, r28
    3a70:	dd 1f       	adc	r29, r29
    3a72:	cc 0f       	add	r28, r28
    3a74:	dd 1f       	adc	r29, r29
    3a76:	21 96       	adiw	r28, 0x01	; 1
    3a78:	cc 0f       	add	r28, r28
    3a7a:	dd 1f       	adc	r29, r29
    3a7c:	cc 0f       	add	r28, r28
    3a7e:	dd 1f       	adc	r29, r29
    3a80:	cc 0f       	add	r28, r28
    3a82:	dd 1f       	adc	r29, r29
    3a84:	be 01       	movw	r22, r28
    3a86:	0d 2e       	mov	r0, r29
    3a88:	00 0c       	add	r0, r0
    3a8a:	88 0b       	sbc	r24, r24
    3a8c:	99 0b       	sbc	r25, r25
    3a8e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3a92:	8f 70       	andi	r24, 0x0F	; 15
    3a94:	81 30       	cpi	r24, 0x01	; 1
    3a96:	09 f0       	breq	.+2      	; 0x3a9a <disconnect+0x4e>
    3a98:	52 c0       	rjmp	.+164    	; 0x3b3e <disconnect+0xf2>
    3a9a:	6e 01       	movw	r12, r28
    3a9c:	d3 94       	inc	r13
    3a9e:	0d 2c       	mov	r0, r13
    3aa0:	00 0c       	add	r0, r0
    3aa2:	ee 08       	sbc	r14, r14
    3aa4:	ff 08       	sbc	r15, r15
    3aa6:	48 e0       	ldi	r20, 0x08	; 8
    3aa8:	c7 01       	movw	r24, r14
    3aaa:	b6 01       	movw	r22, r12
    3aac:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3ab0:	c7 01       	movw	r24, r14
    3ab2:	b6 01       	movw	r22, r12
    3ab4:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3ab8:	81 11       	cpse	r24, r1
    3aba:	fa cf       	rjmp	.-12     	; 0x3ab0 <disconnect+0x64>
    3abc:	81 e0       	ldi	r24, 0x01	; 1
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	01 2e       	mov	r0, r17
    3ac2:	02 c0       	rjmp	.+4      	; 0x3ac8 <disconnect+0x7c>
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	0a 94       	dec	r0
    3aca:	e2 f7       	brpl	.-8      	; 0x3ac4 <disconnect+0x78>
    3acc:	9c 01       	movw	r18, r24
    3ace:	20 95       	com	r18
    3ad0:	30 95       	com	r19
    3ad2:	40 91 61 29 	lds	r20, 0x2961	; 0x802961 <sock_is_sending>
    3ad6:	50 91 62 29 	lds	r21, 0x2962	; 0x802962 <sock_is_sending+0x1>
    3ada:	24 23       	and	r18, r20
    3adc:	35 23       	and	r19, r21
    3ade:	20 93 61 29 	sts	0x2961, r18	; 0x802961 <sock_is_sending>
    3ae2:	30 93 62 29 	sts	0x2962, r19	; 0x802962 <sock_is_sending+0x1>
    3ae6:	20 91 63 29 	lds	r18, 0x2963	; 0x802963 <sock_io_mode>
    3aea:	30 91 64 29 	lds	r19, 0x2964	; 0x802964 <sock_io_mode+0x1>
    3aee:	82 23       	and	r24, r18
    3af0:	93 23       	and	r25, r19
    3af2:	89 2b       	or	r24, r25
    3af4:	31 f5       	brne	.+76     	; 0x3b42 <disconnect+0xf6>
    3af6:	4e 01       	movw	r8, r28
    3af8:	8d ef       	ldi	r24, 0xFD	; 253
    3afa:	98 1a       	sub	r9, r24
    3afc:	09 2c       	mov	r0, r9
    3afe:	00 0c       	add	r0, r0
    3b00:	aa 08       	sbc	r10, r10
    3b02:	bb 08       	sbc	r11, r11
    3b04:	6e 01       	movw	r12, r28
    3b06:	8e ef       	ldi	r24, 0xFE	; 254
    3b08:	d8 1a       	sub	r13, r24
    3b0a:	0d 2c       	mov	r0, r13
    3b0c:	00 0c       	add	r0, r0
    3b0e:	ee 08       	sbc	r14, r14
    3b10:	ff 08       	sbc	r15, r15
    3b12:	0b c0       	rjmp	.+22     	; 0x3b2a <disconnect+0xde>
    3b14:	c7 01       	movw	r24, r14
    3b16:	b6 01       	movw	r22, r12
    3b18:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3b1c:	83 ff       	sbrs	r24, 3
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <disconnect+0xde>
    3b20:	81 2f       	mov	r24, r17
    3b22:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3b26:	83 ef       	ldi	r24, 0xF3	; 243
    3b28:	0d c0       	rjmp	.+26     	; 0x3b44 <disconnect+0xf8>
    3b2a:	c5 01       	movw	r24, r10
    3b2c:	b4 01       	movw	r22, r8
    3b2e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3b32:	81 11       	cpse	r24, r1
    3b34:	ef cf       	rjmp	.-34     	; 0x3b14 <disconnect+0xc8>
    3b36:	81 e0       	ldi	r24, 0x01	; 1
    3b38:	05 c0       	rjmp	.+10     	; 0x3b44 <disconnect+0xf8>
    3b3a:	8f ef       	ldi	r24, 0xFF	; 255
    3b3c:	03 c0       	rjmp	.+6      	; 0x3b44 <disconnect+0xf8>
    3b3e:	8b ef       	ldi	r24, 0xFB	; 251
    3b40:	01 c0       	rjmp	.+2      	; 0x3b44 <disconnect+0xf8>
    3b42:	80 e0       	ldi	r24, 0x00	; 0
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	ff 90       	pop	r15
    3b4c:	ef 90       	pop	r14
    3b4e:	df 90       	pop	r13
    3b50:	cf 90       	pop	r12
    3b52:	bf 90       	pop	r11
    3b54:	af 90       	pop	r10
    3b56:	9f 90       	pop	r9
    3b58:	8f 90       	pop	r8
    3b5a:	08 95       	ret

00003b5c <send>:
    3b5c:	2f 92       	push	r2
    3b5e:	3f 92       	push	r3
    3b60:	4f 92       	push	r4
    3b62:	5f 92       	push	r5
    3b64:	6f 92       	push	r6
    3b66:	7f 92       	push	r7
    3b68:	8f 92       	push	r8
    3b6a:	9f 92       	push	r9
    3b6c:	af 92       	push	r10
    3b6e:	bf 92       	push	r11
    3b70:	cf 92       	push	r12
    3b72:	df 92       	push	r13
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	1f 93       	push	r17
    3b7a:	cf 93       	push	r28
    3b7c:	df 93       	push	r29
    3b7e:	00 d0       	rcall	.+0      	; 0x3b80 <send+0x24>
    3b80:	1f 92       	push	r1
    3b82:	cd b7       	in	r28, 0x3d	; 61
    3b84:	de b7       	in	r29, 0x3e	; 62
    3b86:	89 30       	cpi	r24, 0x09	; 9
    3b88:	08 f0       	brcs	.+2      	; 0x3b8c <send+0x30>
    3b8a:	cf c0       	rjmp	.+414    	; 0x3d2a <send+0x1ce>
    3b8c:	6a 01       	movw	r12, r20
    3b8e:	1b 01       	movw	r2, r22
    3b90:	18 2f       	mov	r17, r24
    3b92:	e8 2e       	mov	r14, r24
    3b94:	f1 2c       	mov	r15, r1
    3b96:	ee 0c       	add	r14, r14
    3b98:	ff 1c       	adc	r15, r15
    3b9a:	ee 0c       	add	r14, r14
    3b9c:	ff 1c       	adc	r15, r15
    3b9e:	2f ef       	ldi	r18, 0xFF	; 255
    3ba0:	e2 1a       	sub	r14, r18
    3ba2:	f2 0a       	sbc	r15, r18
    3ba4:	ee 0c       	add	r14, r14
    3ba6:	ff 1c       	adc	r15, r15
    3ba8:	ee 0c       	add	r14, r14
    3baa:	ff 1c       	adc	r15, r15
    3bac:	ee 0c       	add	r14, r14
    3bae:	ff 1c       	adc	r15, r15
    3bb0:	b7 01       	movw	r22, r14
    3bb2:	0f 2c       	mov	r0, r15
    3bb4:	00 0c       	add	r0, r0
    3bb6:	88 0b       	sbc	r24, r24
    3bb8:	99 0b       	sbc	r25, r25
    3bba:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3bbe:	8f 70       	andi	r24, 0x0F	; 15
    3bc0:	81 30       	cpi	r24, 0x01	; 1
    3bc2:	09 f0       	breq	.+2      	; 0x3bc6 <send+0x6a>
    3bc4:	b6 c0       	rjmp	.+364    	; 0x3d32 <send+0x1d6>
    3bc6:	c1 14       	cp	r12, r1
    3bc8:	d1 04       	cpc	r13, r1
    3bca:	09 f4       	brne	.+2      	; 0x3bce <send+0x72>
    3bcc:	b7 c0       	rjmp	.+366    	; 0x3d3c <send+0x1e0>
    3bce:	27 01       	movw	r4, r14
    3bd0:	3d ef       	ldi	r19, 0xFD	; 253
    3bd2:	53 1a       	sub	r5, r19
    3bd4:	05 2c       	mov	r0, r5
    3bd6:	00 0c       	add	r0, r0
    3bd8:	66 08       	sbc	r6, r6
    3bda:	77 08       	sbc	r7, r7
    3bdc:	c3 01       	movw	r24, r6
    3bde:	b2 01       	movw	r22, r4
    3be0:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3be4:	87 31       	cpi	r24, 0x17	; 23
    3be6:	19 f0       	breq	.+6      	; 0x3bee <send+0x92>
    3be8:	8c 31       	cpi	r24, 0x1C	; 28
    3bea:	09 f0       	breq	.+2      	; 0x3bee <send+0x92>
    3bec:	ac c0       	rjmp	.+344    	; 0x3d46 <send+0x1ea>
    3bee:	81 e0       	ldi	r24, 0x01	; 1
    3bf0:	90 e0       	ldi	r25, 0x00	; 0
    3bf2:	4c 01       	movw	r8, r24
    3bf4:	01 2e       	mov	r0, r17
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <send+0xa0>
    3bf8:	88 0c       	add	r8, r8
    3bfa:	99 1c       	adc	r9, r9
    3bfc:	0a 94       	dec	r0
    3bfe:	e2 f7       	brpl	.-8      	; 0x3bf8 <send+0x9c>
    3c00:	54 01       	movw	r10, r8
    3c02:	80 91 61 29 	lds	r24, 0x2961	; 0x802961 <sock_is_sending>
    3c06:	90 91 62 29 	lds	r25, 0x2962	; 0x802962 <sock_is_sending+0x1>
    3c0a:	88 21       	and	r24, r8
    3c0c:	99 21       	and	r25, r9
    3c0e:	89 2b       	or	r24, r25
    3c10:	79 f1       	breq	.+94     	; 0x3c70 <send+0x114>
    3c12:	c7 01       	movw	r24, r14
    3c14:	9e 5f       	subi	r25, 0xFE	; 254
    3c16:	9c 01       	movw	r18, r24
    3c18:	99 0f       	add	r25, r25
    3c1a:	44 0b       	sbc	r20, r20
    3c1c:	55 0b       	sbc	r21, r21
    3c1e:	29 83       	std	Y+1, r18	; 0x01
    3c20:	3a 83       	std	Y+2, r19	; 0x02
    3c22:	4b 83       	std	Y+3, r20	; 0x03
    3c24:	5c 83       	std	Y+4, r21	; 0x04
    3c26:	ca 01       	movw	r24, r20
    3c28:	b9 01       	movw	r22, r18
    3c2a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3c2e:	84 ff       	sbrs	r24, 4
    3c30:	15 c0       	rjmp	.+42     	; 0x3c5c <send+0x100>
    3c32:	40 e1       	ldi	r20, 0x10	; 16
    3c34:	69 81       	ldd	r22, Y+1	; 0x01
    3c36:	7a 81       	ldd	r23, Y+2	; 0x02
    3c38:	8b 81       	ldd	r24, Y+3	; 0x03
    3c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c3c:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3c40:	20 91 61 29 	lds	r18, 0x2961	; 0x802961 <sock_is_sending>
    3c44:	30 91 62 29 	lds	r19, 0x2962	; 0x802962 <sock_is_sending+0x1>
    3c48:	c4 01       	movw	r24, r8
    3c4a:	80 95       	com	r24
    3c4c:	90 95       	com	r25
    3c4e:	82 23       	and	r24, r18
    3c50:	93 23       	and	r25, r19
    3c52:	80 93 61 29 	sts	0x2961, r24	; 0x802961 <sock_is_sending>
    3c56:	90 93 62 29 	sts	0x2962, r25	; 0x802962 <sock_is_sending+0x1>
    3c5a:	0a c0       	rjmp	.+20     	; 0x3c70 <send+0x114>
    3c5c:	83 ff       	sbrs	r24, 3
    3c5e:	78 c0       	rjmp	.+240    	; 0x3d50 <send+0x1f4>
    3c60:	81 2f       	mov	r24, r17
    3c62:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3c66:	63 ef       	ldi	r22, 0xF3	; 243
    3c68:	7f ef       	ldi	r23, 0xFF	; 255
    3c6a:	8f ef       	ldi	r24, 0xFF	; 255
    3c6c:	9f ef       	ldi	r25, 0xFF	; 255
    3c6e:	77 c0       	rjmp	.+238    	; 0x3d5e <send+0x202>
    3c70:	b7 01       	movw	r22, r14
    3c72:	71 5e       	subi	r23, 0xE1	; 225
    3c74:	07 2e       	mov	r0, r23
    3c76:	00 0c       	add	r0, r0
    3c78:	88 0b       	sbc	r24, r24
    3c7a:	99 0b       	sbc	r25, r25
    3c7c:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	98 2f       	mov	r25, r24
    3c84:	88 27       	eor	r24, r24
    3c86:	99 0f       	add	r25, r25
    3c88:	99 0f       	add	r25, r25
    3c8a:	8c 15       	cp	r24, r12
    3c8c:	9d 05       	cpc	r25, r13
    3c8e:	08 f4       	brcc	.+2      	; 0x3c92 <send+0x136>
    3c90:	6c 01       	movw	r12, r24
    3c92:	81 2f       	mov	r24, r17
    3c94:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <getSn_TX_FSR>
    3c98:	89 83       	std	Y+1, r24	; 0x01
    3c9a:	9a 83       	std	Y+2, r25	; 0x02
    3c9c:	c3 01       	movw	r24, r6
    3c9e:	b2 01       	movw	r22, r4
    3ca0:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3ca4:	87 31       	cpi	r24, 0x17	; 23
    3ca6:	51 f0       	breq	.+20     	; 0x3cbc <send+0x160>
    3ca8:	8c 31       	cpi	r24, 0x1C	; 28
    3caa:	41 f0       	breq	.+16     	; 0x3cbc <send+0x160>
    3cac:	81 2f       	mov	r24, r17
    3cae:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3cb2:	69 ef       	ldi	r22, 0xF9	; 249
    3cb4:	7f ef       	ldi	r23, 0xFF	; 255
    3cb6:	8f ef       	ldi	r24, 0xFF	; 255
    3cb8:	9f ef       	ldi	r25, 0xFF	; 255
    3cba:	51 c0       	rjmp	.+162    	; 0x3d5e <send+0x202>
    3cbc:	80 91 63 29 	lds	r24, 0x2963	; 0x802963 <sock_io_mode>
    3cc0:	90 91 64 29 	lds	r25, 0x2964	; 0x802964 <sock_io_mode+0x1>
    3cc4:	8a 21       	and	r24, r10
    3cc6:	9b 21       	and	r25, r11
    3cc8:	89 2b       	or	r24, r25
    3cca:	31 f0       	breq	.+12     	; 0x3cd8 <send+0x17c>
    3ccc:	49 81       	ldd	r20, Y+1	; 0x01
    3cce:	5a 81       	ldd	r21, Y+2	; 0x02
    3cd0:	4c 15       	cp	r20, r12
    3cd2:	5d 05       	cpc	r21, r13
    3cd4:	30 f4       	brcc	.+12     	; 0x3ce2 <send+0x186>
    3cd6:	40 c0       	rjmp	.+128    	; 0x3d58 <send+0x1fc>
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	8c 15       	cp	r24, r12
    3cde:	9d 05       	cpc	r25, r13
    3ce0:	c0 f2       	brcs	.-80     	; 0x3c92 <send+0x136>
    3ce2:	a6 01       	movw	r20, r12
    3ce4:	b1 01       	movw	r22, r2
    3ce6:	81 2f       	mov	r24, r17
    3ce8:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <wiz_send_data>
    3cec:	27 01       	movw	r4, r14
    3cee:	53 94       	inc	r5
    3cf0:	05 2c       	mov	r0, r5
    3cf2:	00 0c       	add	r0, r0
    3cf4:	66 08       	sbc	r6, r6
    3cf6:	77 08       	sbc	r7, r7
    3cf8:	40 e2       	ldi	r20, 0x20	; 32
    3cfa:	c3 01       	movw	r24, r6
    3cfc:	b2 01       	movw	r22, r4
    3cfe:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3d02:	c3 01       	movw	r24, r6
    3d04:	b2 01       	movw	r22, r4
    3d06:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	fa cf       	rjmp	.-12     	; 0x3d02 <send+0x1a6>
    3d0e:	80 91 61 29 	lds	r24, 0x2961	; 0x802961 <sock_is_sending>
    3d12:	90 91 62 29 	lds	r25, 0x2962	; 0x802962 <sock_is_sending+0x1>
    3d16:	88 2a       	or	r8, r24
    3d18:	99 2a       	or	r9, r25
    3d1a:	80 92 61 29 	sts	0x2961, r8	; 0x802961 <sock_is_sending>
    3d1e:	90 92 62 29 	sts	0x2962, r9	; 0x802962 <sock_is_sending+0x1>
    3d22:	b6 01       	movw	r22, r12
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	1a c0       	rjmp	.+52     	; 0x3d5e <send+0x202>
    3d2a:	6f ef       	ldi	r22, 0xFF	; 255
    3d2c:	7f ef       	ldi	r23, 0xFF	; 255
    3d2e:	cb 01       	movw	r24, r22
    3d30:	16 c0       	rjmp	.+44     	; 0x3d5e <send+0x202>
    3d32:	6b ef       	ldi	r22, 0xFB	; 251
    3d34:	7f ef       	ldi	r23, 0xFF	; 255
    3d36:	8f ef       	ldi	r24, 0xFF	; 255
    3d38:	9f ef       	ldi	r25, 0xFF	; 255
    3d3a:	11 c0       	rjmp	.+34     	; 0x3d5e <send+0x202>
    3d3c:	62 ef       	ldi	r22, 0xF2	; 242
    3d3e:	7f ef       	ldi	r23, 0xFF	; 255
    3d40:	8f ef       	ldi	r24, 0xFF	; 255
    3d42:	9f ef       	ldi	r25, 0xFF	; 255
    3d44:	0c c0       	rjmp	.+24     	; 0x3d5e <send+0x202>
    3d46:	69 ef       	ldi	r22, 0xF9	; 249
    3d48:	7f ef       	ldi	r23, 0xFF	; 255
    3d4a:	8f ef       	ldi	r24, 0xFF	; 255
    3d4c:	9f ef       	ldi	r25, 0xFF	; 255
    3d4e:	07 c0       	rjmp	.+14     	; 0x3d5e <send+0x202>
    3d50:	60 e0       	ldi	r22, 0x00	; 0
    3d52:	70 e0       	ldi	r23, 0x00	; 0
    3d54:	cb 01       	movw	r24, r22
    3d56:	03 c0       	rjmp	.+6      	; 0x3d5e <send+0x202>
    3d58:	60 e0       	ldi	r22, 0x00	; 0
    3d5a:	70 e0       	ldi	r23, 0x00	; 0
    3d5c:	cb 01       	movw	r24, r22
    3d5e:	24 96       	adiw	r28, 0x04	; 4
    3d60:	cd bf       	out	0x3d, r28	; 61
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	df 91       	pop	r29
    3d66:	cf 91       	pop	r28
    3d68:	1f 91       	pop	r17
    3d6a:	ff 90       	pop	r15
    3d6c:	ef 90       	pop	r14
    3d6e:	df 90       	pop	r13
    3d70:	cf 90       	pop	r12
    3d72:	bf 90       	pop	r11
    3d74:	af 90       	pop	r10
    3d76:	9f 90       	pop	r9
    3d78:	8f 90       	pop	r8
    3d7a:	7f 90       	pop	r7
    3d7c:	6f 90       	pop	r6
    3d7e:	5f 90       	pop	r5
    3d80:	4f 90       	pop	r4
    3d82:	3f 90       	pop	r3
    3d84:	2f 90       	pop	r2
    3d86:	08 95       	ret

00003d88 <recv>:
    3d88:	2f 92       	push	r2
    3d8a:	3f 92       	push	r3
    3d8c:	4f 92       	push	r4
    3d8e:	5f 92       	push	r5
    3d90:	6f 92       	push	r6
    3d92:	7f 92       	push	r7
    3d94:	8f 92       	push	r8
    3d96:	9f 92       	push	r9
    3d98:	af 92       	push	r10
    3d9a:	bf 92       	push	r11
    3d9c:	cf 92       	push	r12
    3d9e:	df 92       	push	r13
    3da0:	ef 92       	push	r14
    3da2:	ff 92       	push	r15
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	cf 93       	push	r28
    3daa:	df 93       	push	r29
    3dac:	00 d0       	rcall	.+0      	; 0x3dae <recv+0x26>
    3dae:	1f 92       	push	r1
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
    3db4:	89 30       	cpi	r24, 0x09	; 9
    3db6:	08 f0       	brcs	.+2      	; 0x3dba <recv+0x32>
    3db8:	b3 c0       	rjmp	.+358    	; 0x3f20 <recv+0x198>
    3dba:	6a 01       	movw	r12, r20
    3dbc:	69 83       	std	Y+1, r22	; 0x01
    3dbe:	7a 83       	std	Y+2, r23	; 0x02
    3dc0:	38 2e       	mov	r3, r24
    3dc2:	08 2f       	mov	r16, r24
    3dc4:	10 e0       	ldi	r17, 0x00	; 0
    3dc6:	00 0f       	add	r16, r16
    3dc8:	11 1f       	adc	r17, r17
    3dca:	00 0f       	add	r16, r16
    3dcc:	11 1f       	adc	r17, r17
    3dce:	0f 5f       	subi	r16, 0xFF	; 255
    3dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd2:	00 0f       	add	r16, r16
    3dd4:	11 1f       	adc	r17, r17
    3dd6:	00 0f       	add	r16, r16
    3dd8:	11 1f       	adc	r17, r17
    3dda:	00 0f       	add	r16, r16
    3ddc:	11 1f       	adc	r17, r17
    3dde:	b8 01       	movw	r22, r16
    3de0:	01 2e       	mov	r0, r17
    3de2:	00 0c       	add	r0, r0
    3de4:	88 0b       	sbc	r24, r24
    3de6:	99 0b       	sbc	r25, r25
    3de8:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3dec:	8f 70       	andi	r24, 0x0F	; 15
    3dee:	81 30       	cpi	r24, 0x01	; 1
    3df0:	09 f0       	breq	.+2      	; 0x3df4 <recv+0x6c>
    3df2:	9a c0       	rjmp	.+308    	; 0x3f28 <recv+0x1a0>
    3df4:	c1 14       	cp	r12, r1
    3df6:	d1 04       	cpc	r13, r1
    3df8:	09 f4       	brne	.+2      	; 0x3dfc <recv+0x74>
    3dfa:	9b c0       	rjmp	.+310    	; 0x3f32 <recv+0x1aa>
    3dfc:	b8 01       	movw	r22, r16
    3dfe:	72 5e       	subi	r23, 0xE2	; 226
    3e00:	07 2e       	mov	r0, r23
    3e02:	00 0c       	add	r0, r0
    3e04:	88 0b       	sbc	r24, r24
    3e06:	99 0b       	sbc	r25, r25
    3e08:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3e0c:	28 2e       	mov	r2, r24
    3e0e:	81 e0       	ldi	r24, 0x01	; 1
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	7c 01       	movw	r14, r24
    3e14:	03 2c       	mov	r0, r3
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <recv+0x94>
    3e18:	ee 0c       	add	r14, r14
    3e1a:	ff 1c       	adc	r15, r15
    3e1c:	0a 94       	dec	r0
    3e1e:	e2 f7       	brpl	.-8      	; 0x3e18 <recv+0x90>
    3e20:	48 01       	movw	r8, r16
    3e22:	2d ef       	ldi	r18, 0xFD	; 253
    3e24:	92 1a       	sub	r9, r18
    3e26:	09 2c       	mov	r0, r9
    3e28:	00 0c       	add	r0, r0
    3e2a:	aa 08       	sbc	r10, r10
    3e2c:	bb 08       	sbc	r11, r11
    3e2e:	28 01       	movw	r4, r16
    3e30:	31 ee       	ldi	r19, 0xE1	; 225
    3e32:	53 1a       	sub	r5, r19
    3e34:	05 2c       	mov	r0, r5
    3e36:	00 0c       	add	r0, r0
    3e38:	66 08       	sbc	r6, r6
    3e3a:	77 08       	sbc	r7, r7
    3e3c:	83 2d       	mov	r24, r3
    3e3e:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <getSn_RX_RSR>
    3e42:	8b 83       	std	Y+3, r24	; 0x03
    3e44:	9c 83       	std	Y+4, r25	; 0x04
    3e46:	c5 01       	movw	r24, r10
    3e48:	b4 01       	movw	r22, r8
    3e4a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3e4e:	87 31       	cpi	r24, 0x17	; 23
    3e50:	51 f1       	breq	.+84     	; 0x3ea6 <recv+0x11e>
    3e52:	8c 31       	cpi	r24, 0x1C	; 28
    3e54:	01 f5       	brne	.+64     	; 0x3e96 <recv+0x10e>
    3e56:	8b 81       	ldd	r24, Y+3	; 0x03
    3e58:	9c 81       	ldd	r25, Y+4	; 0x04
    3e5a:	89 2b       	or	r24, r25
    3e5c:	b1 f5       	brne	.+108    	; 0x3eca <recv+0x142>
    3e5e:	83 2d       	mov	r24, r3
    3e60:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <getSn_TX_FSR>
    3e64:	8b 83       	std	Y+3, r24	; 0x03
    3e66:	9c 83       	std	Y+4, r25	; 0x04
    3e68:	c3 01       	movw	r24, r6
    3e6a:	b2 01       	movw	r22, r4
    3e6c:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	98 2f       	mov	r25, r24
    3e74:	88 27       	eor	r24, r24
    3e76:	99 0f       	add	r25, r25
    3e78:	99 0f       	add	r25, r25
    3e7a:	2b 81       	ldd	r18, Y+3	; 0x03
    3e7c:	3c 81       	ldd	r19, Y+4	; 0x04
    3e7e:	28 17       	cp	r18, r24
    3e80:	39 07       	cpc	r19, r25
    3e82:	09 f0       	breq	.+2      	; 0x3e86 <recv+0xfe>
    3e84:	63 c0       	rjmp	.+198    	; 0x3f4c <recv+0x1c4>
    3e86:	83 2d       	mov	r24, r3
    3e88:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3e8c:	69 ef       	ldi	r22, 0xF9	; 249
    3e8e:	7f ef       	ldi	r23, 0xFF	; 255
    3e90:	8f ef       	ldi	r24, 0xFF	; 255
    3e92:	9f ef       	ldi	r25, 0xFF	; 255
    3e94:	65 c0       	rjmp	.+202    	; 0x3f60 <recv+0x1d8>
    3e96:	83 2d       	mov	r24, r3
    3e98:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    3e9c:	69 ef       	ldi	r22, 0xF9	; 249
    3e9e:	7f ef       	ldi	r23, 0xFF	; 255
    3ea0:	8f ef       	ldi	r24, 0xFF	; 255
    3ea2:	9f ef       	ldi	r25, 0xFF	; 255
    3ea4:	5d c0       	rjmp	.+186    	; 0x3f60 <recv+0x1d8>
    3ea6:	80 91 63 29 	lds	r24, 0x2963	; 0x802963 <sock_io_mode>
    3eaa:	90 91 64 29 	lds	r25, 0x2964	; 0x802964 <sock_io_mode+0x1>
    3eae:	8e 21       	and	r24, r14
    3eb0:	9f 21       	and	r25, r15
    3eb2:	89 2b       	or	r24, r25
    3eb4:	29 f0       	breq	.+10     	; 0x3ec0 <recv+0x138>
    3eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eba:	89 2b       	or	r24, r25
    3ebc:	31 f4       	brne	.+12     	; 0x3eca <recv+0x142>
    3ebe:	3e c0       	rjmp	.+124    	; 0x3f3c <recv+0x1b4>
    3ec0:	2b 81       	ldd	r18, Y+3	; 0x03
    3ec2:	3c 81       	ldd	r19, Y+4	; 0x04
    3ec4:	23 2b       	or	r18, r19
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <recv+0x142>
    3ec8:	b9 cf       	rjmp	.-142    	; 0x3e3c <recv+0xb4>
    3eca:	82 2d       	mov	r24, r2
    3ecc:	90 e0       	ldi	r25, 0x00	; 0
    3ece:	98 2f       	mov	r25, r24
    3ed0:	88 27       	eor	r24, r24
    3ed2:	99 0f       	add	r25, r25
    3ed4:	99 0f       	add	r25, r25
    3ed6:	8c 15       	cp	r24, r12
    3ed8:	9d 05       	cpc	r25, r13
    3eda:	08 f4       	brcc	.+2      	; 0x3ede <recv+0x156>
    3edc:	6c 01       	movw	r12, r24
    3ede:	8b 81       	ldd	r24, Y+3	; 0x03
    3ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    3ee2:	8c 15       	cp	r24, r12
    3ee4:	9d 05       	cpc	r25, r13
    3ee6:	08 f4       	brcc	.+2      	; 0x3eea <recv+0x162>
    3ee8:	6c 01       	movw	r12, r24
    3eea:	a6 01       	movw	r20, r12
    3eec:	69 81       	ldd	r22, Y+1	; 0x01
    3eee:	7a 81       	ldd	r23, Y+2	; 0x02
    3ef0:	83 2d       	mov	r24, r3
    3ef2:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    3ef6:	48 01       	movw	r8, r16
    3ef8:	93 94       	inc	r9
    3efa:	09 2c       	mov	r0, r9
    3efc:	00 0c       	add	r0, r0
    3efe:	aa 08       	sbc	r10, r10
    3f00:	bb 08       	sbc	r11, r11
    3f02:	40 e4       	ldi	r20, 0x40	; 64
    3f04:	c5 01       	movw	r24, r10
    3f06:	b4 01       	movw	r22, r8
    3f08:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    3f0c:	c5 01       	movw	r24, r10
    3f0e:	b4 01       	movw	r22, r8
    3f10:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3f14:	81 11       	cpse	r24, r1
    3f16:	fa cf       	rjmp	.-12     	; 0x3f0c <recv+0x184>
    3f18:	b6 01       	movw	r22, r12
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	90 e0       	ldi	r25, 0x00	; 0
    3f1e:	20 c0       	rjmp	.+64     	; 0x3f60 <recv+0x1d8>
    3f20:	6f ef       	ldi	r22, 0xFF	; 255
    3f22:	7f ef       	ldi	r23, 0xFF	; 255
    3f24:	cb 01       	movw	r24, r22
    3f26:	1c c0       	rjmp	.+56     	; 0x3f60 <recv+0x1d8>
    3f28:	6b ef       	ldi	r22, 0xFB	; 251
    3f2a:	7f ef       	ldi	r23, 0xFF	; 255
    3f2c:	8f ef       	ldi	r24, 0xFF	; 255
    3f2e:	9f ef       	ldi	r25, 0xFF	; 255
    3f30:	17 c0       	rjmp	.+46     	; 0x3f60 <recv+0x1d8>
    3f32:	62 ef       	ldi	r22, 0xF2	; 242
    3f34:	7f ef       	ldi	r23, 0xFF	; 255
    3f36:	8f ef       	ldi	r24, 0xFF	; 255
    3f38:	9f ef       	ldi	r25, 0xFF	; 255
    3f3a:	12 c0       	rjmp	.+36     	; 0x3f60 <recv+0x1d8>
    3f3c:	60 e0       	ldi	r22, 0x00	; 0
    3f3e:	70 e0       	ldi	r23, 0x00	; 0
    3f40:	cb 01       	movw	r24, r22
    3f42:	0e c0       	rjmp	.+28     	; 0x3f60 <recv+0x1d8>
    3f44:	60 e0       	ldi	r22, 0x00	; 0
    3f46:	70 e0       	ldi	r23, 0x00	; 0
    3f48:	cb 01       	movw	r24, r22
    3f4a:	0a c0       	rjmp	.+20     	; 0x3f60 <recv+0x1d8>
    3f4c:	80 91 63 29 	lds	r24, 0x2963	; 0x802963 <sock_io_mode>
    3f50:	90 91 64 29 	lds	r25, 0x2964	; 0x802964 <sock_io_mode+0x1>
    3f54:	8e 21       	and	r24, r14
    3f56:	9f 21       	and	r25, r15
    3f58:	89 2b       	or	r24, r25
    3f5a:	09 f4       	brne	.+2      	; 0x3f5e <recv+0x1d6>
    3f5c:	6f cf       	rjmp	.-290    	; 0x3e3c <recv+0xb4>
    3f5e:	f2 cf       	rjmp	.-28     	; 0x3f44 <recv+0x1bc>
    3f60:	24 96       	adiw	r28, 0x04	; 4
    3f62:	cd bf       	out	0x3d, r28	; 61
    3f64:	de bf       	out	0x3e, r29	; 62
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	df 90       	pop	r13
    3f74:	cf 90       	pop	r12
    3f76:	bf 90       	pop	r11
    3f78:	af 90       	pop	r10
    3f7a:	9f 90       	pop	r9
    3f7c:	8f 90       	pop	r8
    3f7e:	7f 90       	pop	r7
    3f80:	6f 90       	pop	r6
    3f82:	5f 90       	pop	r5
    3f84:	4f 90       	pop	r4
    3f86:	3f 90       	pop	r3
    3f88:	2f 90       	pop	r2
    3f8a:	08 95       	ret

00003f8c <sendto>:
    3f8c:	4f 92       	push	r4
    3f8e:	5f 92       	push	r5
    3f90:	7f 92       	push	r7
    3f92:	8f 92       	push	r8
    3f94:	9f 92       	push	r9
    3f96:	af 92       	push	r10
    3f98:	bf 92       	push	r11
    3f9a:	cf 92       	push	r12
    3f9c:	df 92       	push	r13
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	cf 93       	push	r28
    3fa8:	df 93       	push	r29
    3faa:	89 30       	cpi	r24, 0x09	; 9
    3fac:	08 f0       	brcs	.+2      	; 0x3fb0 <sendto+0x24>
    3fae:	f2 c0       	rjmp	.+484    	; 0x4194 <__DATA_REGION_LENGTH__+0x194>
    3fb0:	69 01       	movw	r12, r18
    3fb2:	7a 01       	movw	r14, r20
    3fb4:	2b 01       	movw	r4, r22
    3fb6:	78 2e       	mov	r7, r24
    3fb8:	c8 2f       	mov	r28, r24
    3fba:	d0 e0       	ldi	r29, 0x00	; 0
    3fbc:	cc 0f       	add	r28, r28
    3fbe:	dd 1f       	adc	r29, r29
    3fc0:	cc 0f       	add	r28, r28
    3fc2:	dd 1f       	adc	r29, r29
    3fc4:	21 96       	adiw	r28, 0x01	; 1
    3fc6:	cc 0f       	add	r28, r28
    3fc8:	dd 1f       	adc	r29, r29
    3fca:	cc 0f       	add	r28, r28
    3fcc:	dd 1f       	adc	r29, r29
    3fce:	cc 0f       	add	r28, r28
    3fd0:	dd 1f       	adc	r29, r29
    3fd2:	4e 01       	movw	r8, r28
    3fd4:	0d 2e       	mov	r0, r29
    3fd6:	00 0c       	add	r0, r0
    3fd8:	aa 08       	sbc	r10, r10
    3fda:	bb 08       	sbc	r11, r11
    3fdc:	c5 01       	movw	r24, r10
    3fde:	b4 01       	movw	r22, r8
    3fe0:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    3fe4:	8f 70       	andi	r24, 0x0F	; 15
    3fe6:	82 50       	subi	r24, 0x02	; 2
    3fe8:	83 30       	cpi	r24, 0x03	; 3
    3fea:	08 f0       	brcs	.+2      	; 0x3fee <sendto+0x62>
    3fec:	d7 c0       	rjmp	.+430    	; 0x419c <__DATA_REGION_LENGTH__+0x19c>
    3fee:	e1 14       	cp	r14, r1
    3ff0:	f1 04       	cpc	r15, r1
    3ff2:	09 f4       	brne	.+2      	; 0x3ff6 <sendto+0x6a>
    3ff4:	d8 c0       	rjmp	.+432    	; 0x41a6 <__DATA_REGION_LENGTH__+0x1a6>
    3ff6:	f6 01       	movw	r30, r12
    3ff8:	80 81       	ld	r24, Z
    3ffa:	90 e0       	ldi	r25, 0x00	; 0
    3ffc:	a0 e0       	ldi	r26, 0x00	; 0
    3ffe:	b0 e0       	ldi	r27, 0x00	; 0
    4000:	ba 2f       	mov	r27, r26
    4002:	a9 2f       	mov	r26, r25
    4004:	98 2f       	mov	r25, r24
    4006:	88 27       	eor	r24, r24
    4008:	21 81       	ldd	r18, Z+1	; 0x01
    400a:	82 0f       	add	r24, r18
    400c:	91 1d       	adc	r25, r1
    400e:	a1 1d       	adc	r26, r1
    4010:	b1 1d       	adc	r27, r1
    4012:	ba 2f       	mov	r27, r26
    4014:	a9 2f       	mov	r26, r25
    4016:	98 2f       	mov	r25, r24
    4018:	88 27       	eor	r24, r24
    401a:	22 81       	ldd	r18, Z+2	; 0x02
    401c:	82 0f       	add	r24, r18
    401e:	91 1d       	adc	r25, r1
    4020:	a1 1d       	adc	r26, r1
    4022:	b1 1d       	adc	r27, r1
    4024:	ba 2f       	mov	r27, r26
    4026:	a9 2f       	mov	r26, r25
    4028:	98 2f       	mov	r25, r24
    402a:	88 27       	eor	r24, r24
    402c:	23 81       	ldd	r18, Z+3	; 0x03
    402e:	82 0f       	add	r24, r18
    4030:	91 1d       	adc	r25, r1
    4032:	a1 1d       	adc	r26, r1
    4034:	b1 1d       	adc	r27, r1
    4036:	89 2b       	or	r24, r25
    4038:	8a 2b       	or	r24, r26
    403a:	8b 2b       	or	r24, r27
    403c:	31 f4       	brne	.+12     	; 0x404a <__DATA_REGION_LENGTH__+0x4a>
    403e:	c5 01       	movw	r24, r10
    4040:	b4 01       	movw	r22, r8
    4042:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4046:	82 ff       	sbrs	r24, 2
    4048:	b3 c0       	rjmp	.+358    	; 0x41b0 <__DATA_REGION_LENGTH__+0x1b0>
    404a:	01 15       	cp	r16, r1
    404c:	11 05       	cpc	r17, r1
    404e:	31 f4       	brne	.+12     	; 0x405c <__DATA_REGION_LENGTH__+0x5c>
    4050:	c5 01       	movw	r24, r10
    4052:	b4 01       	movw	r22, r8
    4054:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4058:	82 ff       	sbrs	r24, 2
    405a:	af c0       	rjmp	.+350    	; 0x41ba <__DATA_REGION_LENGTH__+0x1ba>
    405c:	4e 01       	movw	r8, r28
    405e:	fd ef       	ldi	r31, 0xFD	; 253
    4060:	9f 1a       	sub	r9, r31
    4062:	09 2c       	mov	r0, r9
    4064:	00 0c       	add	r0, r0
    4066:	aa 08       	sbc	r10, r10
    4068:	bb 08       	sbc	r11, r11
    406a:	c5 01       	movw	r24, r10
    406c:	b4 01       	movw	r22, r8
    406e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4072:	82 34       	cpi	r24, 0x42	; 66
    4074:	21 f0       	breq	.+8      	; 0x407e <__DATA_REGION_LENGTH__+0x7e>
    4076:	8f 7e       	andi	r24, 0xEF	; 239
    4078:	82 32       	cpi	r24, 0x22	; 34
    407a:	09 f0       	breq	.+2      	; 0x407e <__DATA_REGION_LENGTH__+0x7e>
    407c:	a3 c0       	rjmp	.+326    	; 0x41c4 <__DATA_REGION_LENGTH__+0x1c4>
    407e:	be 01       	movw	r22, r28
    4080:	74 5f       	subi	r23, 0xF4	; 244
    4082:	07 2e       	mov	r0, r23
    4084:	00 0c       	add	r0, r0
    4086:	88 0b       	sbc	r24, r24
    4088:	99 0b       	sbc	r25, r25
    408a:	24 e0       	ldi	r18, 0x04	; 4
    408c:	30 e0       	ldi	r19, 0x00	; 0
    408e:	a6 01       	movw	r20, r12
    4090:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
    4094:	be 01       	movw	r22, r28
    4096:	70 5f       	subi	r23, 0xF0	; 240
    4098:	07 2e       	mov	r0, r23
    409a:	00 0c       	add	r0, r0
    409c:	88 0b       	sbc	r24, r24
    409e:	99 0b       	sbc	r25, r25
    40a0:	41 2f       	mov	r20, r17
    40a2:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    40a6:	be 01       	movw	r22, r28
    40a8:	7f 5e       	subi	r23, 0xEF	; 239
    40aa:	07 2e       	mov	r0, r23
    40ac:	00 0c       	add	r0, r0
    40ae:	88 0b       	sbc	r24, r24
    40b0:	99 0b       	sbc	r25, r25
    40b2:	40 2f       	mov	r20, r16
    40b4:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    40b8:	be 01       	movw	r22, r28
    40ba:	71 5e       	subi	r23, 0xE1	; 225
    40bc:	07 2e       	mov	r0, r23
    40be:	00 0c       	add	r0, r0
    40c0:	88 0b       	sbc	r24, r24
    40c2:	99 0b       	sbc	r25, r25
    40c4:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    40c8:	90 e0       	ldi	r25, 0x00	; 0
    40ca:	98 2f       	mov	r25, r24
    40cc:	88 27       	eor	r24, r24
    40ce:	99 0f       	add	r25, r25
    40d0:	99 0f       	add	r25, r25
    40d2:	8e 15       	cp	r24, r14
    40d4:	9f 05       	cpc	r25, r15
    40d6:	08 f4       	brcc	.+2      	; 0x40da <__DATA_REGION_LENGTH__+0xda>
    40d8:	7c 01       	movw	r14, r24
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	6c 01       	movw	r12, r24
    40e0:	07 2c       	mov	r0, r7
    40e2:	02 c0       	rjmp	.+4      	; 0x40e8 <__DATA_REGION_LENGTH__+0xe8>
    40e4:	cc 0c       	add	r12, r12
    40e6:	dd 1c       	adc	r13, r13
    40e8:	0a 94       	dec	r0
    40ea:	e2 f7       	brpl	.-8      	; 0x40e4 <__DATA_REGION_LENGTH__+0xe4>
    40ec:	87 2d       	mov	r24, r7
    40ee:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <getSn_TX_FSR>
    40f2:	8c 01       	movw	r16, r24
    40f4:	c5 01       	movw	r24, r10
    40f6:	b4 01       	movw	r22, r8
    40f8:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    40fc:	88 23       	and	r24, r24
    40fe:	09 f4       	brne	.+2      	; 0x4102 <__DATA_REGION_LENGTH__+0x102>
    4100:	66 c0       	rjmp	.+204    	; 0x41ce <__DATA_REGION_LENGTH__+0x1ce>
    4102:	80 91 63 29 	lds	r24, 0x2963	; 0x802963 <sock_io_mode>
    4106:	90 91 64 29 	lds	r25, 0x2964	; 0x802964 <sock_io_mode+0x1>
    410a:	8c 21       	and	r24, r12
    410c:	9d 21       	and	r25, r13
    410e:	89 2b       	or	r24, r25
    4110:	21 f0       	breq	.+8      	; 0x411a <__DATA_REGION_LENGTH__+0x11a>
    4112:	0e 15       	cp	r16, r14
    4114:	1f 05       	cpc	r17, r15
    4116:	20 f4       	brcc	.+8      	; 0x4120 <__DATA_REGION_LENGTH__+0x120>
    4118:	5f c0       	rjmp	.+190    	; 0x41d8 <__DATA_REGION_LENGTH__+0x1d8>
    411a:	0e 15       	cp	r16, r14
    411c:	1f 05       	cpc	r17, r15
    411e:	30 f3       	brcs	.-52     	; 0x40ec <__DATA_REGION_LENGTH__+0xec>
    4120:	a7 01       	movw	r20, r14
    4122:	b2 01       	movw	r22, r4
    4124:	87 2d       	mov	r24, r7
    4126:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <wiz_send_data>
    412a:	4e 01       	movw	r8, r28
    412c:	93 94       	inc	r9
    412e:	09 2c       	mov	r0, r9
    4130:	00 0c       	add	r0, r0
    4132:	aa 08       	sbc	r10, r10
    4134:	bb 08       	sbc	r11, r11
    4136:	40 e2       	ldi	r20, 0x20	; 32
    4138:	c5 01       	movw	r24, r10
    413a:	b4 01       	movw	r22, r8
    413c:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    4140:	c5 01       	movw	r24, r10
    4142:	b4 01       	movw	r22, r8
    4144:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4148:	81 11       	cpse	r24, r1
    414a:	fa cf       	rjmp	.-12     	; 0x4140 <__DATA_REGION_LENGTH__+0x140>
    414c:	de 5f       	subi	r29, 0xFE	; 254
    414e:	4e 01       	movw	r8, r28
    4150:	dd 0f       	add	r29, r29
    4152:	aa 08       	sbc	r10, r10
    4154:	bb 08       	sbc	r11, r11
    4156:	c5 01       	movw	r24, r10
    4158:	b4 01       	movw	r22, r8
    415a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    415e:	84 ff       	sbrs	r24, 4
    4160:	0b c0       	rjmp	.+22     	; 0x4178 <__DATA_REGION_LENGTH__+0x178>
    4162:	40 e1       	ldi	r20, 0x10	; 16
    4164:	68 2d       	mov	r22, r8
    4166:	79 2d       	mov	r23, r9
    4168:	8a 2d       	mov	r24, r10
    416a:	9b 2d       	mov	r25, r11
    416c:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    4170:	b7 01       	movw	r22, r14
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	90 e0       	ldi	r25, 0x00	; 0
    4176:	33 c0       	rjmp	.+102    	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    4178:	83 ff       	sbrs	r24, 3
    417a:	ed cf       	rjmp	.-38     	; 0x4156 <__DATA_REGION_LENGTH__+0x156>
    417c:	48 e0       	ldi	r20, 0x08	; 8
    417e:	68 2d       	mov	r22, r8
    4180:	79 2d       	mov	r23, r9
    4182:	8a 2d       	mov	r24, r10
    4184:	9b 2d       	mov	r25, r11
    4186:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    418a:	63 ef       	ldi	r22, 0xF3	; 243
    418c:	7f ef       	ldi	r23, 0xFF	; 255
    418e:	8f ef       	ldi	r24, 0xFF	; 255
    4190:	9f ef       	ldi	r25, 0xFF	; 255
    4192:	25 c0       	rjmp	.+74     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    4194:	6f ef       	ldi	r22, 0xFF	; 255
    4196:	7f ef       	ldi	r23, 0xFF	; 255
    4198:	cb 01       	movw	r24, r22
    419a:	21 c0       	rjmp	.+66     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    419c:	6b ef       	ldi	r22, 0xFB	; 251
    419e:	7f ef       	ldi	r23, 0xFF	; 255
    41a0:	8f ef       	ldi	r24, 0xFF	; 255
    41a2:	9f ef       	ldi	r25, 0xFF	; 255
    41a4:	1c c0       	rjmp	.+56     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    41a6:	62 ef       	ldi	r22, 0xF2	; 242
    41a8:	7f ef       	ldi	r23, 0xFF	; 255
    41aa:	8f ef       	ldi	r24, 0xFF	; 255
    41ac:	9f ef       	ldi	r25, 0xFF	; 255
    41ae:	17 c0       	rjmp	.+46     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    41b0:	64 ef       	ldi	r22, 0xF4	; 244
    41b2:	7f ef       	ldi	r23, 0xFF	; 255
    41b4:	8f ef       	ldi	r24, 0xFF	; 255
    41b6:	9f ef       	ldi	r25, 0xFF	; 255
    41b8:	12 c0       	rjmp	.+36     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    41ba:	65 ef       	ldi	r22, 0xF5	; 245
    41bc:	7f ef       	ldi	r23, 0xFF	; 255
    41be:	8f ef       	ldi	r24, 0xFF	; 255
    41c0:	9f ef       	ldi	r25, 0xFF	; 255
    41c2:	0d c0       	rjmp	.+26     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    41c4:	69 ef       	ldi	r22, 0xF9	; 249
    41c6:	7f ef       	ldi	r23, 0xFF	; 255
    41c8:	8f ef       	ldi	r24, 0xFF	; 255
    41ca:	9f ef       	ldi	r25, 0xFF	; 255
    41cc:	08 c0       	rjmp	.+16     	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    41ce:	6c ef       	ldi	r22, 0xFC	; 252
    41d0:	7f ef       	ldi	r23, 0xFF	; 255
    41d2:	8f ef       	ldi	r24, 0xFF	; 255
    41d4:	9f ef       	ldi	r25, 0xFF	; 255
    41d6:	03 c0       	rjmp	.+6      	; 0x41de <__DATA_REGION_LENGTH__+0x1de>
    41d8:	60 e0       	ldi	r22, 0x00	; 0
    41da:	70 e0       	ldi	r23, 0x00	; 0
    41dc:	cb 01       	movw	r24, r22
    41de:	df 91       	pop	r29
    41e0:	cf 91       	pop	r28
    41e2:	1f 91       	pop	r17
    41e4:	0f 91       	pop	r16
    41e6:	ff 90       	pop	r15
    41e8:	ef 90       	pop	r14
    41ea:	df 90       	pop	r13
    41ec:	cf 90       	pop	r12
    41ee:	bf 90       	pop	r11
    41f0:	af 90       	pop	r10
    41f2:	9f 90       	pop	r9
    41f4:	8f 90       	pop	r8
    41f6:	7f 90       	pop	r7
    41f8:	5f 90       	pop	r5
    41fa:	4f 90       	pop	r4
    41fc:	08 95       	ret

000041fe <recvfrom>:
    41fe:	2f 92       	push	r2
    4200:	3f 92       	push	r3
    4202:	4f 92       	push	r4
    4204:	5f 92       	push	r5
    4206:	6f 92       	push	r6
    4208:	7f 92       	push	r7
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	bf 92       	push	r11
    4212:	cf 92       	push	r12
    4214:	df 92       	push	r13
    4216:	ef 92       	push	r14
    4218:	ff 92       	push	r15
    421a:	0f 93       	push	r16
    421c:	1f 93       	push	r17
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	2e 97       	sbiw	r28, 0x0e	; 14
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	89 30       	cpi	r24, 0x09	; 9
    422e:	08 f0       	brcs	.+2      	; 0x4232 <recvfrom+0x34>
    4230:	a8 c1       	rjmp	.+848    	; 0x4582 <recvfrom+0x384>
    4232:	0d 87       	std	Y+13, r16	; 0x0d
    4234:	1e 87       	std	Y+14, r17	; 0x0e
    4236:	29 87       	std	Y+9, r18	; 0x09
    4238:	3a 87       	std	Y+10, r19	; 0x0a
    423a:	4a 01       	movw	r8, r20
    423c:	6b 87       	std	Y+11, r22	; 0x0b
    423e:	7c 87       	std	Y+12, r23	; 0x0c
    4240:	38 2e       	mov	r3, r24
    4242:	a8 2e       	mov	r10, r24
    4244:	b1 2c       	mov	r11, r1
    4246:	75 01       	movw	r14, r10
    4248:	ee 0c       	add	r14, r14
    424a:	ff 1c       	adc	r15, r15
    424c:	ee 0c       	add	r14, r14
    424e:	ff 1c       	adc	r15, r15
    4250:	2f ef       	ldi	r18, 0xFF	; 255
    4252:	e2 1a       	sub	r14, r18
    4254:	f2 0a       	sbc	r15, r18
    4256:	ee 0c       	add	r14, r14
    4258:	ff 1c       	adc	r15, r15
    425a:	ee 0c       	add	r14, r14
    425c:	ff 1c       	adc	r15, r15
    425e:	ee 0c       	add	r14, r14
    4260:	ff 1c       	adc	r15, r15
    4262:	b7 01       	movw	r22, r14
    4264:	0f 2c       	mov	r0, r15
    4266:	00 0c       	add	r0, r0
    4268:	88 0b       	sbc	r24, r24
    426a:	99 0b       	sbc	r25, r25
    426c:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4270:	28 2e       	mov	r2, r24
    4272:	8f 70       	andi	r24, 0x0F	; 15
    4274:	82 50       	subi	r24, 0x02	; 2
    4276:	83 30       	cpi	r24, 0x03	; 3
    4278:	08 f0       	brcs	.+2      	; 0x427c <recvfrom+0x7e>
    427a:	87 c1       	rjmp	.+782    	; 0x458a <recvfrom+0x38c>
    427c:	81 14       	cp	r8, r1
    427e:	91 04       	cpc	r9, r1
    4280:	09 f4       	brne	.+2      	; 0x4284 <recvfrom+0x86>
    4282:	88 c1       	rjmp	.+784    	; 0x4594 <recvfrom+0x396>
    4284:	f5 01       	movw	r30, r10
    4286:	ee 0f       	add	r30, r30
    4288:	ff 1f       	adc	r31, r31
    428a:	ef 5a       	subi	r30, 0xAF	; 175
    428c:	f6 4d       	sbci	r31, 0xD6	; 214
    428e:	80 81       	ld	r24, Z
    4290:	91 81       	ldd	r25, Z+1	; 0x01
    4292:	89 2b       	or	r24, r25
    4294:	09 f0       	breq	.+2      	; 0x4298 <recvfrom+0x9a>
    4296:	8c c1       	rjmp	.+792    	; 0x45b0 <recvfrom+0x3b2>
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	90 e0       	ldi	r25, 0x00	; 0
    429c:	6c 01       	movw	r12, r24
    429e:	03 2c       	mov	r0, r3
    42a0:	02 c0       	rjmp	.+4      	; 0x42a6 <recvfrom+0xa8>
    42a2:	cc 0c       	add	r12, r12
    42a4:	dd 1c       	adc	r13, r13
    42a6:	0a 94       	dec	r0
    42a8:	e2 f7       	brpl	.-8      	; 0x42a2 <recvfrom+0xa4>
    42aa:	27 01       	movw	r4, r14
    42ac:	8d ef       	ldi	r24, 0xFD	; 253
    42ae:	58 1a       	sub	r5, r24
    42b0:	05 2c       	mov	r0, r5
    42b2:	00 0c       	add	r0, r0
    42b4:	66 08       	sbc	r6, r6
    42b6:	77 08       	sbc	r7, r7
    42b8:	83 2d       	mov	r24, r3
    42ba:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <getSn_RX_RSR>
    42be:	8c 01       	movw	r16, r24
    42c0:	c3 01       	movw	r24, r6
    42c2:	b2 01       	movw	r22, r4
    42c4:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    42c8:	88 23       	and	r24, r24
    42ca:	09 f4       	brne	.+2      	; 0x42ce <recvfrom+0xd0>
    42cc:	68 c1       	rjmp	.+720    	; 0x459e <recvfrom+0x3a0>
    42ce:	80 91 63 29 	lds	r24, 0x2963	; 0x802963 <sock_io_mode>
    42d2:	90 91 64 29 	lds	r25, 0x2964	; 0x802964 <sock_io_mode+0x1>
    42d6:	8c 21       	and	r24, r12
    42d8:	9d 21       	and	r25, r13
    42da:	89 2b       	or	r24, r25
    42dc:	21 f0       	breq	.+8      	; 0x42e6 <recvfrom+0xe8>
    42de:	01 15       	cp	r16, r1
    42e0:	11 05       	cpc	r17, r1
    42e2:	21 f4       	brne	.+8      	; 0x42ec <recvfrom+0xee>
    42e4:	61 c1       	rjmp	.+706    	; 0x45a8 <recvfrom+0x3aa>
    42e6:	01 15       	cp	r16, r1
    42e8:	11 05       	cpc	r17, r1
    42ea:	31 f3       	breq	.-52     	; 0x42b8 <recvfrom+0xba>
    42ec:	82 2d       	mov	r24, r2
    42ee:	87 70       	andi	r24, 0x07	; 7
    42f0:	83 30       	cpi	r24, 0x03	; 3
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <recvfrom+0xf8>
    42f4:	ba c0       	rjmp	.+372    	; 0x446a <recvfrom+0x26c>
    42f6:	84 30       	cpi	r24, 0x04	; 4
    42f8:	09 f4       	brne	.+2      	; 0x42fc <recvfrom+0xfe>
    42fa:	61 c0       	rjmp	.+194    	; 0x43be <recvfrom+0x1c0>
    42fc:	82 30       	cpi	r24, 0x02	; 2
    42fe:	09 f0       	breq	.+2      	; 0x4302 <recvfrom+0x104>
    4300:	08 c1       	rjmp	.+528    	; 0x4512 <recvfrom+0x314>
    4302:	f5 01       	movw	r30, r10
    4304:	ee 0f       	add	r30, r30
    4306:	ff 1f       	adc	r31, r31
    4308:	ef 5a       	subi	r30, 0xAF	; 175
    430a:	f6 4d       	sbci	r31, 0xD6	; 214
    430c:	80 81       	ld	r24, Z
    430e:	91 81       	ldd	r25, Z+1	; 0x01
    4310:	89 2b       	or	r24, r25
    4312:	09 f0       	breq	.+2      	; 0x4316 <recvfrom+0x118>
    4314:	41 c0       	rjmp	.+130    	; 0x4398 <recvfrom+0x19a>
    4316:	48 e0       	ldi	r20, 0x08	; 8
    4318:	50 e0       	ldi	r21, 0x00	; 0
    431a:	be 01       	movw	r22, r28
    431c:	6f 5f       	subi	r22, 0xFF	; 255
    431e:	7f 4f       	sbci	r23, 0xFF	; 255
    4320:	83 2d       	mov	r24, r3
    4322:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    4326:	27 01       	movw	r4, r14
    4328:	53 94       	inc	r5
    432a:	05 2c       	mov	r0, r5
    432c:	00 0c       	add	r0, r0
    432e:	66 08       	sbc	r6, r6
    4330:	77 08       	sbc	r7, r7
    4332:	40 e4       	ldi	r20, 0x40	; 64
    4334:	c3 01       	movw	r24, r6
    4336:	b2 01       	movw	r22, r4
    4338:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    433c:	c3 01       	movw	r24, r6
    433e:	b2 01       	movw	r22, r4
    4340:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4344:	81 11       	cpse	r24, r1
    4346:	fa cf       	rjmp	.-12     	; 0x433c <recvfrom+0x13e>
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	e9 85       	ldd	r30, Y+9	; 0x09
    434c:	fa 85       	ldd	r31, Y+10	; 0x0a
    434e:	80 83       	st	Z, r24
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	81 83       	std	Z+1, r24	; 0x01
    4354:	8b 81       	ldd	r24, Y+3	; 0x03
    4356:	82 83       	std	Z+2, r24	; 0x02
    4358:	8c 81       	ldd	r24, Y+4	; 0x04
    435a:	83 83       	std	Z+3, r24	; 0x03
    435c:	8d 81       	ldd	r24, Y+5	; 0x05
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	98 2f       	mov	r25, r24
    4362:	88 27       	eor	r24, r24
    4364:	2e 81       	ldd	r18, Y+6	; 0x06
    4366:	82 0f       	add	r24, r18
    4368:	91 1d       	adc	r25, r1
    436a:	ed 85       	ldd	r30, Y+13	; 0x0d
    436c:	fe 85       	ldd	r31, Y+14	; 0x0e
    436e:	80 83       	st	Z, r24
    4370:	91 83       	std	Z+1, r25	; 0x01
    4372:	f5 01       	movw	r30, r10
    4374:	ee 0f       	add	r30, r30
    4376:	ff 1f       	adc	r31, r31
    4378:	ef 5a       	subi	r30, 0xAF	; 175
    437a:	f6 4d       	sbci	r31, 0xD6	; 214
    437c:	8f 81       	ldd	r24, Y+7	; 0x07
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	98 2f       	mov	r25, r24
    4382:	88 27       	eor	r24, r24
    4384:	28 85       	ldd	r18, Y+8	; 0x08
    4386:	82 0f       	add	r24, r18
    4388:	91 1d       	adc	r25, r1
    438a:	80 83       	st	Z, r24
    438c:	91 83       	std	Z+1, r25	; 0x01
    438e:	80 e8       	ldi	r24, 0x80	; 128
    4390:	f5 01       	movw	r30, r10
    4392:	e7 5b       	subi	r30, 0xB7	; 183
    4394:	f6 4d       	sbci	r31, 0xD6	; 214
    4396:	80 83       	st	Z, r24
    4398:	f5 01       	movw	r30, r10
    439a:	ee 0f       	add	r30, r30
    439c:	ff 1f       	adc	r31, r31
    439e:	ef 5a       	subi	r30, 0xAF	; 175
    43a0:	f6 4d       	sbci	r31, 0xD6	; 214
    43a2:	80 81       	ld	r24, Z
    43a4:	91 81       	ldd	r25, Z+1	; 0x01
    43a6:	84 01       	movw	r16, r8
    43a8:	88 15       	cp	r24, r8
    43aa:	99 05       	cpc	r25, r9
    43ac:	08 f4       	brcc	.+2      	; 0x43b0 <recvfrom+0x1b2>
    43ae:	8c 01       	movw	r16, r24
    43b0:	a8 01       	movw	r20, r16
    43b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43b6:	83 2d       	mov	r24, r3
    43b8:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    43bc:	b5 c0       	rjmp	.+362    	; 0x4528 <recvfrom+0x32a>
    43be:	f5 01       	movw	r30, r10
    43c0:	ee 0f       	add	r30, r30
    43c2:	ff 1f       	adc	r31, r31
    43c4:	ef 5a       	subi	r30, 0xAF	; 175
    43c6:	f6 4d       	sbci	r31, 0xD6	; 214
    43c8:	80 81       	ld	r24, Z
    43ca:	91 81       	ldd	r25, Z+1	; 0x01
    43cc:	89 2b       	or	r24, r25
    43ce:	d1 f5       	brne	.+116    	; 0x4444 <recvfrom+0x246>
    43d0:	42 e0       	ldi	r20, 0x02	; 2
    43d2:	50 e0       	ldi	r21, 0x00	; 0
    43d4:	be 01       	movw	r22, r28
    43d6:	6f 5f       	subi	r22, 0xFF	; 255
    43d8:	7f 4f       	sbci	r23, 0xFF	; 255
    43da:	83 2d       	mov	r24, r3
    43dc:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    43e0:	27 01       	movw	r4, r14
    43e2:	53 94       	inc	r5
    43e4:	05 2c       	mov	r0, r5
    43e6:	00 0c       	add	r0, r0
    43e8:	66 08       	sbc	r6, r6
    43ea:	77 08       	sbc	r7, r7
    43ec:	40 e4       	ldi	r20, 0x40	; 64
    43ee:	c3 01       	movw	r24, r6
    43f0:	b2 01       	movw	r22, r4
    43f2:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    43f6:	c3 01       	movw	r24, r6
    43f8:	b2 01       	movw	r22, r4
    43fa:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    43fe:	81 11       	cpse	r24, r1
    4400:	fa cf       	rjmp	.-12     	; 0x43f6 <recvfrom+0x1f8>
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	38 2f       	mov	r19, r24
    4408:	22 27       	eor	r18, r18
    440a:	9a 81       	ldd	r25, Y+2	; 0x02
    440c:	89 2f       	mov	r24, r25
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	02 97       	sbiw	r24, 0x02	; 2
    4412:	82 0f       	add	r24, r18
    4414:	93 1f       	adc	r25, r19
    4416:	f5 01       	movw	r30, r10
    4418:	ee 0f       	add	r30, r30
    441a:	ff 1f       	adc	r31, r31
    441c:	ef 5a       	subi	r30, 0xAF	; 175
    441e:	f6 4d       	sbci	r31, 0xD6	; 214
    4420:	80 83       	st	Z, r24
    4422:	91 83       	std	Z+1, r25	; 0x01
    4424:	8b 3e       	cpi	r24, 0xEB	; 235
    4426:	95 40       	sbci	r25, 0x05	; 5
    4428:	40 f0       	brcs	.+16     	; 0x443a <recvfrom+0x23c>
    442a:	83 2d       	mov	r24, r3
    442c:	0e 94 44 1b 	call	0x3688	; 0x3688 <close>
    4430:	67 e1       	ldi	r22, 0x17	; 23
    4432:	7c ef       	ldi	r23, 0xFC	; 252
    4434:	8f ef       	ldi	r24, 0xFF	; 255
    4436:	9f ef       	ldi	r25, 0xFF	; 255
    4438:	c7 c0       	rjmp	.+398    	; 0x45c8 <recvfrom+0x3ca>
    443a:	80 e8       	ldi	r24, 0x80	; 128
    443c:	f5 01       	movw	r30, r10
    443e:	e7 5b       	subi	r30, 0xB7	; 183
    4440:	f6 4d       	sbci	r31, 0xD6	; 214
    4442:	80 83       	st	Z, r24
    4444:	f5 01       	movw	r30, r10
    4446:	ee 0f       	add	r30, r30
    4448:	ff 1f       	adc	r31, r31
    444a:	ef 5a       	subi	r30, 0xAF	; 175
    444c:	f6 4d       	sbci	r31, 0xD6	; 214
    444e:	80 81       	ld	r24, Z
    4450:	91 81       	ldd	r25, Z+1	; 0x01
    4452:	84 01       	movw	r16, r8
    4454:	88 15       	cp	r24, r8
    4456:	99 05       	cpc	r25, r9
    4458:	08 f4       	brcc	.+2      	; 0x445c <recvfrom+0x25e>
    445a:	8c 01       	movw	r16, r24
    445c:	a8 01       	movw	r20, r16
    445e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4460:	7c 85       	ldd	r23, Y+12	; 0x0c
    4462:	83 2d       	mov	r24, r3
    4464:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    4468:	5f c0       	rjmp	.+190    	; 0x4528 <recvfrom+0x32a>
    446a:	f5 01       	movw	r30, r10
    446c:	ee 0f       	add	r30, r30
    446e:	ff 1f       	adc	r31, r31
    4470:	ef 5a       	subi	r30, 0xAF	; 175
    4472:	f6 4d       	sbci	r31, 0xD6	; 214
    4474:	80 81       	ld	r24, Z
    4476:	91 81       	ldd	r25, Z+1	; 0x01
    4478:	89 2b       	or	r24, r25
    447a:	b1 f5       	brne	.+108    	; 0x44e8 <recvfrom+0x2ea>
    447c:	46 e0       	ldi	r20, 0x06	; 6
    447e:	50 e0       	ldi	r21, 0x00	; 0
    4480:	be 01       	movw	r22, r28
    4482:	6f 5f       	subi	r22, 0xFF	; 255
    4484:	7f 4f       	sbci	r23, 0xFF	; 255
    4486:	83 2d       	mov	r24, r3
    4488:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    448c:	27 01       	movw	r4, r14
    448e:	53 94       	inc	r5
    4490:	05 2c       	mov	r0, r5
    4492:	00 0c       	add	r0, r0
    4494:	66 08       	sbc	r6, r6
    4496:	77 08       	sbc	r7, r7
    4498:	40 e4       	ldi	r20, 0x40	; 64
    449a:	c3 01       	movw	r24, r6
    449c:	b2 01       	movw	r22, r4
    449e:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    44a2:	c3 01       	movw	r24, r6
    44a4:	b2 01       	movw	r22, r4
    44a6:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    44aa:	81 11       	cpse	r24, r1
    44ac:	fa cf       	rjmp	.-12     	; 0x44a2 <recvfrom+0x2a4>
    44ae:	89 81       	ldd	r24, Y+1	; 0x01
    44b0:	e9 85       	ldd	r30, Y+9	; 0x09
    44b2:	fa 85       	ldd	r31, Y+10	; 0x0a
    44b4:	80 83       	st	Z, r24
    44b6:	8a 81       	ldd	r24, Y+2	; 0x02
    44b8:	81 83       	std	Z+1, r24	; 0x01
    44ba:	8b 81       	ldd	r24, Y+3	; 0x03
    44bc:	82 83       	std	Z+2, r24	; 0x02
    44be:	8c 81       	ldd	r24, Y+4	; 0x04
    44c0:	83 83       	std	Z+3, r24	; 0x03
    44c2:	f5 01       	movw	r30, r10
    44c4:	ee 0f       	add	r30, r30
    44c6:	ff 1f       	adc	r31, r31
    44c8:	ef 5a       	subi	r30, 0xAF	; 175
    44ca:	f6 4d       	sbci	r31, 0xD6	; 214
    44cc:	8d 81       	ldd	r24, Y+5	; 0x05
    44ce:	90 e0       	ldi	r25, 0x00	; 0
    44d0:	98 2f       	mov	r25, r24
    44d2:	88 27       	eor	r24, r24
    44d4:	2e 81       	ldd	r18, Y+6	; 0x06
    44d6:	82 0f       	add	r24, r18
    44d8:	91 1d       	adc	r25, r1
    44da:	80 83       	st	Z, r24
    44dc:	91 83       	std	Z+1, r25	; 0x01
    44de:	80 e8       	ldi	r24, 0x80	; 128
    44e0:	f5 01       	movw	r30, r10
    44e2:	e7 5b       	subi	r30, 0xB7	; 183
    44e4:	f6 4d       	sbci	r31, 0xD6	; 214
    44e6:	80 83       	st	Z, r24
    44e8:	f5 01       	movw	r30, r10
    44ea:	ee 0f       	add	r30, r30
    44ec:	ff 1f       	adc	r31, r31
    44ee:	ef 5a       	subi	r30, 0xAF	; 175
    44f0:	f6 4d       	sbci	r31, 0xD6	; 214
    44f2:	80 81       	ld	r24, Z
    44f4:	91 81       	ldd	r25, Z+1	; 0x01
    44f6:	84 01       	movw	r16, r8
    44f8:	88 15       	cp	r24, r8
    44fa:	99 05       	cpc	r25, r9
    44fc:	08 f4       	brcc	.+2      	; 0x4500 <recvfrom+0x302>
    44fe:	8c 01       	movw	r16, r24
    4500:	a8 01       	movw	r20, r16
    4502:	6b 85       	ldd	r22, Y+11	; 0x0b
    4504:	7c 85       	ldd	r23, Y+12	; 0x0c
    4506:	83 2d       	mov	r24, r3
    4508:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <wiz_recv_data>
    450c:	0d c0       	rjmp	.+26     	; 0x4528 <recvfrom+0x32a>
    450e:	00 e0       	ldi	r16, 0x00	; 0
    4510:	10 e0       	ldi	r17, 0x00	; 0
    4512:	b8 01       	movw	r22, r16
    4514:	83 2d       	mov	r24, r3
    4516:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <wiz_recv_ignore>
    451a:	f5 01       	movw	r30, r10
    451c:	ee 0f       	add	r30, r30
    451e:	ff 1f       	adc	r31, r31
    4520:	ef 5a       	subi	r30, 0xAF	; 175
    4522:	f6 4d       	sbci	r31, 0xD6	; 214
    4524:	00 83       	st	Z, r16
    4526:	11 83       	std	Z+1, r17	; 0x01
    4528:	67 01       	movw	r12, r14
    452a:	d3 94       	inc	r13
    452c:	0d 2c       	mov	r0, r13
    452e:	00 0c       	add	r0, r0
    4530:	ee 08       	sbc	r14, r14
    4532:	ff 08       	sbc	r15, r15
    4534:	40 e4       	ldi	r20, 0x40	; 64
    4536:	c7 01       	movw	r24, r14
    4538:	b6 01       	movw	r22, r12
    453a:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    453e:	c7 01       	movw	r24, r14
    4540:	b6 01       	movw	r22, r12
    4542:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4546:	81 11       	cpse	r24, r1
    4548:	fa cf       	rjmp	.-12     	; 0x453e <recvfrom+0x340>
    454a:	f5 01       	movw	r30, r10
    454c:	ee 0f       	add	r30, r30
    454e:	ff 1f       	adc	r31, r31
    4550:	ef 5a       	subi	r30, 0xAF	; 175
    4552:	f6 4d       	sbci	r31, 0xD6	; 214
    4554:	80 81       	ld	r24, Z
    4556:	91 81       	ldd	r25, Z+1	; 0x01
    4558:	80 1b       	sub	r24, r16
    455a:	91 0b       	sbc	r25, r17
    455c:	80 83       	st	Z, r24
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	89 2b       	or	r24, r25
    4562:	39 f0       	breq	.+14     	; 0x4572 <recvfrom+0x374>
    4564:	f5 01       	movw	r30, r10
    4566:	e7 5b       	subi	r30, 0xB7	; 183
    4568:	f6 4d       	sbci	r31, 0xD6	; 214
    456a:	80 81       	ld	r24, Z
    456c:	81 60       	ori	r24, 0x01	; 1
    456e:	80 83       	st	Z, r24
    4570:	04 c0       	rjmp	.+8      	; 0x457a <recvfrom+0x37c>
    4572:	f5 01       	movw	r30, r10
    4574:	e7 5b       	subi	r30, 0xB7	; 183
    4576:	f6 4d       	sbci	r31, 0xD6	; 214
    4578:	10 82       	st	Z, r1
    457a:	b8 01       	movw	r22, r16
    457c:	80 e0       	ldi	r24, 0x00	; 0
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	23 c0       	rjmp	.+70     	; 0x45c8 <recvfrom+0x3ca>
    4582:	6f ef       	ldi	r22, 0xFF	; 255
    4584:	7f ef       	ldi	r23, 0xFF	; 255
    4586:	cb 01       	movw	r24, r22
    4588:	1f c0       	rjmp	.+62     	; 0x45c8 <recvfrom+0x3ca>
    458a:	6b ef       	ldi	r22, 0xFB	; 251
    458c:	7f ef       	ldi	r23, 0xFF	; 255
    458e:	8f ef       	ldi	r24, 0xFF	; 255
    4590:	9f ef       	ldi	r25, 0xFF	; 255
    4592:	1a c0       	rjmp	.+52     	; 0x45c8 <recvfrom+0x3ca>
    4594:	62 ef       	ldi	r22, 0xF2	; 242
    4596:	7f ef       	ldi	r23, 0xFF	; 255
    4598:	8f ef       	ldi	r24, 0xFF	; 255
    459a:	9f ef       	ldi	r25, 0xFF	; 255
    459c:	15 c0       	rjmp	.+42     	; 0x45c8 <recvfrom+0x3ca>
    459e:	6c ef       	ldi	r22, 0xFC	; 252
    45a0:	7f ef       	ldi	r23, 0xFF	; 255
    45a2:	8f ef       	ldi	r24, 0xFF	; 255
    45a4:	9f ef       	ldi	r25, 0xFF	; 255
    45a6:	10 c0       	rjmp	.+32     	; 0x45c8 <recvfrom+0x3ca>
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	cb 01       	movw	r24, r22
    45ae:	0c c0       	rjmp	.+24     	; 0x45c8 <recvfrom+0x3ca>
    45b0:	82 2d       	mov	r24, r2
    45b2:	87 70       	andi	r24, 0x07	; 7
    45b4:	83 30       	cpi	r24, 0x03	; 3
    45b6:	09 f4       	brne	.+2      	; 0x45ba <recvfrom+0x3bc>
    45b8:	58 cf       	rjmp	.-336    	; 0x446a <recvfrom+0x26c>
    45ba:	84 30       	cpi	r24, 0x04	; 4
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <recvfrom+0x3c2>
    45be:	ff ce       	rjmp	.-514    	; 0x43be <recvfrom+0x1c0>
    45c0:	82 30       	cpi	r24, 0x02	; 2
    45c2:	09 f0       	breq	.+2      	; 0x45c6 <recvfrom+0x3c8>
    45c4:	a4 cf       	rjmp	.-184    	; 0x450e <recvfrom+0x310>
    45c6:	e8 ce       	rjmp	.-560    	; 0x4398 <recvfrom+0x19a>
    45c8:	2e 96       	adiw	r28, 0x0e	; 14
    45ca:	cd bf       	out	0x3d, r28	; 61
    45cc:	de bf       	out	0x3e, r29	; 62
    45ce:	df 91       	pop	r29
    45d0:	cf 91       	pop	r28
    45d2:	1f 91       	pop	r17
    45d4:	0f 91       	pop	r16
    45d6:	ff 90       	pop	r15
    45d8:	ef 90       	pop	r14
    45da:	df 90       	pop	r13
    45dc:	cf 90       	pop	r12
    45de:	bf 90       	pop	r11
    45e0:	af 90       	pop	r10
    45e2:	9f 90       	pop	r9
    45e4:	8f 90       	pop	r8
    45e6:	7f 90       	pop	r7
    45e8:	6f 90       	pop	r6
    45ea:	5f 90       	pop	r5
    45ec:	4f 90       	pop	r4
    45ee:	3f 90       	pop	r3
    45f0:	2f 90       	pop	r2
    45f2:	08 95       	ret

000045f4 <getsockopt>:

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
    45f4:	ff 92       	push	r15
    45f6:	0f 93       	push	r16
    45f8:	1f 93       	push	r17
    45fa:	cf 93       	push	r28
    45fc:	df 93       	push	r29
   CHECK_SOCKNUM();
    45fe:	89 30       	cpi	r24, 0x09	; 9
    4600:	08 f0       	brcs	.+2      	; 0x4604 <getsockopt+0x10>
    4602:	31 c1       	rjmp	.+610    	; 0x4866 <getsockopt+0x272>
   switch(sotype)
    4604:	06 2f       	mov	r16, r22
    4606:	10 e0       	ldi	r17, 0x00	; 0
    4608:	0d 30       	cpi	r16, 0x0D	; 13
    460a:	11 05       	cpc	r17, r1
    460c:	08 f0       	brcs	.+2      	; 0x4610 <getsockopt+0x1c>
    460e:	2d c1       	rjmp	.+602    	; 0x486a <getsockopt+0x276>
    4610:	ea 01       	movw	r28, r20
    4612:	f8 2e       	mov	r15, r24
    4614:	f8 01       	movw	r30, r16
    4616:	88 27       	eor	r24, r24
    4618:	e2 50       	subi	r30, 0x02	; 2
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	8f 4f       	sbci	r24, 0xFF	; 255
    461e:	0c 94 de 2c 	jmp	0x59bc	; 0x59bc <__tablejump2__>
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
    4622:	6f 2d       	mov	r22, r15
    4624:	70 e0       	ldi	r23, 0x00	; 0
    4626:	66 0f       	add	r22, r22
    4628:	77 1f       	adc	r23, r23
    462a:	66 0f       	add	r22, r22
    462c:	77 1f       	adc	r23, r23
    462e:	6f 5f       	subi	r22, 0xFF	; 255
    4630:	7f 4f       	sbci	r23, 0xFF	; 255
    4632:	66 0f       	add	r22, r22
    4634:	77 1f       	adc	r23, r23
    4636:	66 0f       	add	r22, r22
    4638:	77 1f       	adc	r23, r23
    463a:	66 0f       	add	r22, r22
    463c:	77 1f       	adc	r23, r23
    463e:	07 2e       	mov	r0, r23
    4640:	00 0c       	add	r0, r0
    4642:	88 0b       	sbc	r24, r24
    4644:	99 0b       	sbc	r25, r25
    4646:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    464a:	80 7f       	andi	r24, 0xF0	; 240
    464c:	88 83       	st	Y, r24
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    464e:	81 e0       	ldi	r24, 0x01	; 1
   CHECK_SOCKNUM();
   switch(sotype)
   {
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
         break;
    4650:	11 c1       	rjmp	.+546    	; 0x4874 <getsockopt+0x280>
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
    4652:	80 e2       	ldi	r24, 0x20	; 32
    4654:	f8 9e       	mul	r15, r24
    4656:	b0 01       	movw	r22, r0
    4658:	11 24       	eor	r1, r1
    465a:	68 5f       	subi	r22, 0xF8	; 248
    465c:	79 4e       	sbci	r23, 0xE9	; 233
    465e:	07 2e       	mov	r0, r23
    4660:	00 0c       	add	r0, r0
    4662:	88 0b       	sbc	r24, r24
    4664:	99 0b       	sbc	r25, r25
    4666:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    466a:	88 83       	st	Y, r24
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    466c:	81 e0       	ldi	r24, 0x01	; 1
      case SO_FLAG:
         *(uint8_t*)arg = getSn_MR(sn) & 0xF0;
         break;
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
         break;
    466e:	02 c1       	rjmp	.+516    	; 0x4874 <getsockopt+0x280>
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
    4670:	80 e2       	ldi	r24, 0x20	; 32
    4672:	f8 9e       	mul	r15, r24
    4674:	b0 01       	movw	r22, r0
    4676:	11 24       	eor	r1, r1
    4678:	68 5f       	subi	r22, 0xF8	; 248
    467a:	7a 4e       	sbci	r23, 0xEA	; 234
    467c:	07 2e       	mov	r0, r23
    467e:	00 0c       	add	r0, r0
    4680:	88 0b       	sbc	r24, r24
    4682:	99 0b       	sbc	r25, r25
    4684:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4688:	88 83       	st	Y, r24
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    468a:	81 e0       	ldi	r24, 0x01	; 1
      case SO_TTL:
         *(uint8_t*) arg = getSn_TTL(sn);
         break;
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
         break;
    468c:	f3 c0       	rjmp	.+486    	; 0x4874 <getsockopt+0x280>
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
    468e:	0f 2d       	mov	r16, r15
    4690:	10 e0       	ldi	r17, 0x00	; 0
    4692:	00 0f       	add	r16, r16
    4694:	11 1f       	adc	r17, r17
    4696:	00 0f       	add	r16, r16
    4698:	11 1f       	adc	r17, r17
    469a:	0f 5f       	subi	r16, 0xFF	; 255
    469c:	1f 4f       	sbci	r17, 0xFF	; 255
    469e:	00 0f       	add	r16, r16
    46a0:	11 1f       	adc	r17, r17
    46a2:	00 0f       	add	r16, r16
    46a4:	11 1f       	adc	r17, r17
    46a6:	00 0f       	add	r16, r16
    46a8:	11 1f       	adc	r17, r17
    46aa:	b8 01       	movw	r22, r16
    46ac:	7e 5e       	subi	r23, 0xEE	; 238
    46ae:	07 2e       	mov	r0, r23
    46b0:	00 0c       	add	r0, r0
    46b2:	88 0b       	sbc	r24, r24
    46b4:	99 0b       	sbc	r25, r25
    46b6:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    46ba:	f8 2e       	mov	r15, r24
    46bc:	b8 01       	movw	r22, r16
    46be:	7d 5e       	subi	r23, 0xED	; 237
    46c0:	07 2e       	mov	r0, r23
    46c2:	00 0c       	add	r0, r0
    46c4:	88 0b       	sbc	r24, r24
    46c6:	99 0b       	sbc	r25, r25
    46c8:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    46cc:	2f 2d       	mov	r18, r15
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	32 2f       	mov	r19, r18
    46d2:	22 27       	eor	r18, r18
    46d4:	28 0f       	add	r18, r24
    46d6:	31 1d       	adc	r19, r1
    46d8:	28 83       	st	Y, r18
    46da:	39 83       	std	Y+1, r19	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    46dc:	81 e0       	ldi	r24, 0x01	; 1
      case SO_TOS:
         *(uint8_t*) arg = getSn_TOS(sn);
         break;
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
         break;
    46de:	ca c0       	rjmp	.+404    	; 0x4874 <getsockopt+0x280>
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
    46e0:	80 e2       	ldi	r24, 0x20	; 32
    46e2:	f8 9e       	mul	r15, r24
    46e4:	b0 01       	movw	r22, r0
    46e6:	11 24       	eor	r1, r1
    46e8:	68 5f       	subi	r22, 0xF8	; 248
    46ea:	73 4f       	sbci	r23, 0xF3	; 243
    46ec:	07 2e       	mov	r0, r23
    46ee:	00 0c       	add	r0, r0
    46f0:	88 0b       	sbc	r24, r24
    46f2:	99 0b       	sbc	r25, r25
    46f4:	24 e0       	ldi	r18, 0x04	; 4
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    46fc:	81 e0       	ldi	r24, 0x01	; 1
      case SO_MSS:   
         *(uint16_t*) arg = getSn_MSSR(sn);
         break;
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
         break;
    46fe:	ba c0       	rjmp	.+372    	; 0x4874 <getsockopt+0x280>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
    4700:	0f 2d       	mov	r16, r15
    4702:	10 e0       	ldi	r17, 0x00	; 0
    4704:	00 0f       	add	r16, r16
    4706:	11 1f       	adc	r17, r17
    4708:	00 0f       	add	r16, r16
    470a:	11 1f       	adc	r17, r17
    470c:	0f 5f       	subi	r16, 0xFF	; 255
    470e:	1f 4f       	sbci	r17, 0xFF	; 255
    4710:	00 0f       	add	r16, r16
    4712:	11 1f       	adc	r17, r17
    4714:	00 0f       	add	r16, r16
    4716:	11 1f       	adc	r17, r17
    4718:	00 0f       	add	r16, r16
    471a:	11 1f       	adc	r17, r17
    471c:	b8 01       	movw	r22, r16
    471e:	70 5f       	subi	r23, 0xF0	; 240
    4720:	07 2e       	mov	r0, r23
    4722:	00 0c       	add	r0, r0
    4724:	88 0b       	sbc	r24, r24
    4726:	99 0b       	sbc	r25, r25
    4728:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    472c:	f8 2e       	mov	r15, r24
    472e:	b8 01       	movw	r22, r16
    4730:	7f 5e       	subi	r23, 0xEF	; 239
    4732:	07 2e       	mov	r0, r23
    4734:	00 0c       	add	r0, r0
    4736:	88 0b       	sbc	r24, r24
    4738:	99 0b       	sbc	r25, r25
    473a:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    473e:	2f 2d       	mov	r18, r15
    4740:	30 e0       	ldi	r19, 0x00	; 0
    4742:	32 2f       	mov	r19, r18
    4744:	22 27       	eor	r18, r18
    4746:	28 0f       	add	r18, r24
    4748:	31 1d       	adc	r19, r1
    474a:	28 83       	st	Y, r18
    474c:	39 83       	std	Y+1, r19	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    474e:	81 e0       	ldi	r24, 0x01	; 1
      case SO_DESTIP:
         getSn_DIPR(sn, (uint8_t*)arg);
         break;
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
         break;
    4750:	91 c0       	rjmp	.+290    	; 0x4874 <getsockopt+0x280>
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
    4752:	0f 2d       	mov	r16, r15
    4754:	10 e0       	ldi	r17, 0x00	; 0
    4756:	00 0f       	add	r16, r16
    4758:	11 1f       	adc	r17, r17
    475a:	00 0f       	add	r16, r16
    475c:	11 1f       	adc	r17, r17
    475e:	0f 5f       	subi	r16, 0xFF	; 255
    4760:	1f 4f       	sbci	r17, 0xFF	; 255
    4762:	00 0f       	add	r16, r16
    4764:	11 1f       	adc	r17, r17
    4766:	00 0f       	add	r16, r16
    4768:	11 1f       	adc	r17, r17
    476a:	00 0f       	add	r16, r16
    476c:	11 1f       	adc	r17, r17
    476e:	b8 01       	movw	r22, r16
    4770:	01 2e       	mov	r0, r17
    4772:	00 0c       	add	r0, r0
    4774:	88 0b       	sbc	r24, r24
    4776:	99 0b       	sbc	r25, r25
    4778:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    477c:	8f 70       	andi	r24, 0x0F	; 15
    477e:	81 30       	cpi	r24, 0x01	; 1
    4780:	09 f0       	breq	.+2      	; 0x4784 <getsockopt+0x190>
    4782:	75 c0       	rjmp	.+234    	; 0x486e <getsockopt+0x27a>
         *(uint16_t*) arg = getSn_KPALVTR(sn);
    4784:	b8 01       	movw	r22, r16
    4786:	71 5d       	subi	r23, 0xD1	; 209
    4788:	07 2e       	mov	r0, r23
    478a:	00 0c       	add	r0, r0
    478c:	88 0b       	sbc	r24, r24
    478e:	99 0b       	sbc	r25, r25
    4790:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4794:	90 e0       	ldi	r25, 0x00	; 0
    4796:	88 83       	st	Y, r24
    4798:	99 83       	std	Y+1, r25	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    479a:	81 e0       	ldi	r24, 0x01	; 1
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
    479c:	6b c0       	rjmp	.+214    	; 0x4874 <getsockopt+0x280>
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
    479e:	8f 2d       	mov	r24, r15
    47a0:	0e 94 2e 26 	call	0x4c5c	; 0x4c5c <getSn_TX_FSR>
    47a4:	88 83       	st	Y, r24
    47a6:	99 83       	std	Y+1, r25	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    47a8:	81 e0       	ldi	r24, 0x01	; 1
         *(uint16_t*) arg = getSn_KPALVTR(sn);
         break;
   #endif      
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
         break;
    47aa:	64 c0       	rjmp	.+200    	; 0x4874 <getsockopt+0x280>
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
    47ac:	8f 2d       	mov	r24, r15
    47ae:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <getSn_RX_RSR>
    47b2:	88 83       	st	Y, r24
    47b4:	99 83       	std	Y+1, r25	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    47b6:	81 e0       	ldi	r24, 0x01	; 1
      case SO_SENDBUF:
         *(uint16_t*) arg = getSn_TX_FSR(sn);
         break;
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
         break;
    47b8:	5d c0       	rjmp	.+186    	; 0x4874 <getsockopt+0x280>
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
    47ba:	80 e2       	ldi	r24, 0x20	; 32
    47bc:	f8 9e       	mul	r15, r24
    47be:	b0 01       	movw	r22, r0
    47c0:	11 24       	eor	r1, r1
    47c2:	68 5f       	subi	r22, 0xF8	; 248
    47c4:	7c 4f       	sbci	r23, 0xFC	; 252
    47c6:	07 2e       	mov	r0, r23
    47c8:	00 0c       	add	r0, r0
    47ca:	88 0b       	sbc	r24, r24
    47cc:	99 0b       	sbc	r25, r25
    47ce:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    47d2:	88 83       	st	Y, r24
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    47d4:	81 e0       	ldi	r24, 0x01	; 1
      case SO_RECVBUF:
         *(uint16_t*) arg = getSn_RX_RSR(sn);
         break;
      case SO_STATUS:
         *(uint8_t*) arg = getSn_SR(sn);
         break;
    47d6:	4e c0       	rjmp	.+156    	; 0x4874 <getsockopt+0x280>
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
    47d8:	0f 2d       	mov	r16, r15
    47da:	10 e0       	ldi	r17, 0x00	; 0
    47dc:	b8 01       	movw	r22, r16
    47de:	66 0f       	add	r22, r22
    47e0:	77 1f       	adc	r23, r23
    47e2:	66 0f       	add	r22, r22
    47e4:	77 1f       	adc	r23, r23
    47e6:	6f 5f       	subi	r22, 0xFF	; 255
    47e8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ea:	66 0f       	add	r22, r22
    47ec:	77 1f       	adc	r23, r23
    47ee:	66 0f       	add	r22, r22
    47f0:	77 1f       	adc	r23, r23
    47f2:	66 0f       	add	r22, r22
    47f4:	77 1f       	adc	r23, r23
    47f6:	07 2e       	mov	r0, r23
    47f8:	00 0c       	add	r0, r0
    47fa:	88 0b       	sbc	r24, r24
    47fc:	99 0b       	sbc	r25, r25
    47fe:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4802:	80 ff       	sbrs	r24, 0
    4804:	07 c0       	rjmp	.+14     	; 0x4814 <getsockopt+0x220>
            *(uint16_t*)arg = getSn_RX_RSR(sn);
    4806:	8f 2d       	mov	r24, r15
    4808:	0e 94 86 26 	call	0x4d0c	; 0x4d0c <getSn_RX_RSR>
    480c:	88 83       	st	Y, r24
    480e:	99 83       	std	Y+1, r25	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	30 c0       	rjmp	.+96     	; 0x4874 <getsockopt+0x280>
         break;
      case SO_REMAINSIZE:
         if(getSn_MR(sn) & Sn_MR_TCP)
            *(uint16_t*)arg = getSn_RX_RSR(sn);
         else
            *(uint16_t*)arg = sock_remained_size[sn];
    4814:	00 0f       	add	r16, r16
    4816:	11 1f       	adc	r17, r17
    4818:	f8 01       	movw	r30, r16
    481a:	ef 5a       	subi	r30, 0xAF	; 175
    481c:	f6 4d       	sbci	r31, 0xD6	; 214
    481e:	80 81       	ld	r24, Z
    4820:	91 81       	ldd	r25, Z+1	; 0x01
    4822:	88 83       	st	Y, r24
    4824:	99 83       	std	Y+1, r25	; 0x01
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    4826:	81 e0       	ldi	r24, 0x01	; 1
    4828:	25 c0       	rjmp	.+74     	; 0x4874 <getsockopt+0x280>
            *(uint16_t*)arg = sock_remained_size[sn];
         break;
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
    482a:	0f 2d       	mov	r16, r15
    482c:	10 e0       	ldi	r17, 0x00	; 0
    482e:	b8 01       	movw	r22, r16
    4830:	66 0f       	add	r22, r22
    4832:	77 1f       	adc	r23, r23
    4834:	66 0f       	add	r22, r22
    4836:	77 1f       	adc	r23, r23
    4838:	6f 5f       	subi	r22, 0xFF	; 255
    483a:	7f 4f       	sbci	r23, 0xFF	; 255
    483c:	66 0f       	add	r22, r22
    483e:	77 1f       	adc	r23, r23
    4840:	66 0f       	add	r22, r22
    4842:	77 1f       	adc	r23, r23
    4844:	66 0f       	add	r22, r22
    4846:	77 1f       	adc	r23, r23
    4848:	07 2e       	mov	r0, r23
    484a:	00 0c       	add	r0, r0
    484c:	88 0b       	sbc	r24, r24
    484e:	99 0b       	sbc	r25, r25
    4850:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4854:	81 30       	cpi	r24, 0x01	; 1
    4856:	69 f0       	breq	.+26     	; 0x4872 <getsockopt+0x27e>
             return SOCKERR_SOCKMODE;
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
    4858:	f8 01       	movw	r30, r16
    485a:	e7 5b       	subi	r30, 0xB7	; 183
    485c:	f6 4d       	sbci	r31, 0xD6	; 214
    485e:	80 81       	ld	r24, Z
    4860:	88 83       	st	Y, r24
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
    4862:	81 e0       	ldi	r24, 0x01	; 1
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
             return SOCKERR_SOCKMODE;
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
    4864:	07 c0       	rjmp	.+14     	; 0x4874 <getsockopt+0x280>
   return SOCK_OK;
}

int8_t  getsockopt(uint8_t sn, sockopt_type sotype, void* arg)
{
   CHECK_SOCKNUM();
    4866:	8f ef       	ldi	r24, 0xFF	; 255
    4868:	05 c0       	rjmp	.+10     	; 0x4874 <getsockopt+0x280>
             return SOCKERR_SOCKMODE;
#endif
         *(uint8_t*)arg = sock_pack_info[sn];
         break;
      default:
         return SOCKERR_SOCKOPT;
    486a:	8e ef       	ldi	r24, 0xFE	; 254
    486c:	03 c0       	rjmp	.+6      	; 0x4874 <getsockopt+0x280>
      case SO_DESTPORT:  
         *(uint16_t*) arg = getSn_DPORT(sn);
         break;
   #if _WIZCHIP_ > 5200   
      case SO_KEEPALIVEAUTO:
         CHECK_SOCKMODE(Sn_MR_TCP);
    486e:	8b ef       	ldi	r24, 0xFB	; 251
    4870:	01 c0       	rjmp	.+2      	; 0x4874 <getsockopt+0x280>
         break;
      case SO_PACKINFO:
         //CHECK_SOCKMODE(Sn_MR_TCP);
#if _WIZCHIP_ != 5300
         if((getSn_MR(sn) == Sn_MR_TCP))
             return SOCKERR_SOCKMODE;
    4872:	8b ef       	ldi	r24, 0xFB	; 251
         break;
      default:
         return SOCKERR_SOCKOPT;
   }
   return SOCK_OK;
}
    4874:	df 91       	pop	r29
    4876:	cf 91       	pop	r28
    4878:	1f 91       	pop	r17
    487a:	0f 91       	pop	r16
    487c:	ff 90       	pop	r15
    487e:	08 95       	ret

00004880 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
    4880:	df 92       	push	r13
    4882:	ef 92       	push	r14
    4884:	ff 92       	push	r15
    4886:	0f 93       	push	r16
    4888:	1f 93       	push	r17
    488a:	cf 93       	push	r28
    488c:	df 93       	push	r29
    488e:	00 d0       	rcall	.+0      	; 0x4890 <WIZCHIP_READ+0x10>
    4890:	cd b7       	in	r28, 0x3d	; 61
    4892:	de b7       	in	r29, 0x3e	; 62
    4894:	f6 2e       	mov	r15, r22
    4896:	e7 2e       	mov	r14, r23
    4898:	d8 2e       	mov	r13, r24
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
    489a:	08 e7       	ldi	r16, 0x78	; 120
    489c:	10 e2       	ldi	r17, 0x20	; 32
    489e:	d8 01       	movw	r26, r16
    48a0:	1a 96       	adiw	r26, 0x0a	; 10
    48a2:	ed 91       	ld	r30, X+
    48a4:	fc 91       	ld	r31, X
    48a6:	1b 97       	sbiw	r26, 0x0b	; 11
    48a8:	19 95       	eicall
   WIZCHIP.CS._select();
    48aa:	d8 01       	movw	r26, r16
    48ac:	1e 96       	adiw	r26, 0x0e	; 14
    48ae:	ed 91       	ld	r30, X+
    48b0:	fc 91       	ld	r31, X
    48b2:	1f 97       	sbiw	r26, 0x0f	; 15
    48b4:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    48b6:	f8 01       	movw	r30, r16
    48b8:	86 89       	ldd	r24, Z+22	; 0x16
    48ba:	97 89       	ldd	r25, Z+23	; 0x17
    48bc:	89 2b       	or	r24, r25
    48be:	31 f0       	breq	.+12     	; 0x48cc <WIZCHIP_READ+0x4c>
    48c0:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <WIZCHIP+0x18>
    48c4:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <WIZCHIP+0x19>
    48c8:	30 97       	sbiw	r30, 0x00	; 0
    48ca:	c1 f4       	brne	.+48     	; 0x48fc <WIZCHIP_READ+0x7c>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    48cc:	08 e7       	ldi	r16, 0x78	; 120
    48ce:	10 e2       	ldi	r17, 0x20	; 32
    48d0:	d8 01       	movw	r26, r16
    48d2:	54 96       	adiw	r26, 0x14	; 20
    48d4:	ed 91       	ld	r30, X+
    48d6:	fc 91       	ld	r31, X
    48d8:	55 97       	sbiw	r26, 0x15	; 21
    48da:	8d 2d       	mov	r24, r13
    48dc:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    48de:	d8 01       	movw	r26, r16
    48e0:	54 96       	adiw	r26, 0x14	; 20
    48e2:	ed 91       	ld	r30, X+
    48e4:	fc 91       	ld	r31, X
    48e6:	55 97       	sbiw	r26, 0x15	; 21
    48e8:	8e 2d       	mov	r24, r14
    48ea:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    48ec:	d8 01       	movw	r26, r16
    48ee:	54 96       	adiw	r26, 0x14	; 20
    48f0:	ed 91       	ld	r30, X+
    48f2:	fc 91       	ld	r31, X
    48f4:	55 97       	sbiw	r26, 0x15	; 21
    48f6:	8f 2d       	mov	r24, r15
    48f8:	19 95       	eicall
    48fa:	08 c0       	rjmp	.+16     	; 0x490c <WIZCHIP_READ+0x8c>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    48fc:	d9 82       	std	Y+1, r13	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    48fe:	ea 82       	std	Y+2, r14	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    4900:	fb 82       	std	Y+3, r15	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    4902:	63 e0       	ldi	r22, 0x03	; 3
    4904:	70 e0       	ldi	r23, 0x00	; 0
    4906:	ce 01       	movw	r24, r28
    4908:	01 96       	adiw	r24, 0x01	; 1
    490a:	19 95       	eicall
   }
   ret = WIZCHIP.IF.SPI._read_byte();
    490c:	08 e7       	ldi	r16, 0x78	; 120
    490e:	10 e2       	ldi	r17, 0x20	; 32
    4910:	d8 01       	movw	r26, r16
    4912:	52 96       	adiw	r26, 0x12	; 18
    4914:	ed 91       	ld	r30, X+
    4916:	fc 91       	ld	r31, X
    4918:	53 97       	sbiw	r26, 0x13	; 19
    491a:	19 95       	eicall
    491c:	f8 2e       	mov	r15, r24

   WIZCHIP.CS._deselect();
    491e:	d8 01       	movw	r26, r16
    4920:	50 96       	adiw	r26, 0x10	; 16
    4922:	ed 91       	ld	r30, X+
    4924:	fc 91       	ld	r31, X
    4926:	51 97       	sbiw	r26, 0x11	; 17
    4928:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    492a:	d8 01       	movw	r26, r16
    492c:	1c 96       	adiw	r26, 0x0c	; 12
    492e:	ed 91       	ld	r30, X+
    4930:	fc 91       	ld	r31, X
    4932:	1d 97       	sbiw	r26, 0x0d	; 13
    4934:	19 95       	eicall
   return ret;
}
    4936:	8f 2d       	mov	r24, r15
    4938:	23 96       	adiw	r28, 0x03	; 3
    493a:	cd bf       	out	0x3d, r28	; 61
    493c:	de bf       	out	0x3e, r29	; 62
    493e:	df 91       	pop	r29
    4940:	cf 91       	pop	r28
    4942:	1f 91       	pop	r17
    4944:	0f 91       	pop	r16
    4946:	ff 90       	pop	r15
    4948:	ef 90       	pop	r14
    494a:	df 90       	pop	r13
    494c:	08 95       	ret

0000494e <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
    494e:	4f 92       	push	r4
    4950:	5f 92       	push	r5
    4952:	6f 92       	push	r6
    4954:	7f 92       	push	r7
    4956:	bf 92       	push	r11
    4958:	cf 92       	push	r12
    495a:	df 92       	push	r13
    495c:	ef 92       	push	r14
    495e:	ff 92       	push	r15
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	00 d0       	rcall	.+0      	; 0x496a <WIZCHIP_WRITE+0x1c>
    496a:	1f 92       	push	r1
    496c:	cd b7       	in	r28, 0x3d	; 61
    496e:	de b7       	in	r29, 0x3e	; 62
    4970:	6b 01       	movw	r12, r22
    4972:	7c 01       	movw	r14, r24
    4974:	b4 2e       	mov	r11, r20
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
    4976:	08 e7       	ldi	r16, 0x78	; 120
    4978:	10 e2       	ldi	r17, 0x20	; 32
    497a:	d8 01       	movw	r26, r16
    497c:	1a 96       	adiw	r26, 0x0a	; 10
    497e:	ed 91       	ld	r30, X+
    4980:	fc 91       	ld	r31, X
    4982:	1b 97       	sbiw	r26, 0x0b	; 11
    4984:	19 95       	eicall
   WIZCHIP.CS._select();
    4986:	d8 01       	movw	r26, r16
    4988:	1e 96       	adiw	r26, 0x0e	; 14
    498a:	ed 91       	ld	r30, X+
    498c:	fc 91       	ld	r31, X
    498e:	1f 97       	sbiw	r26, 0x0f	; 15
    4990:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    4992:	26 01       	movw	r4, r12
    4994:	37 01       	movw	r6, r14
    4996:	68 94       	set
    4998:	42 f8       	bld	r4, 2

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    499a:	d8 01       	movw	r26, r16
    499c:	58 96       	adiw	r26, 0x18	; 24
    499e:	ed 91       	ld	r30, X+
    49a0:	fc 91       	ld	r31, X
    49a2:	59 97       	sbiw	r26, 0x19	; 25
    49a4:	30 97       	sbiw	r30, 0x00	; 0
    49a6:	e1 f4       	brne	.+56     	; 0x49e0 <WIZCHIP_WRITE+0x92>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    49a8:	54 96       	adiw	r26, 0x14	; 20
    49aa:	ed 91       	ld	r30, X+
    49ac:	fc 91       	ld	r31, X
    49ae:	55 97       	sbiw	r26, 0x15	; 21
    49b0:	8e 2d       	mov	r24, r14
    49b2:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    49b4:	d8 01       	movw	r26, r16
    49b6:	54 96       	adiw	r26, 0x14	; 20
    49b8:	ed 91       	ld	r30, X+
    49ba:	fc 91       	ld	r31, X
    49bc:	55 97       	sbiw	r26, 0x15	; 21
    49be:	8d 2d       	mov	r24, r13
    49c0:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    49c2:	d8 01       	movw	r26, r16
    49c4:	54 96       	adiw	r26, 0x14	; 20
    49c6:	ed 91       	ld	r30, X+
    49c8:	fc 91       	ld	r31, X
    49ca:	55 97       	sbiw	r26, 0x15	; 21
    49cc:	84 2d       	mov	r24, r4
    49ce:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte(wb);
    49d0:	d8 01       	movw	r26, r16
    49d2:	54 96       	adiw	r26, 0x14	; 20
    49d4:	ed 91       	ld	r30, X+
    49d6:	fc 91       	ld	r31, X
    49d8:	55 97       	sbiw	r26, 0x15	; 21
    49da:	8b 2d       	mov	r24, r11
    49dc:	19 95       	eicall
    49de:	09 c0       	rjmp	.+18     	; 0x49f2 <WIZCHIP_WRITE+0xa4>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    49e0:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    49e2:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    49e4:	4b 82       	std	Y+3, r4	; 0x03
		spi_data[3] = wb;
    49e6:	bc 82       	std	Y+4, r11	; 0x04
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
    49e8:	64 e0       	ldi	r22, 0x04	; 4
    49ea:	70 e0       	ldi	r23, 0x00	; 0
    49ec:	ce 01       	movw	r24, r28
    49ee:	01 96       	adiw	r24, 0x01	; 1
    49f0:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    49f2:	08 e7       	ldi	r16, 0x78	; 120
    49f4:	10 e2       	ldi	r17, 0x20	; 32
    49f6:	d8 01       	movw	r26, r16
    49f8:	50 96       	adiw	r26, 0x10	; 16
    49fa:	ed 91       	ld	r30, X+
    49fc:	fc 91       	ld	r31, X
    49fe:	51 97       	sbiw	r26, 0x11	; 17
    4a00:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    4a02:	d8 01       	movw	r26, r16
    4a04:	1c 96       	adiw	r26, 0x0c	; 12
    4a06:	ed 91       	ld	r30, X+
    4a08:	fc 91       	ld	r31, X
    4a0a:	1d 97       	sbiw	r26, 0x0d	; 13
    4a0c:	19 95       	eicall
}
    4a0e:	24 96       	adiw	r28, 0x04	; 4
    4a10:	cd bf       	out	0x3d, r28	; 61
    4a12:	de bf       	out	0x3e, r29	; 62
    4a14:	df 91       	pop	r29
    4a16:	cf 91       	pop	r28
    4a18:	1f 91       	pop	r17
    4a1a:	0f 91       	pop	r16
    4a1c:	ff 90       	pop	r15
    4a1e:	ef 90       	pop	r14
    4a20:	df 90       	pop	r13
    4a22:	cf 90       	pop	r12
    4a24:	bf 90       	pop	r11
    4a26:	7f 90       	pop	r7
    4a28:	6f 90       	pop	r6
    4a2a:	5f 90       	pop	r5
    4a2c:	4f 90       	pop	r4
    4a2e:	08 95       	ret

00004a30 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    4a30:	9f 92       	push	r9
    4a32:	af 92       	push	r10
    4a34:	bf 92       	push	r11
    4a36:	cf 92       	push	r12
    4a38:	df 92       	push	r13
    4a3a:	ef 92       	push	r14
    4a3c:	ff 92       	push	r15
    4a3e:	0f 93       	push	r16
    4a40:	1f 93       	push	r17
    4a42:	cf 93       	push	r28
    4a44:	df 93       	push	r29
    4a46:	00 d0       	rcall	.+0      	; 0x4a48 <WIZCHIP_READ_BUF+0x18>
    4a48:	cd b7       	in	r28, 0x3d	; 61
    4a4a:	de b7       	in	r29, 0x3e	; 62
    4a4c:	b6 2e       	mov	r11, r22
    4a4e:	a7 2e       	mov	r10, r23
    4a50:	98 2e       	mov	r9, r24
    4a52:	7a 01       	movw	r14, r20
    4a54:	69 01       	movw	r12, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    4a56:	08 e7       	ldi	r16, 0x78	; 120
    4a58:	10 e2       	ldi	r17, 0x20	; 32
    4a5a:	d8 01       	movw	r26, r16
    4a5c:	1a 96       	adiw	r26, 0x0a	; 10
    4a5e:	ed 91       	ld	r30, X+
    4a60:	fc 91       	ld	r31, X
    4a62:	1b 97       	sbiw	r26, 0x0b	; 11
    4a64:	19 95       	eicall
   WIZCHIP.CS._select();
    4a66:	d8 01       	movw	r26, r16
    4a68:	1e 96       	adiw	r26, 0x0e	; 14
    4a6a:	ed 91       	ld	r30, X+
    4a6c:	fc 91       	ld	r31, X
    4a6e:	1f 97       	sbiw	r26, 0x0f	; 15
    4a70:	19 95       	eicall

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4a72:	f8 01       	movw	r30, r16
    4a74:	86 89       	ldd	r24, Z+22	; 0x16
    4a76:	97 89       	ldd	r25, Z+23	; 0x17
    4a78:	89 2b       	or	r24, r25
    4a7a:	31 f0       	breq	.+12     	; 0x4a88 <WIZCHIP_READ_BUF+0x58>
    4a7c:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <WIZCHIP+0x18>
    4a80:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <WIZCHIP+0x19>
    4a84:	30 97       	sbiw	r30, 0x00	; 0
    4a86:	81 f5       	brne	.+96     	; 0x4ae8 <WIZCHIP_READ_BUF+0xb8>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    4a88:	08 e7       	ldi	r16, 0x78	; 120
    4a8a:	10 e2       	ldi	r17, 0x20	; 32
    4a8c:	d8 01       	movw	r26, r16
    4a8e:	54 96       	adiw	r26, 0x14	; 20
    4a90:	ed 91       	ld	r30, X+
    4a92:	fc 91       	ld	r31, X
    4a94:	55 97       	sbiw	r26, 0x15	; 21
    4a96:	89 2d       	mov	r24, r9
    4a98:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    4a9a:	d8 01       	movw	r26, r16
    4a9c:	54 96       	adiw	r26, 0x14	; 20
    4a9e:	ed 91       	ld	r30, X+
    4aa0:	fc 91       	ld	r31, X
    4aa2:	55 97       	sbiw	r26, 0x15	; 21
    4aa4:	8a 2d       	mov	r24, r10
    4aa6:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    4aa8:	d8 01       	movw	r26, r16
    4aaa:	54 96       	adiw	r26, 0x14	; 20
    4aac:	ed 91       	ld	r30, X+
    4aae:	fc 91       	ld	r31, X
    4ab0:	55 97       	sbiw	r26, 0x15	; 21
    4ab2:	8b 2d       	mov	r24, r11
    4ab4:	19 95       	eicall
		for(i = 0; i < len; i++)
    4ab6:	c1 14       	cp	r12, r1
    4ab8:	d1 04       	cpc	r13, r1
    4aba:	29 f1       	breq	.+74     	; 0x4b06 <WIZCHIP_READ_BUF+0xd6>
    4abc:	87 01       	movw	r16, r14
    4abe:	ce 0c       	add	r12, r14
    4ac0:	df 1c       	adc	r13, r15
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
    4ac2:	0f 2e       	mov	r0, r31
    4ac4:	f8 e7       	ldi	r31, 0x78	; 120
    4ac6:	ef 2e       	mov	r14, r31
    4ac8:	f0 e2       	ldi	r31, 0x20	; 32
    4aca:	ff 2e       	mov	r15, r31
    4acc:	f0 2d       	mov	r31, r0
    4ace:	d7 01       	movw	r26, r14
    4ad0:	52 96       	adiw	r26, 0x12	; 18
    4ad2:	ed 91       	ld	r30, X+
    4ad4:	fc 91       	ld	r31, X
    4ad6:	53 97       	sbiw	r26, 0x13	; 19
    4ad8:	19 95       	eicall
    4ada:	f8 01       	movw	r30, r16
    4adc:	81 93       	st	Z+, r24
    4ade:	8f 01       	movw	r16, r30
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    4ae0:	ec 15       	cp	r30, r12
    4ae2:	fd 05       	cpc	r31, r13
    4ae4:	a1 f7       	brne	.-24     	; 0x4ace <WIZCHIP_READ_BUF+0x9e>
    4ae6:	0f c0       	rjmp	.+30     	; 0x4b06 <WIZCHIP_READ_BUF+0xd6>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    4ae8:	99 82       	std	Y+1, r9	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    4aea:	aa 82       	std	Y+2, r10	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    4aec:	bb 82       	std	Y+3, r11	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    4aee:	63 e0       	ldi	r22, 0x03	; 3
    4af0:	70 e0       	ldi	r23, 0x00	; 0
    4af2:	ce 01       	movw	r24, r28
    4af4:	01 96       	adiw	r24, 0x01	; 1
    4af6:	19 95       	eicall
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
    4af8:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <WIZCHIP+0x16>
    4afc:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <WIZCHIP+0x17>
    4b00:	b6 01       	movw	r22, r12
    4b02:	c7 01       	movw	r24, r14
    4b04:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    4b06:	08 e7       	ldi	r16, 0x78	; 120
    4b08:	10 e2       	ldi	r17, 0x20	; 32
    4b0a:	d8 01       	movw	r26, r16
    4b0c:	50 96       	adiw	r26, 0x10	; 16
    4b0e:	ed 91       	ld	r30, X+
    4b10:	fc 91       	ld	r31, X
    4b12:	51 97       	sbiw	r26, 0x11	; 17
    4b14:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    4b16:	d8 01       	movw	r26, r16
    4b18:	1c 96       	adiw	r26, 0x0c	; 12
    4b1a:	ed 91       	ld	r30, X+
    4b1c:	fc 91       	ld	r31, X
    4b1e:	1d 97       	sbiw	r26, 0x0d	; 13
    4b20:	19 95       	eicall
}
    4b22:	23 96       	adiw	r28, 0x03	; 3
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	df 91       	pop	r29
    4b2a:	cf 91       	pop	r28
    4b2c:	1f 91       	pop	r17
    4b2e:	0f 91       	pop	r16
    4b30:	ff 90       	pop	r15
    4b32:	ef 90       	pop	r14
    4b34:	df 90       	pop	r13
    4b36:	cf 90       	pop	r12
    4b38:	bf 90       	pop	r11
    4b3a:	af 90       	pop	r10
    4b3c:	9f 90       	pop	r9
    4b3e:	08 95       	ret

00004b40 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
    4b40:	4f 92       	push	r4
    4b42:	5f 92       	push	r5
    4b44:	6f 92       	push	r6
    4b46:	7f 92       	push	r7
    4b48:	8f 92       	push	r8
    4b4a:	9f 92       	push	r9
    4b4c:	af 92       	push	r10
    4b4e:	bf 92       	push	r11
    4b50:	cf 92       	push	r12
    4b52:	df 92       	push	r13
    4b54:	ef 92       	push	r14
    4b56:	ff 92       	push	r15
    4b58:	0f 93       	push	r16
    4b5a:	1f 93       	push	r17
    4b5c:	cf 93       	push	r28
    4b5e:	df 93       	push	r29
    4b60:	00 d0       	rcall	.+0      	; 0x4b62 <WIZCHIP_WRITE_BUF+0x22>
    4b62:	cd b7       	in	r28, 0x3d	; 61
    4b64:	de b7       	in	r29, 0x3e	; 62
    4b66:	6b 01       	movw	r12, r22
    4b68:	7c 01       	movw	r14, r24
    4b6a:	4a 01       	movw	r8, r20
    4b6c:	59 01       	movw	r10, r18
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
    4b6e:	08 e7       	ldi	r16, 0x78	; 120
    4b70:	10 e2       	ldi	r17, 0x20	; 32
    4b72:	d8 01       	movw	r26, r16
    4b74:	1a 96       	adiw	r26, 0x0a	; 10
    4b76:	ed 91       	ld	r30, X+
    4b78:	fc 91       	ld	r31, X
    4b7a:	1b 97       	sbiw	r26, 0x0b	; 11
    4b7c:	19 95       	eicall
   WIZCHIP.CS._select();
    4b7e:	d8 01       	movw	r26, r16
    4b80:	1e 96       	adiw	r26, 0x0e	; 14
    4b82:	ed 91       	ld	r30, X+
    4b84:	fc 91       	ld	r31, X
    4b86:	1f 97       	sbiw	r26, 0x0f	; 15
    4b88:	19 95       	eicall

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
    4b8a:	26 01       	movw	r4, r12
    4b8c:	37 01       	movw	r6, r14
    4b8e:	68 94       	set
    4b90:	42 f8       	bld	r4, 2

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
    4b92:	d8 01       	movw	r26, r16
    4b94:	58 96       	adiw	r26, 0x18	; 24
    4b96:	ed 91       	ld	r30, X+
    4b98:	fc 91       	ld	r31, X
    4b9a:	59 97       	sbiw	r26, 0x19	; 25
    4b9c:	30 97       	sbiw	r30, 0x00	; 0
    4b9e:	69 f5       	brne	.+90     	; 0x4bfa <WIZCHIP_WRITE_BUF+0xba>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
    4ba0:	54 96       	adiw	r26, 0x14	; 20
    4ba2:	ed 91       	ld	r30, X+
    4ba4:	fc 91       	ld	r31, X
    4ba6:	55 97       	sbiw	r26, 0x15	; 21
    4ba8:	8e 2d       	mov	r24, r14
    4baa:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
    4bac:	d8 01       	movw	r26, r16
    4bae:	54 96       	adiw	r26, 0x14	; 20
    4bb0:	ed 91       	ld	r30, X+
    4bb2:	fc 91       	ld	r31, X
    4bb4:	55 97       	sbiw	r26, 0x15	; 21
    4bb6:	8d 2d       	mov	r24, r13
    4bb8:	19 95       	eicall
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
    4bba:	d8 01       	movw	r26, r16
    4bbc:	54 96       	adiw	r26, 0x14	; 20
    4bbe:	ed 91       	ld	r30, X+
    4bc0:	fc 91       	ld	r31, X
    4bc2:	55 97       	sbiw	r26, 0x15	; 21
    4bc4:	84 2d       	mov	r24, r4
    4bc6:	19 95       	eicall
		for(i = 0; i < len; i++)
    4bc8:	a1 14       	cp	r10, r1
    4bca:	b1 04       	cpc	r11, r1
    4bcc:	29 f1       	breq	.+74     	; 0x4c18 <WIZCHIP_WRITE_BUF+0xd8>
    4bce:	84 01       	movw	r16, r8
    4bd0:	a8 0c       	add	r10, r8
    4bd2:	b9 1c       	adc	r11, r9
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
    4bd4:	0f 2e       	mov	r0, r31
    4bd6:	f8 e7       	ldi	r31, 0x78	; 120
    4bd8:	ef 2e       	mov	r14, r31
    4bda:	f0 e2       	ldi	r31, 0x20	; 32
    4bdc:	ff 2e       	mov	r15, r31
    4bde:	f0 2d       	mov	r31, r0
    4be0:	d7 01       	movw	r26, r14
    4be2:	54 96       	adiw	r26, 0x14	; 20
    4be4:	ed 91       	ld	r30, X+
    4be6:	fc 91       	ld	r31, X
    4be8:	55 97       	sbiw	r26, 0x15	; 21
    4bea:	d8 01       	movw	r26, r16
    4bec:	8d 91       	ld	r24, X+
    4bee:	8d 01       	movw	r16, r26
    4bf0:	19 95       	eicall
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
		for(i = 0; i < len; i++)
    4bf2:	0a 15       	cp	r16, r10
    4bf4:	1b 05       	cpc	r17, r11
    4bf6:	a1 f7       	brne	.-24     	; 0x4be0 <WIZCHIP_WRITE_BUF+0xa0>
    4bf8:	0f c0       	rjmp	.+30     	; 0x4c18 <WIZCHIP_WRITE_BUF+0xd8>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
    4bfa:	e9 82       	std	Y+1, r14	; 0x01
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
    4bfc:	da 82       	std	Y+2, r13	; 0x02
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
    4bfe:	4b 82       	std	Y+3, r4	; 0x03
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
    4c00:	63 e0       	ldi	r22, 0x03	; 3
    4c02:	70 e0       	ldi	r23, 0x00	; 0
    4c04:	ce 01       	movw	r24, r28
    4c06:	01 96       	adiw	r24, 0x01	; 1
    4c08:	19 95       	eicall
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
    4c0a:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <WIZCHIP+0x18>
    4c0e:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <WIZCHIP+0x19>
    4c12:	b5 01       	movw	r22, r10
    4c14:	c4 01       	movw	r24, r8
    4c16:	19 95       	eicall
   }

   WIZCHIP.CS._deselect();
    4c18:	08 e7       	ldi	r16, 0x78	; 120
    4c1a:	10 e2       	ldi	r17, 0x20	; 32
    4c1c:	d8 01       	movw	r26, r16
    4c1e:	50 96       	adiw	r26, 0x10	; 16
    4c20:	ed 91       	ld	r30, X+
    4c22:	fc 91       	ld	r31, X
    4c24:	51 97       	sbiw	r26, 0x11	; 17
    4c26:	19 95       	eicall
   WIZCHIP_CRITICAL_EXIT();
    4c28:	d8 01       	movw	r26, r16
    4c2a:	1c 96       	adiw	r26, 0x0c	; 12
    4c2c:	ed 91       	ld	r30, X+
    4c2e:	fc 91       	ld	r31, X
    4c30:	1d 97       	sbiw	r26, 0x0d	; 13
    4c32:	19 95       	eicall
}
    4c34:	23 96       	adiw	r28, 0x03	; 3
    4c36:	cd bf       	out	0x3d, r28	; 61
    4c38:	de bf       	out	0x3e, r29	; 62
    4c3a:	df 91       	pop	r29
    4c3c:	cf 91       	pop	r28
    4c3e:	1f 91       	pop	r17
    4c40:	0f 91       	pop	r16
    4c42:	ff 90       	pop	r15
    4c44:	ef 90       	pop	r14
    4c46:	df 90       	pop	r13
    4c48:	cf 90       	pop	r12
    4c4a:	bf 90       	pop	r11
    4c4c:	af 90       	pop	r10
    4c4e:	9f 90       	pop	r9
    4c50:	8f 90       	pop	r8
    4c52:	7f 90       	pop	r7
    4c54:	6f 90       	pop	r6
    4c56:	5f 90       	pop	r5
    4c58:	4f 90       	pop	r4
    4c5a:	08 95       	ret

00004c5c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
    4c5c:	8f 92       	push	r8
    4c5e:	9f 92       	push	r9
    4c60:	af 92       	push	r10
    4c62:	bf 92       	push	r11
    4c64:	cf 92       	push	r12
    4c66:	df 92       	push	r13
    4c68:	ef 92       	push	r14
    4c6a:	ff 92       	push	r15
    4c6c:	0f 93       	push	r16
    4c6e:	1f 93       	push	r17
    4c70:	cf 93       	push	r28
    4c72:	df 93       	push	r29
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    4c74:	24 e0       	ldi	r18, 0x04	; 4
    4c76:	82 9f       	mul	r24, r18
    4c78:	c0 01       	movw	r24, r0
    4c7a:	11 24       	eor	r1, r1
    4c7c:	6c 01       	movw	r12, r24
    4c7e:	2f ef       	ldi	r18, 0xFF	; 255
    4c80:	c2 1a       	sub	r12, r18
    4c82:	d2 0a       	sbc	r13, r18
    4c84:	cc 0c       	add	r12, r12
    4c86:	dd 1c       	adc	r13, r13
    4c88:	cc 0c       	add	r12, r12
    4c8a:	dd 1c       	adc	r13, r13
    4c8c:	cc 0c       	add	r12, r12
    4c8e:	dd 1c       	adc	r13, r13
    4c90:	46 01       	movw	r8, r12
    4c92:	80 ee       	ldi	r24, 0xE0	; 224
    4c94:	98 1a       	sub	r9, r24
    4c96:	09 2c       	mov	r0, r9
    4c98:	00 0c       	add	r0, r0
    4c9a:	aa 08       	sbc	r10, r10
    4c9c:	bb 08       	sbc	r11, r11
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    4c9e:	2f ed       	ldi	r18, 0xDF	; 223
    4ca0:	d2 1a       	sub	r13, r18
    4ca2:	0d 2c       	mov	r0, r13
    4ca4:	00 0c       	add	r0, r0
    4ca6:	ee 08       	sbc	r14, r14
    4ca8:	ff 08       	sbc	r15, r15
}


uint16_t getSn_TX_FSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    4caa:	00 e0       	ldi	r16, 0x00	; 0
    4cac:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
    4cae:	c5 01       	movw	r24, r10
    4cb0:	b4 01       	movw	r22, r8
    4cb2:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    4cb6:	c8 2f       	mov	r28, r24
    4cb8:	d0 e0       	ldi	r29, 0x00	; 0
    4cba:	dc 2f       	mov	r29, r28
    4cbc:	cc 27       	eor	r28, r28
    4cbe:	c7 01       	movw	r24, r14
    4cc0:	b6 01       	movw	r22, r12
    4cc2:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4cc6:	c8 0f       	add	r28, r24
    4cc8:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    4cca:	20 97       	sbiw	r28, 0x00	; 0
    4ccc:	71 f0       	breq	.+28     	; 0x4cea <getSn_TX_FSR+0x8e>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
    4cce:	c5 01       	movw	r24, r10
    4cd0:	b4 01       	movw	r22, r8
    4cd2:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
    4cd6:	08 2f       	mov	r16, r24
    4cd8:	10 e0       	ldi	r17, 0x00	; 0
    4cda:	10 2f       	mov	r17, r16
    4cdc:	00 27       	eor	r16, r16
    4cde:	c7 01       	movw	r24, r14
    4ce0:	b6 01       	movw	r22, r12
    4ce2:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4ce6:	08 0f       	add	r16, r24
    4ce8:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    4cea:	0c 17       	cp	r16, r28
    4cec:	1d 07       	cpc	r17, r29
    4cee:	f9 f6       	brne	.-66     	; 0x4cae <getSn_TX_FSR+0x52>
   return val;
}
    4cf0:	ce 01       	movw	r24, r28
    4cf2:	df 91       	pop	r29
    4cf4:	cf 91       	pop	r28
    4cf6:	1f 91       	pop	r17
    4cf8:	0f 91       	pop	r16
    4cfa:	ff 90       	pop	r15
    4cfc:	ef 90       	pop	r14
    4cfe:	df 90       	pop	r13
    4d00:	cf 90       	pop	r12
    4d02:	bf 90       	pop	r11
    4d04:	af 90       	pop	r10
    4d06:	9f 90       	pop	r9
    4d08:	8f 90       	pop	r8
    4d0a:	08 95       	ret

00004d0c <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
    4d0c:	8f 92       	push	r8
    4d0e:	9f 92       	push	r9
    4d10:	af 92       	push	r10
    4d12:	bf 92       	push	r11
    4d14:	cf 92       	push	r12
    4d16:	df 92       	push	r13
    4d18:	ef 92       	push	r14
    4d1a:	ff 92       	push	r15
    4d1c:	0f 93       	push	r16
    4d1e:	1f 93       	push	r17
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
   uint16_t val=0,val1=0;

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    4d24:	24 e0       	ldi	r18, 0x04	; 4
    4d26:	82 9f       	mul	r24, r18
    4d28:	c0 01       	movw	r24, r0
    4d2a:	11 24       	eor	r1, r1
    4d2c:	6c 01       	movw	r12, r24
    4d2e:	2f ef       	ldi	r18, 0xFF	; 255
    4d30:	c2 1a       	sub	r12, r18
    4d32:	d2 0a       	sbc	r13, r18
    4d34:	cc 0c       	add	r12, r12
    4d36:	dd 1c       	adc	r13, r13
    4d38:	cc 0c       	add	r12, r12
    4d3a:	dd 1c       	adc	r13, r13
    4d3c:	cc 0c       	add	r12, r12
    4d3e:	dd 1c       	adc	r13, r13
    4d40:	46 01       	movw	r8, r12
    4d42:	8a ed       	ldi	r24, 0xDA	; 218
    4d44:	98 1a       	sub	r9, r24
    4d46:	09 2c       	mov	r0, r9
    4d48:	00 0c       	add	r0, r0
    4d4a:	aa 08       	sbc	r10, r10
    4d4c:	bb 08       	sbc	r11, r11
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    4d4e:	29 ed       	ldi	r18, 0xD9	; 217
    4d50:	d2 1a       	sub	r13, r18
    4d52:	0d 2c       	mov	r0, r13
    4d54:	00 0c       	add	r0, r0
    4d56:	ee 08       	sbc	r14, r14
    4d58:	ff 08       	sbc	r15, r15
}


uint16_t getSn_RX_RSR(uint8_t sn)
{
   uint16_t val=0,val1=0;
    4d5a:	00 e0       	ldi	r16, 0x00	; 0
    4d5c:	10 e0       	ldi	r17, 0x00	; 0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
    4d5e:	c5 01       	movw	r24, r10
    4d60:	b4 01       	movw	r22, r8
    4d62:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    4d66:	c8 2f       	mov	r28, r24
    4d68:	d0 e0       	ldi	r29, 0x00	; 0
    4d6a:	dc 2f       	mov	r29, r28
    4d6c:	cc 27       	eor	r28, r28
    4d6e:	c7 01       	movw	r24, r14
    4d70:	b6 01       	movw	r22, r12
    4d72:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4d76:	c8 0f       	add	r28, r24
    4d78:	d1 1d       	adc	r29, r1
      if (val1 != 0)
    4d7a:	20 97       	sbiw	r28, 0x00	; 0
    4d7c:	71 f0       	breq	.+28     	; 0x4d9a <getSn_RX_RSR+0x8e>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
    4d7e:	c5 01       	movw	r24, r10
    4d80:	b4 01       	movw	r22, r8
    4d82:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
    4d86:	08 2f       	mov	r16, r24
    4d88:	10 e0       	ldi	r17, 0x00	; 0
    4d8a:	10 2f       	mov	r17, r16
    4d8c:	00 27       	eor	r16, r16
    4d8e:	c7 01       	movw	r24, r14
    4d90:	b6 01       	movw	r22, r12
    4d92:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4d96:	08 0f       	add	r16, r24
    4d98:	11 1d       	adc	r17, r1
      }
   }while (val != val1);
    4d9a:	0c 17       	cp	r16, r28
    4d9c:	1d 07       	cpc	r17, r29
    4d9e:	f9 f6       	brne	.-66     	; 0x4d5e <getSn_RX_RSR+0x52>
   return val;
}
    4da0:	ce 01       	movw	r24, r28
    4da2:	df 91       	pop	r29
    4da4:	cf 91       	pop	r28
    4da6:	1f 91       	pop	r17
    4da8:	0f 91       	pop	r16
    4daa:	ff 90       	pop	r15
    4dac:	ef 90       	pop	r14
    4dae:	df 90       	pop	r13
    4db0:	cf 90       	pop	r12
    4db2:	bf 90       	pop	r11
    4db4:	af 90       	pop	r10
    4db6:	9f 90       	pop	r9
    4db8:	8f 90       	pop	r8
    4dba:	08 95       	ret

00004dbc <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    4dbc:	2f 92       	push	r2
    4dbe:	3f 92       	push	r3
    4dc0:	4f 92       	push	r4
    4dc2:	5f 92       	push	r5
    4dc4:	6f 92       	push	r6
    4dc6:	7f 92       	push	r7
    4dc8:	8f 92       	push	r8
    4dca:	9f 92       	push	r9
    4dcc:	af 92       	push	r10
    4dce:	bf 92       	push	r11
    4dd0:	cf 92       	push	r12
    4dd2:	df 92       	push	r13
    4dd4:	ef 92       	push	r14
    4dd6:	ff 92       	push	r15
    4dd8:	0f 93       	push	r16
    4dda:	1f 93       	push	r17
    4ddc:	cf 93       	push	r28
    4dde:	df 93       	push	r29
    4de0:	00 d0       	rcall	.+0      	; 0x4de2 <wiz_send_data+0x26>
    4de2:	1f 92       	push	r1
    4de4:	cd b7       	in	r28, 0x3d	; 61
    4de6:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
    4de8:	41 15       	cp	r20, r1
    4dea:	51 05       	cpc	r21, r1
    4dec:	09 f4       	brne	.+2      	; 0x4df0 <wiz_send_data+0x34>
    4dee:	5b c0       	rjmp	.+182    	; 0x4ea6 <wiz_send_data+0xea>
    4df0:	1a 01       	movw	r2, r20
    4df2:	69 83       	std	Y+1, r22	; 0x01
    4df4:	7a 83       	std	Y+2, r23	; 0x02
   ptr = getSn_TX_WR(sn);
    4df6:	88 2e       	mov	r8, r24
    4df8:	91 2c       	mov	r9, r1
    4dfa:	88 0c       	add	r8, r8
    4dfc:	99 1c       	adc	r9, r9
    4dfe:	88 0c       	add	r8, r8
    4e00:	99 1c       	adc	r9, r9
    4e02:	64 01       	movw	r12, r8
    4e04:	2f ef       	ldi	r18, 0xFF	; 255
    4e06:	c2 1a       	sub	r12, r18
    4e08:	d2 0a       	sbc	r13, r18
    4e0a:	cc 0c       	add	r12, r12
    4e0c:	dd 1c       	adc	r13, r13
    4e0e:	cc 0c       	add	r12, r12
    4e10:	dd 1c       	adc	r13, r13
    4e12:	cc 0c       	add	r12, r12
    4e14:	dd 1c       	adc	r13, r13
    4e16:	26 01       	movw	r4, r12
    4e18:	3c ed       	ldi	r19, 0xDC	; 220
    4e1a:	53 1a       	sub	r5, r19
    4e1c:	05 2c       	mov	r0, r5
    4e1e:	00 0c       	add	r0, r0
    4e20:	66 08       	sbc	r6, r6
    4e22:	77 08       	sbc	r7, r7
    4e24:	c3 01       	movw	r24, r6
    4e26:	b2 01       	movw	r22, r4
    4e28:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4e2c:	08 2f       	mov	r16, r24
    4e2e:	8b ed       	ldi	r24, 0xDB	; 219
    4e30:	d8 1a       	sub	r13, r24
    4e32:	0d 2c       	mov	r0, r13
    4e34:	00 0c       	add	r0, r0
    4e36:	ee 08       	sbc	r14, r14
    4e38:	ff 08       	sbc	r15, r15
    4e3a:	c7 01       	movw	r24, r14
    4e3c:	b6 01       	movw	r22, r12
    4e3e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4e42:	10 e0       	ldi	r17, 0x00	; 0
    4e44:	10 2f       	mov	r17, r16
    4e46:	00 27       	eor	r16, r16
    4e48:	08 0f       	add	r16, r24
    4e4a:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
    4e4c:	94 01       	movw	r18, r8
    4e4e:	2e 5f       	subi	r18, 0xFE	; 254
    4e50:	3f 4f       	sbci	r19, 0xFF	; 255
    4e52:	22 0f       	add	r18, r18
    4e54:	33 1f       	adc	r19, r19
    4e56:	22 0f       	add	r18, r18
    4e58:	33 1f       	adc	r19, r19
    4e5a:	22 0f       	add	r18, r18
    4e5c:	33 1f       	adc	r19, r19
    4e5e:	c9 01       	movw	r24, r18
    4e60:	33 0f       	add	r19, r19
    4e62:	aa 0b       	sbc	r26, r26
    4e64:	bb 0b       	sbc	r27, r27
    4e66:	a8 01       	movw	r20, r16
    4e68:	60 e0       	ldi	r22, 0x00	; 0
    4e6a:	70 e0       	ldi	r23, 0x00	; 0
    4e6c:	76 2f       	mov	r23, r22
    4e6e:	65 2f       	mov	r22, r21
    4e70:	54 2f       	mov	r21, r20
    4e72:	44 27       	eor	r20, r20
    4e74:	4c 01       	movw	r8, r24
    4e76:	5d 01       	movw	r10, r26
    4e78:	84 0e       	add	r8, r20
    4e7a:	95 1e       	adc	r9, r21
    4e7c:	a6 1e       	adc	r10, r22
    4e7e:	b7 1e       	adc	r11, r23
    4e80:	c5 01       	movw	r24, r10
    4e82:	b4 01       	movw	r22, r8
    4e84:	91 01       	movw	r18, r2
    4e86:	49 81       	ldd	r20, Y+1	; 0x01
    4e88:	5a 81       	ldd	r21, Y+2	; 0x02
    4e8a:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
    4e8e:	02 0d       	add	r16, r2
    4e90:	13 1d       	adc	r17, r3
   setSn_TX_WR(sn,ptr);
    4e92:	41 2f       	mov	r20, r17
    4e94:	c3 01       	movw	r24, r6
    4e96:	b2 01       	movw	r22, r4
    4e98:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    4e9c:	40 2f       	mov	r20, r16
    4e9e:	c7 01       	movw	r24, r14
    4ea0:	b6 01       	movw	r22, r12
    4ea2:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
}
    4ea6:	24 96       	adiw	r28, 0x04	; 4
    4ea8:	cd bf       	out	0x3d, r28	; 61
    4eaa:	de bf       	out	0x3e, r29	; 62
    4eac:	df 91       	pop	r29
    4eae:	cf 91       	pop	r28
    4eb0:	1f 91       	pop	r17
    4eb2:	0f 91       	pop	r16
    4eb4:	ff 90       	pop	r15
    4eb6:	ef 90       	pop	r14
    4eb8:	df 90       	pop	r13
    4eba:	cf 90       	pop	r12
    4ebc:	bf 90       	pop	r11
    4ebe:	af 90       	pop	r10
    4ec0:	9f 90       	pop	r9
    4ec2:	8f 90       	pop	r8
    4ec4:	7f 90       	pop	r7
    4ec6:	6f 90       	pop	r6
    4ec8:	5f 90       	pop	r5
    4eca:	4f 90       	pop	r4
    4ecc:	3f 90       	pop	r3
    4ece:	2f 90       	pop	r2
    4ed0:	08 95       	ret

00004ed2 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
    4ed2:	2f 92       	push	r2
    4ed4:	3f 92       	push	r3
    4ed6:	4f 92       	push	r4
    4ed8:	5f 92       	push	r5
    4eda:	6f 92       	push	r6
    4edc:	7f 92       	push	r7
    4ede:	8f 92       	push	r8
    4ee0:	9f 92       	push	r9
    4ee2:	af 92       	push	r10
    4ee4:	bf 92       	push	r11
    4ee6:	cf 92       	push	r12
    4ee8:	df 92       	push	r13
    4eea:	ef 92       	push	r14
    4eec:	ff 92       	push	r15
    4eee:	0f 93       	push	r16
    4ef0:	1f 93       	push	r17
    4ef2:	cf 93       	push	r28
    4ef4:	df 93       	push	r29
    4ef6:	00 d0       	rcall	.+0      	; 0x4ef8 <wiz_recv_data+0x26>
    4ef8:	1f 92       	push	r1
    4efa:	cd b7       	in	r28, 0x3d	; 61
    4efc:	de b7       	in	r29, 0x3e	; 62
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
    4efe:	41 15       	cp	r20, r1
    4f00:	51 05       	cpc	r21, r1
    4f02:	09 f4       	brne	.+2      	; 0x4f06 <wiz_recv_data+0x34>
    4f04:	5b c0       	rjmp	.+182    	; 0x4fbc <wiz_recv_data+0xea>
    4f06:	1a 01       	movw	r2, r20
    4f08:	69 83       	std	Y+1, r22	; 0x01
    4f0a:	7a 83       	std	Y+2, r23	; 0x02
   ptr = getSn_RX_RD(sn);
    4f0c:	88 2e       	mov	r8, r24
    4f0e:	91 2c       	mov	r9, r1
    4f10:	88 0c       	add	r8, r8
    4f12:	99 1c       	adc	r9, r9
    4f14:	88 0c       	add	r8, r8
    4f16:	99 1c       	adc	r9, r9
    4f18:	64 01       	movw	r12, r8
    4f1a:	2f ef       	ldi	r18, 0xFF	; 255
    4f1c:	c2 1a       	sub	r12, r18
    4f1e:	d2 0a       	sbc	r13, r18
    4f20:	cc 0c       	add	r12, r12
    4f22:	dd 1c       	adc	r13, r13
    4f24:	cc 0c       	add	r12, r12
    4f26:	dd 1c       	adc	r13, r13
    4f28:	cc 0c       	add	r12, r12
    4f2a:	dd 1c       	adc	r13, r13
    4f2c:	26 01       	movw	r4, r12
    4f2e:	38 ed       	ldi	r19, 0xD8	; 216
    4f30:	53 1a       	sub	r5, r19
    4f32:	05 2c       	mov	r0, r5
    4f34:	00 0c       	add	r0, r0
    4f36:	66 08       	sbc	r6, r6
    4f38:	77 08       	sbc	r7, r7
    4f3a:	c3 01       	movw	r24, r6
    4f3c:	b2 01       	movw	r22, r4
    4f3e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4f42:	08 2f       	mov	r16, r24
    4f44:	87 ed       	ldi	r24, 0xD7	; 215
    4f46:	d8 1a       	sub	r13, r24
    4f48:	0d 2c       	mov	r0, r13
    4f4a:	00 0c       	add	r0, r0
    4f4c:	ee 08       	sbc	r14, r14
    4f4e:	ff 08       	sbc	r15, r15
    4f50:	c7 01       	movw	r24, r14
    4f52:	b6 01       	movw	r22, r12
    4f54:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    4f58:	10 e0       	ldi	r17, 0x00	; 0
    4f5a:	10 2f       	mov	r17, r16
    4f5c:	00 27       	eor	r16, r16
    4f5e:	08 0f       	add	r16, r24
    4f60:	11 1d       	adc	r17, r1
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
    4f62:	94 01       	movw	r18, r8
    4f64:	2d 5f       	subi	r18, 0xFD	; 253
    4f66:	3f 4f       	sbci	r19, 0xFF	; 255
    4f68:	22 0f       	add	r18, r18
    4f6a:	33 1f       	adc	r19, r19
    4f6c:	22 0f       	add	r18, r18
    4f6e:	33 1f       	adc	r19, r19
    4f70:	22 0f       	add	r18, r18
    4f72:	33 1f       	adc	r19, r19
    4f74:	c9 01       	movw	r24, r18
    4f76:	33 0f       	add	r19, r19
    4f78:	aa 0b       	sbc	r26, r26
    4f7a:	bb 0b       	sbc	r27, r27
    4f7c:	a8 01       	movw	r20, r16
    4f7e:	60 e0       	ldi	r22, 0x00	; 0
    4f80:	70 e0       	ldi	r23, 0x00	; 0
    4f82:	76 2f       	mov	r23, r22
    4f84:	65 2f       	mov	r22, r21
    4f86:	54 2f       	mov	r21, r20
    4f88:	44 27       	eor	r20, r20
    4f8a:	4c 01       	movw	r8, r24
    4f8c:	5d 01       	movw	r10, r26
    4f8e:	84 0e       	add	r8, r20
    4f90:	95 1e       	adc	r9, r21
    4f92:	a6 1e       	adc	r10, r22
    4f94:	b7 1e       	adc	r11, r23
    4f96:	c5 01       	movw	r24, r10
    4f98:	b4 01       	movw	r22, r8
    4f9a:	91 01       	movw	r18, r2
    4f9c:	49 81       	ldd	r20, Y+1	; 0x01
    4f9e:	5a 81       	ldd	r21, Y+2	; 0x02
    4fa0:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
   ptr += len;
    4fa4:	02 0d       	add	r16, r2
    4fa6:	13 1d       	adc	r17, r3
   
   setSn_RX_RD(sn,ptr);
    4fa8:	41 2f       	mov	r20, r17
    4faa:	c3 01       	movw	r24, r6
    4fac:	b2 01       	movw	r22, r4
    4fae:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    4fb2:	40 2f       	mov	r20, r16
    4fb4:	c7 01       	movw	r24, r14
    4fb6:	b6 01       	movw	r22, r12
    4fb8:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
}
    4fbc:	24 96       	adiw	r28, 0x04	; 4
    4fbe:	cd bf       	out	0x3d, r28	; 61
    4fc0:	de bf       	out	0x3e, r29	; 62
    4fc2:	df 91       	pop	r29
    4fc4:	cf 91       	pop	r28
    4fc6:	1f 91       	pop	r17
    4fc8:	0f 91       	pop	r16
    4fca:	ff 90       	pop	r15
    4fcc:	ef 90       	pop	r14
    4fce:	df 90       	pop	r13
    4fd0:	cf 90       	pop	r12
    4fd2:	bf 90       	pop	r11
    4fd4:	af 90       	pop	r10
    4fd6:	9f 90       	pop	r9
    4fd8:	8f 90       	pop	r8
    4fda:	7f 90       	pop	r7
    4fdc:	6f 90       	pop	r6
    4fde:	5f 90       	pop	r5
    4fe0:	4f 90       	pop	r4
    4fe2:	3f 90       	pop	r3
    4fe4:	2f 90       	pop	r2
    4fe6:	08 95       	ret

00004fe8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
    4fe8:	8f 92       	push	r8
    4fea:	9f 92       	push	r9
    4fec:	af 92       	push	r10
    4fee:	bf 92       	push	r11
    4ff0:	cf 92       	push	r12
    4ff2:	df 92       	push	r13
    4ff4:	ef 92       	push	r14
    4ff6:	ff 92       	push	r15
    4ff8:	1f 93       	push	r17
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	eb 01       	movw	r28, r22
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
    5000:	24 e0       	ldi	r18, 0x04	; 4
    5002:	82 9f       	mul	r24, r18
    5004:	c0 01       	movw	r24, r0
    5006:	11 24       	eor	r1, r1
    5008:	6c 01       	movw	r12, r24
    500a:	2f ef       	ldi	r18, 0xFF	; 255
    500c:	c2 1a       	sub	r12, r18
    500e:	d2 0a       	sbc	r13, r18
    5010:	cc 0c       	add	r12, r12
    5012:	dd 1c       	adc	r13, r13
    5014:	cc 0c       	add	r12, r12
    5016:	dd 1c       	adc	r13, r13
    5018:	cc 0c       	add	r12, r12
    501a:	dd 1c       	adc	r13, r13
    501c:	46 01       	movw	r8, r12
    501e:	88 ed       	ldi	r24, 0xD8	; 216
    5020:	98 1a       	sub	r9, r24
    5022:	09 2c       	mov	r0, r9
    5024:	00 0c       	add	r0, r0
    5026:	aa 08       	sbc	r10, r10
    5028:	bb 08       	sbc	r11, r11
    502a:	c5 01       	movw	r24, r10
    502c:	b4 01       	movw	r22, r8
    502e:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    5032:	18 2f       	mov	r17, r24
    5034:	27 ed       	ldi	r18, 0xD7	; 215
    5036:	d2 1a       	sub	r13, r18
    5038:	0d 2c       	mov	r0, r13
    503a:	00 0c       	add	r0, r0
    503c:	ee 08       	sbc	r14, r14
    503e:	ff 08       	sbc	r15, r15
    5040:	c7 01       	movw	r24, r14
    5042:	b6 01       	movw	r22, r12
    5044:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
   ptr += len;
    5048:	21 2f       	mov	r18, r17
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	32 2f       	mov	r19, r18
    504e:	22 27       	eor	r18, r18
    5050:	c8 0f       	add	r28, r24
    5052:	d1 1d       	adc	r29, r1
    5054:	c2 0f       	add	r28, r18
    5056:	d3 1f       	adc	r29, r19
   setSn_RX_RD(sn,ptr);
    5058:	4d 2f       	mov	r20, r29
    505a:	c5 01       	movw	r24, r10
    505c:	b4 01       	movw	r22, r8
    505e:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    5062:	4c 2f       	mov	r20, r28
    5064:	c7 01       	movw	r24, r14
    5066:	b6 01       	movw	r22, r12
    5068:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
}
    506c:	df 91       	pop	r29
    506e:	cf 91       	pop	r28
    5070:	1f 91       	pop	r17
    5072:	ff 90       	pop	r15
    5074:	ef 90       	pop	r14
    5076:	df 90       	pop	r13
    5078:	cf 90       	pop	r12
    507a:	bf 90       	pop	r11
    507c:	af 90       	pop	r10
    507e:	9f 90       	pop	r9
    5080:	8f 90       	pop	r8
    5082:	08 95       	ret

00005084 <wizchip_cris_enter>:
   #endif      
      default:
         return -1;
   }
   return 0;
}
    5084:	08 95       	ret

00005086 <wizchip_cris_exit>:
    5086:	08 95       	ret

00005088 <wizchip_cs_select>:
    5088:	08 95       	ret

0000508a <wizchip_cs_deselect>:
    508a:	08 95       	ret

0000508c <wizchip_bus_readdata>:
    508c:	fb 01       	movw	r30, r22
    508e:	80 81       	ld	r24, Z
    5090:	08 95       	ret

00005092 <wizchip_bus_writedata>:
    5092:	fb 01       	movw	r30, r22
    5094:	40 83       	st	Z, r20
    5096:	08 95       	ret

00005098 <wizchip_spi_readbyte>:
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	08 95       	ret

0000509c <wizchip_spi_writebyte>:
    509c:	08 95       	ret

0000509e <wizchip_spi_readburst>:
    509e:	08 95       	ret

000050a0 <wizchip_spi_writeburst>:
    50a0:	08 95       	ret

000050a2 <reg_wizchip_cs_cbfunc>:
    50a2:	00 97       	sbiw	r24, 0x00	; 0
    50a4:	19 f0       	breq	.+6      	; 0x50ac <reg_wizchip_cs_cbfunc+0xa>
    50a6:	61 15       	cp	r22, r1
    50a8:	71 05       	cpc	r23, r1
    50aa:	59 f4       	brne	.+22     	; 0x50c2 <reg_wizchip_cs_cbfunc+0x20>
    50ac:	e8 e7       	ldi	r30, 0x78	; 120
    50ae:	f0 e2       	ldi	r31, 0x20	; 32
    50b0:	84 e4       	ldi	r24, 0x44	; 68
    50b2:	98 e2       	ldi	r25, 0x28	; 40
    50b4:	86 87       	std	Z+14, r24	; 0x0e
    50b6:	97 87       	std	Z+15, r25	; 0x0f
    50b8:	85 e4       	ldi	r24, 0x45	; 69
    50ba:	98 e2       	ldi	r25, 0x28	; 40
    50bc:	80 8b       	std	Z+16, r24	; 0x10
    50be:	91 8b       	std	Z+17, r25	; 0x11
    50c0:	08 95       	ret
    50c2:	e8 e7       	ldi	r30, 0x78	; 120
    50c4:	f0 e2       	ldi	r31, 0x20	; 32
    50c6:	86 87       	std	Z+14, r24	; 0x0e
    50c8:	97 87       	std	Z+15, r25	; 0x0f
    50ca:	60 8b       	std	Z+16, r22	; 0x10
    50cc:	71 8b       	std	Z+17, r23	; 0x11
    50ce:	08 95       	ret

000050d0 <reg_wizchip_spi_cbfunc>:
    50d0:	20 91 78 20 	lds	r18, 0x2078	; 0x802078 <WIZCHIP>
    50d4:	30 91 79 20 	lds	r19, 0x2079	; 0x802079 <WIZCHIP+0x1>
    50d8:	22 27       	eor	r18, r18
    50da:	32 70       	andi	r19, 0x02	; 2
    50dc:	21 15       	cp	r18, r1
    50de:	31 05       	cpc	r19, r1
    50e0:	e9 f3       	breq	.-6      	; 0x50dc <reg_wizchip_spi_cbfunc+0xc>
    50e2:	00 97       	sbiw	r24, 0x00	; 0
    50e4:	19 f0       	breq	.+6      	; 0x50ec <reg_wizchip_spi_cbfunc+0x1c>
    50e6:	61 15       	cp	r22, r1
    50e8:	71 05       	cpc	r23, r1
    50ea:	59 f4       	brne	.+22     	; 0x5102 <reg_wizchip_spi_cbfunc+0x32>
    50ec:	e8 e7       	ldi	r30, 0x78	; 120
    50ee:	f0 e2       	ldi	r31, 0x20	; 32
    50f0:	8c e4       	ldi	r24, 0x4C	; 76
    50f2:	98 e2       	ldi	r25, 0x28	; 40
    50f4:	82 8b       	std	Z+18, r24	; 0x12
    50f6:	93 8b       	std	Z+19, r25	; 0x13
    50f8:	8e e4       	ldi	r24, 0x4E	; 78
    50fa:	98 e2       	ldi	r25, 0x28	; 40
    50fc:	84 8b       	std	Z+20, r24	; 0x14
    50fe:	95 8b       	std	Z+21, r25	; 0x15
    5100:	08 95       	ret
    5102:	e8 e7       	ldi	r30, 0x78	; 120
    5104:	f0 e2       	ldi	r31, 0x20	; 32
    5106:	82 8b       	std	Z+18, r24	; 0x12
    5108:	93 8b       	std	Z+19, r25	; 0x13
    510a:	64 8b       	std	Z+20, r22	; 0x14
    510c:	75 8b       	std	Z+21, r23	; 0x15
    510e:	08 95       	ret

00005110 <reg_wizchip_spiburst_cbfunc>:
    5110:	20 91 78 20 	lds	r18, 0x2078	; 0x802078 <WIZCHIP>
    5114:	30 91 79 20 	lds	r19, 0x2079	; 0x802079 <WIZCHIP+0x1>
    5118:	22 27       	eor	r18, r18
    511a:	32 70       	andi	r19, 0x02	; 2
    511c:	21 15       	cp	r18, r1
    511e:	31 05       	cpc	r19, r1
    5120:	e9 f3       	breq	.-6      	; 0x511c <reg_wizchip_spiburst_cbfunc+0xc>
    5122:	00 97       	sbiw	r24, 0x00	; 0
    5124:	19 f0       	breq	.+6      	; 0x512c <reg_wizchip_spiburst_cbfunc+0x1c>
    5126:	61 15       	cp	r22, r1
    5128:	71 05       	cpc	r23, r1
    512a:	59 f4       	brne	.+22     	; 0x5142 <reg_wizchip_spiburst_cbfunc+0x32>
    512c:	e8 e7       	ldi	r30, 0x78	; 120
    512e:	f0 e2       	ldi	r31, 0x20	; 32
    5130:	8f e4       	ldi	r24, 0x4F	; 79
    5132:	98 e2       	ldi	r25, 0x28	; 40
    5134:	86 8b       	std	Z+22, r24	; 0x16
    5136:	97 8b       	std	Z+23, r25	; 0x17
    5138:	80 e5       	ldi	r24, 0x50	; 80
    513a:	98 e2       	ldi	r25, 0x28	; 40
    513c:	80 8f       	std	Z+24, r24	; 0x18
    513e:	91 8f       	std	Z+25, r25	; 0x19
    5140:	08 95       	ret
    5142:	e8 e7       	ldi	r30, 0x78	; 120
    5144:	f0 e2       	ldi	r31, 0x20	; 32
    5146:	86 8b       	std	Z+22, r24	; 0x16
    5148:	97 8b       	std	Z+23, r25	; 0x17
    514a:	60 8f       	std	Z+24, r22	; 0x18
    514c:	71 8f       	std	Z+25, r23	; 0x19
    514e:	08 95       	ret

00005150 <wizchip_sw_reset>:
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
    5158:	62 97       	sbiw	r28, 0x12	; 18
    515a:	cd bf       	out	0x3d, r28	; 61
    515c:	de bf       	out	0x3e, r29	; 62
    515e:	26 e0       	ldi	r18, 0x06	; 6
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	ae 01       	movw	r20, r28
    5164:	43 5f       	subi	r20, 0xF3	; 243
    5166:	5f 4f       	sbci	r21, 0xFF	; 255
    5168:	60 e0       	ldi	r22, 0x00	; 0
    516a:	79 e0       	ldi	r23, 0x09	; 9
    516c:	80 e0       	ldi	r24, 0x00	; 0
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
    5174:	24 e0       	ldi	r18, 0x04	; 4
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	ae 01       	movw	r20, r28
    517a:	4f 5f       	subi	r20, 0xFF	; 255
    517c:	5f 4f       	sbci	r21, 0xFF	; 255
    517e:	60 e0       	ldi	r22, 0x00	; 0
    5180:	71 e0       	ldi	r23, 0x01	; 1
    5182:	80 e0       	ldi	r24, 0x00	; 0
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
    518a:	24 e0       	ldi	r18, 0x04	; 4
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	ae 01       	movw	r20, r28
    5190:	4b 5f       	subi	r20, 0xFB	; 251
    5192:	5f 4f       	sbci	r21, 0xFF	; 255
    5194:	60 e0       	ldi	r22, 0x00	; 0
    5196:	75 e0       	ldi	r23, 0x05	; 5
    5198:	80 e0       	ldi	r24, 0x00	; 0
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
    51a0:	24 e0       	ldi	r18, 0x04	; 4
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	ae 01       	movw	r20, r28
    51a6:	47 5f       	subi	r20, 0xF7	; 247
    51a8:	5f 4f       	sbci	r21, 0xFF	; 255
    51aa:	60 e0       	ldi	r22, 0x00	; 0
    51ac:	7f e0       	ldi	r23, 0x0F	; 15
    51ae:	80 e0       	ldi	r24, 0x00	; 0
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
    51b6:	40 e8       	ldi	r20, 0x80	; 128
    51b8:	60 e0       	ldi	r22, 0x00	; 0
    51ba:	70 e0       	ldi	r23, 0x00	; 0
    51bc:	cb 01       	movw	r24, r22
    51be:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    51c2:	60 e0       	ldi	r22, 0x00	; 0
    51c4:	70 e0       	ldi	r23, 0x00	; 0
    51c6:	cb 01       	movw	r24, r22
    51c8:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    51cc:	26 e0       	ldi	r18, 0x06	; 6
    51ce:	30 e0       	ldi	r19, 0x00	; 0
    51d0:	ae 01       	movw	r20, r28
    51d2:	43 5f       	subi	r20, 0xF3	; 243
    51d4:	5f 4f       	sbci	r21, 0xFF	; 255
    51d6:	60 e0       	ldi	r22, 0x00	; 0
    51d8:	79 e0       	ldi	r23, 0x09	; 9
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	90 e0       	ldi	r25, 0x00	; 0
    51de:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
    51e2:	24 e0       	ldi	r18, 0x04	; 4
    51e4:	30 e0       	ldi	r19, 0x00	; 0
    51e6:	ae 01       	movw	r20, r28
    51e8:	4f 5f       	subi	r20, 0xFF	; 255
    51ea:	5f 4f       	sbci	r21, 0xFF	; 255
    51ec:	60 e0       	ldi	r22, 0x00	; 0
    51ee:	71 e0       	ldi	r23, 0x01	; 1
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	90 e0       	ldi	r25, 0x00	; 0
    51f4:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
    51f8:	24 e0       	ldi	r18, 0x04	; 4
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	ae 01       	movw	r20, r28
    51fe:	4b 5f       	subi	r20, 0xFB	; 251
    5200:	5f 4f       	sbci	r21, 0xFF	; 255
    5202:	60 e0       	ldi	r22, 0x00	; 0
    5204:	75 e0       	ldi	r23, 0x05	; 5
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
    520e:	24 e0       	ldi	r18, 0x04	; 4
    5210:	30 e0       	ldi	r19, 0x00	; 0
    5212:	ae 01       	movw	r20, r28
    5214:	47 5f       	subi	r20, 0xF7	; 247
    5216:	5f 4f       	sbci	r21, 0xFF	; 255
    5218:	60 e0       	ldi	r22, 0x00	; 0
    521a:	7f e0       	ldi	r23, 0x0F	; 15
    521c:	80 e0       	ldi	r24, 0x00	; 0
    521e:	90 e0       	ldi	r25, 0x00	; 0
    5220:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
    5224:	62 96       	adiw	r28, 0x12	; 18
    5226:	cd bf       	out	0x3d, r28	; 61
    5228:	de bf       	out	0x3e, r29	; 62
    522a:	df 91       	pop	r29
    522c:	cf 91       	pop	r28
    522e:	08 95       	ret

00005230 <wizchip_init>:
    5230:	ef 92       	push	r14
    5232:	ff 92       	push	r15
    5234:	0f 93       	push	r16
    5236:	1f 93       	push	r17
    5238:	cf 93       	push	r28
    523a:	df 93       	push	r29
    523c:	ec 01       	movw	r28, r24
    523e:	7b 01       	movw	r14, r22
    5240:	0e 94 a8 28 	call	0x5150	; 0x5150 <wizchip_sw_reset>
    5244:	20 97       	sbiw	r28, 0x00	; 0
    5246:	09 f4       	brne	.+2      	; 0x524a <wizchip_init+0x1a>
    5248:	5a c0       	rjmp	.+180    	; 0x52fe <wizchip_init+0xce>
    524a:	88 81       	ld	r24, Y
    524c:	81 31       	cpi	r24, 0x11	; 17
    524e:	0c f0       	brlt	.+2      	; 0x5252 <wizchip_init+0x22>
    5250:	45 c0       	rjmp	.+138    	; 0x52dc <wizchip_init+0xac>
    5252:	fe 01       	movw	r30, r28
    5254:	31 96       	adiw	r30, 0x01	; 1
    5256:	9e 01       	movw	r18, r28
    5258:	28 5f       	subi	r18, 0xF8	; 248
    525a:	3f 4f       	sbci	r19, 0xFF	; 255
    525c:	91 91       	ld	r25, Z+
    525e:	89 0f       	add	r24, r25
    5260:	81 31       	cpi	r24, 0x11	; 17
    5262:	f4 f5       	brge	.+124    	; 0x52e0 <wizchip_init+0xb0>
    5264:	e2 17       	cp	r30, r18
    5266:	f3 07       	cpc	r31, r19
    5268:	c9 f7       	brne	.-14     	; 0x525c <wizchip_init+0x2c>
    526a:	8e 01       	movw	r16, r28
    526c:	c1 e0       	ldi	r28, 0x01	; 1
    526e:	d0 e0       	ldi	r29, 0x00	; 0
    5270:	f8 01       	movw	r30, r16
    5272:	41 91       	ld	r20, Z+
    5274:	8f 01       	movw	r16, r30
    5276:	be 01       	movw	r22, r28
    5278:	66 0f       	add	r22, r22
    527a:	77 1f       	adc	r23, r23
    527c:	66 0f       	add	r22, r22
    527e:	77 1f       	adc	r23, r23
    5280:	66 0f       	add	r22, r22
    5282:	77 1f       	adc	r23, r23
    5284:	71 5e       	subi	r23, 0xE1	; 225
    5286:	07 2e       	mov	r0, r23
    5288:	00 0c       	add	r0, r0
    528a:	88 0b       	sbc	r24, r24
    528c:	99 0b       	sbc	r25, r25
    528e:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    5292:	24 96       	adiw	r28, 0x04	; 4
    5294:	c1 32       	cpi	r28, 0x21	; 33
    5296:	d1 05       	cpc	r29, r1
    5298:	59 f7       	brne	.-42     	; 0x5270 <wizchip_init+0x40>
    529a:	31 c0       	rjmp	.+98     	; 0x52fe <wizchip_init+0xce>
    529c:	91 91       	ld	r25, Z+
    529e:	89 0f       	add	r24, r25
    52a0:	81 31       	cpi	r24, 0x11	; 17
    52a2:	04 f5       	brge	.+64     	; 0x52e4 <wizchip_init+0xb4>
    52a4:	e2 17       	cp	r30, r18
    52a6:	f3 07       	cpc	r31, r19
    52a8:	c9 f7       	brne	.-14     	; 0x529c <wizchip_init+0x6c>
    52aa:	c1 e0       	ldi	r28, 0x01	; 1
    52ac:	d0 e0       	ldi	r29, 0x00	; 0
    52ae:	f7 01       	movw	r30, r14
    52b0:	41 91       	ld	r20, Z+
    52b2:	7f 01       	movw	r14, r30
    52b4:	be 01       	movw	r22, r28
    52b6:	66 0f       	add	r22, r22
    52b8:	77 1f       	adc	r23, r23
    52ba:	66 0f       	add	r22, r22
    52bc:	77 1f       	adc	r23, r23
    52be:	66 0f       	add	r22, r22
    52c0:	77 1f       	adc	r23, r23
    52c2:	72 5e       	subi	r23, 0xE2	; 226
    52c4:	07 2e       	mov	r0, r23
    52c6:	00 0c       	add	r0, r0
    52c8:	88 0b       	sbc	r24, r24
    52ca:	99 0b       	sbc	r25, r25
    52cc:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    52d0:	24 96       	adiw	r28, 0x04	; 4
    52d2:	c1 32       	cpi	r28, 0x21	; 33
    52d4:	d1 05       	cpc	r29, r1
    52d6:	59 f7       	brne	.-42     	; 0x52ae <wizchip_init+0x7e>
    52d8:	80 e0       	ldi	r24, 0x00	; 0
    52da:	15 c0       	rjmp	.+42     	; 0x5306 <wizchip_init+0xd6>
    52dc:	8f ef       	ldi	r24, 0xFF	; 255
    52de:	13 c0       	rjmp	.+38     	; 0x5306 <wizchip_init+0xd6>
    52e0:	8f ef       	ldi	r24, 0xFF	; 255
    52e2:	11 c0       	rjmp	.+34     	; 0x5306 <wizchip_init+0xd6>
    52e4:	8f ef       	ldi	r24, 0xFF	; 255
    52e6:	0f c0       	rjmp	.+30     	; 0x5306 <wizchip_init+0xd6>
    52e8:	8f ef       	ldi	r24, 0xFF	; 255
    52ea:	0d c0       	rjmp	.+26     	; 0x5306 <wizchip_init+0xd6>
    52ec:	f7 01       	movw	r30, r14
    52ee:	80 81       	ld	r24, Z
    52f0:	81 31       	cpi	r24, 0x11	; 17
    52f2:	d4 f7       	brge	.-12     	; 0x52e8 <wizchip_init+0xb8>
    52f4:	31 96       	adiw	r30, 0x01	; 1
    52f6:	97 01       	movw	r18, r14
    52f8:	28 5f       	subi	r18, 0xF8	; 248
    52fa:	3f 4f       	sbci	r19, 0xFF	; 255
    52fc:	cf cf       	rjmp	.-98     	; 0x529c <wizchip_init+0x6c>
    52fe:	e1 14       	cp	r14, r1
    5300:	f1 04       	cpc	r15, r1
    5302:	a1 f7       	brne	.-24     	; 0x52ec <wizchip_init+0xbc>
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	df 91       	pop	r29
    5308:	cf 91       	pop	r28
    530a:	1f 91       	pop	r17
    530c:	0f 91       	pop	r16
    530e:	ff 90       	pop	r15
    5310:	ef 90       	pop	r14
    5312:	08 95       	ret

00005314 <wizphy_reset>:
    5314:	60 e0       	ldi	r22, 0x00	; 0
    5316:	7e e2       	ldi	r23, 0x2E	; 46
    5318:	80 e0       	ldi	r24, 0x00	; 0
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    5320:	48 2f       	mov	r20, r24
    5322:	4f 77       	andi	r20, 0x7F	; 127
    5324:	60 e0       	ldi	r22, 0x00	; 0
    5326:	7e e2       	ldi	r23, 0x2E	; 46
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    5330:	60 e0       	ldi	r22, 0x00	; 0
    5332:	7e e2       	ldi	r23, 0x2E	; 46
    5334:	80 e0       	ldi	r24, 0x00	; 0
    5336:	90 e0       	ldi	r25, 0x00	; 0
    5338:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    533c:	48 2f       	mov	r20, r24
    533e:	40 68       	ori	r20, 0x80	; 128
    5340:	60 e0       	ldi	r22, 0x00	; 0
    5342:	7e e2       	ldi	r23, 0x2E	; 46
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    534c:	08 95       	ret

0000534e <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
    534e:	cf 93       	push	r28
    5350:	df 93       	push	r29
    5352:	ec 01       	movw	r28, r24
   setSHAR(pnetinfo->mac);
    5354:	26 e0       	ldi	r18, 0x06	; 6
    5356:	30 e0       	ldi	r19, 0x00	; 0
    5358:	ac 01       	movw	r20, r24
    535a:	60 e0       	ldi	r22, 0x00	; 0
    535c:	79 e0       	ldi	r23, 0x09	; 9
    535e:	80 e0       	ldi	r24, 0x00	; 0
    5360:	90 e0       	ldi	r25, 0x00	; 0
    5362:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
    5366:	ae 01       	movw	r20, r28
    5368:	42 5f       	subi	r20, 0xF2	; 242
    536a:	5f 4f       	sbci	r21, 0xFF	; 255
    536c:	24 e0       	ldi	r18, 0x04	; 4
    536e:	30 e0       	ldi	r19, 0x00	; 0
    5370:	60 e0       	ldi	r22, 0x00	; 0
    5372:	71 e0       	ldi	r23, 0x01	; 1
    5374:	80 e0       	ldi	r24, 0x00	; 0
    5376:	90 e0       	ldi	r25, 0x00	; 0
    5378:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
    537c:	ae 01       	movw	r20, r28
    537e:	46 5f       	subi	r20, 0xF6	; 246
    5380:	5f 4f       	sbci	r21, 0xFF	; 255
    5382:	24 e0       	ldi	r18, 0x04	; 4
    5384:	30 e0       	ldi	r19, 0x00	; 0
    5386:	60 e0       	ldi	r22, 0x00	; 0
    5388:	75 e0       	ldi	r23, 0x05	; 5
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	90 e0       	ldi	r25, 0x00	; 0
    538e:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
    5392:	ae 01       	movw	r20, r28
    5394:	4a 5f       	subi	r20, 0xFA	; 250
    5396:	5f 4f       	sbci	r21, 0xFF	; 255
    5398:	24 e0       	ldi	r18, 0x04	; 4
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	60 e0       	ldi	r22, 0x00	; 0
    539e:	7f e0       	ldi	r23, 0x0F	; 15
    53a0:	80 e0       	ldi	r24, 0x00	; 0
    53a2:	90 e0       	ldi	r25, 0x00	; 0
    53a4:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
    53a8:	e6 e6       	ldi	r30, 0x66	; 102
    53aa:	f9 e2       	ldi	r31, 0x29	; 41
    53ac:	8a 89       	ldd	r24, Y+18	; 0x12
    53ae:	80 83       	st	Z, r24
   _DNS_[1] = pnetinfo->dns[1];
    53b0:	8b 89       	ldd	r24, Y+19	; 0x13
    53b2:	81 83       	std	Z+1, r24	; 0x01
   _DNS_[2] = pnetinfo->dns[2];
    53b4:	8c 89       	ldd	r24, Y+20	; 0x14
    53b6:	82 83       	std	Z+2, r24	; 0x02
   _DNS_[3] = pnetinfo->dns[3];
    53b8:	8d 89       	ldd	r24, Y+21	; 0x15
    53ba:	83 83       	std	Z+3, r24	; 0x03
   _DHCP_   = pnetinfo->dhcp;
    53bc:	8e 89       	ldd	r24, Y+22	; 0x16
    53be:	80 93 65 29 	sts	0x2965, r24	; 0x802965 <_DHCP_>
}
    53c2:	df 91       	pop	r29
    53c4:	cf 91       	pop	r28
    53c6:	08 95       	ret

000053c8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
    53c8:	cf 93       	push	r28
    53ca:	df 93       	push	r29
    53cc:	ec 01       	movw	r28, r24
   getSHAR(pnetinfo->mac);
    53ce:	26 e0       	ldi	r18, 0x06	; 6
    53d0:	30 e0       	ldi	r19, 0x00	; 0
    53d2:	ac 01       	movw	r20, r24
    53d4:	60 e0       	ldi	r22, 0x00	; 0
    53d6:	79 e0       	ldi	r23, 0x09	; 9
    53d8:	80 e0       	ldi	r24, 0x00	; 0
    53da:	90 e0       	ldi	r25, 0x00	; 0
    53dc:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
    53e0:	ae 01       	movw	r20, r28
    53e2:	42 5f       	subi	r20, 0xF2	; 242
    53e4:	5f 4f       	sbci	r21, 0xFF	; 255
    53e6:	24 e0       	ldi	r18, 0x04	; 4
    53e8:	30 e0       	ldi	r19, 0x00	; 0
    53ea:	60 e0       	ldi	r22, 0x00	; 0
    53ec:	71 e0       	ldi	r23, 0x01	; 1
    53ee:	80 e0       	ldi	r24, 0x00	; 0
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
    53f6:	ae 01       	movw	r20, r28
    53f8:	46 5f       	subi	r20, 0xF6	; 246
    53fa:	5f 4f       	sbci	r21, 0xFF	; 255
    53fc:	24 e0       	ldi	r18, 0x04	; 4
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	60 e0       	ldi	r22, 0x00	; 0
    5402:	75 e0       	ldi	r23, 0x05	; 5
    5404:	80 e0       	ldi	r24, 0x00	; 0
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
    540c:	ae 01       	movw	r20, r28
    540e:	4a 5f       	subi	r20, 0xFA	; 250
    5410:	5f 4f       	sbci	r21, 0xFF	; 255
    5412:	24 e0       	ldi	r18, 0x04	; 4
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	60 e0       	ldi	r22, 0x00	; 0
    5418:	7f e0       	ldi	r23, 0x0F	; 15
    541a:	80 e0       	ldi	r24, 0x00	; 0
    541c:	90 e0       	ldi	r25, 0x00	; 0
    541e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
    5422:	e6 e6       	ldi	r30, 0x66	; 102
    5424:	f9 e2       	ldi	r31, 0x29	; 41
    5426:	80 81       	ld	r24, Z
    5428:	8a 8b       	std	Y+18, r24	; 0x12
   pnetinfo->dns[1]= _DNS_[1];
    542a:	81 81       	ldd	r24, Z+1	; 0x01
    542c:	8b 8b       	std	Y+19, r24	; 0x13
   pnetinfo->dns[2]= _DNS_[2];
    542e:	82 81       	ldd	r24, Z+2	; 0x02
    5430:	8c 8b       	std	Y+20, r24	; 0x14
   pnetinfo->dns[3]= _DNS_[3];
    5432:	83 81       	ldd	r24, Z+3	; 0x03
    5434:	8d 8b       	std	Y+21, r24	; 0x15
   pnetinfo->dhcp  = _DHCP_;
    5436:	80 91 65 29 	lds	r24, 0x2965	; 0x802965 <_DHCP_>
    543a:	8e 8b       	std	Y+22, r24	; 0x16
}
    543c:	df 91       	pop	r29
    543e:	cf 91       	pop	r28
    5440:	08 95       	ret

00005442 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
    5442:	cf 93       	push	r28
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    5444:	98 2f       	mov	r25, r24
    5446:	95 7c       	andi	r25, 0xC5	; 197
    5448:	79 f4       	brne	.+30     	; 0x5468 <wizchip_setnetmode+0x26>
    544a:	c8 2f       	mov	r28, r24
#endif      
   tmp = getMR();
    544c:	60 e0       	ldi	r22, 0x00	; 0
    544e:	70 e0       	ldi	r23, 0x00	; 0
    5450:	cb 01       	movw	r24, r22
    5452:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
   setMR(tmp);
    5456:	4c 2f       	mov	r20, r28
    5458:	48 2b       	or	r20, r24
    545a:	60 e0       	ldi	r22, 0x00	; 0
    545c:	70 e0       	ldi	r23, 0x00	; 0
    545e:	cb 01       	movw	r24, r22
    5460:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
   return 0;
    5464:	80 e0       	ldi	r24, 0x00	; 0
    5466:	01 c0       	rjmp	.+2      	; 0x546a <wizchip_setnetmode+0x28>
{
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
    5468:	8f ef       	ldi	r24, 0xFF	; 255
#endif      
   tmp = getMR();
   tmp |= (uint8_t)netmode;
   setMR(tmp);
   return 0;
}
    546a:	cf 91       	pop	r28
    546c:	08 95       	ret

0000546e <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
    546e:	60 e0       	ldi	r22, 0x00	; 0
    5470:	70 e0       	ldi	r23, 0x00	; 0
    5472:	cb 01       	movw	r24, r22
    5474:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
}
    5478:	08 95       	ret

0000547a <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
    547a:	cf 93       	push	r28
    547c:	df 93       	push	r29
    547e:	ec 01       	movw	r28, r24
   setRCR(nettime->retry_cnt);
    5480:	48 81       	ld	r20, Y
    5482:	60 e0       	ldi	r22, 0x00	; 0
    5484:	7b e1       	ldi	r23, 0x1B	; 27
    5486:	80 e0       	ldi	r24, 0x00	; 0
    5488:	90 e0       	ldi	r25, 0x00	; 0
    548a:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
    548e:	4a 81       	ldd	r20, Y+2	; 0x02
    5490:	60 e0       	ldi	r22, 0x00	; 0
    5492:	79 e1       	ldi	r23, 0x19	; 25
    5494:	80 e0       	ldi	r24, 0x00	; 0
    5496:	90 e0       	ldi	r25, 0x00	; 0
    5498:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
    549c:	49 81       	ldd	r20, Y+1	; 0x01
    549e:	60 e0       	ldi	r22, 0x00	; 0
    54a0:	7a e1       	ldi	r23, 0x1A	; 26
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	90 e0       	ldi	r25, 0x00	; 0
    54a6:	0e 94 a7 24 	call	0x494e	; 0x494e <WIZCHIP_WRITE>
}
    54aa:	df 91       	pop	r29
    54ac:	cf 91       	pop	r28
    54ae:	08 95       	ret

000054b0 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
    54b0:	1f 93       	push	r17
    54b2:	cf 93       	push	r28
    54b4:	df 93       	push	r29
    54b6:	ec 01       	movw	r28, r24
   nettime->retry_cnt = getRCR();
    54b8:	60 e0       	ldi	r22, 0x00	; 0
    54ba:	7b e1       	ldi	r23, 0x1B	; 27
    54bc:	80 e0       	ldi	r24, 0x00	; 0
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    54c4:	88 83       	st	Y, r24
   nettime->time_100us = getRTR();
    54c6:	60 e0       	ldi	r22, 0x00	; 0
    54c8:	79 e1       	ldi	r23, 0x19	; 25
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    54d2:	18 2f       	mov	r17, r24
    54d4:	60 e0       	ldi	r22, 0x00	; 0
    54d6:	7a e1       	ldi	r23, 0x1A	; 26
    54d8:	80 e0       	ldi	r24, 0x00	; 0
    54da:	90 e0       	ldi	r25, 0x00	; 0
    54dc:	0e 94 40 24 	call	0x4880	; 0x4880 <WIZCHIP_READ>
    54e0:	21 2f       	mov	r18, r17
    54e2:	30 e0       	ldi	r19, 0x00	; 0
    54e4:	32 2f       	mov	r19, r18
    54e6:	22 27       	eor	r18, r18
    54e8:	28 0f       	add	r18, r24
    54ea:	31 1d       	adc	r19, r1
    54ec:	29 83       	std	Y+1, r18	; 0x01
    54ee:	3a 83       	std	Y+2, r19	; 0x02
}
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	1f 91       	pop	r17
    54f6:	08 95       	ret

000054f8 <ctlnetwork>:
   return 0;
}


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
    54f8:	cf 93       	push	r28
    54fa:	df 93       	push	r29
    54fc:	eb 01       	movw	r28, r22
   
   switch(cntype)
    54fe:	82 30       	cpi	r24, 0x02	; 2
    5500:	b1 f0       	breq	.+44     	; 0x552e <ctlnetwork+0x36>
    5502:	28 f4       	brcc	.+10     	; 0x550e <ctlnetwork+0x16>
    5504:	88 23       	and	r24, r24
    5506:	49 f0       	breq	.+18     	; 0x551a <ctlnetwork+0x22>
    5508:	81 30       	cpi	r24, 0x01	; 1
    550a:	61 f0       	breq	.+24     	; 0x5524 <ctlnetwork+0x2c>
    550c:	23 c0       	rjmp	.+70     	; 0x5554 <ctlnetwork+0x5c>
    550e:	84 30       	cpi	r24, 0x04	; 4
    5510:	b9 f0       	breq	.+46     	; 0x5540 <ctlnetwork+0x48>
    5512:	88 f0       	brcs	.+34     	; 0x5536 <ctlnetwork+0x3e>
    5514:	85 30       	cpi	r24, 0x05	; 5
    5516:	c9 f0       	breq	.+50     	; 0x554a <ctlnetwork+0x52>
    5518:	1d c0       	rjmp	.+58     	; 0x5554 <ctlnetwork+0x5c>
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
    551a:	cb 01       	movw	r24, r22
    551c:	0e 94 a7 29 	call	0x534e	; 0x534e <wizchip_setnetinfo>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
   }
   return 0;
    5520:	80 e0       	ldi	r24, 0x00	; 0
   
   switch(cntype)
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
         break;
    5522:	19 c0       	rjmp	.+50     	; 0x5556 <ctlnetwork+0x5e>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
    5524:	cb 01       	movw	r24, r22
    5526:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <wizchip_getnetinfo>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
   }
   return 0;
    552a:	80 e0       	ldi	r24, 0x00	; 0
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
         break;
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
         break;
    552c:	14 c0       	rjmp	.+40     	; 0x5556 <ctlnetwork+0x5e>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
    552e:	88 81       	ld	r24, Y
    5530:	0e 94 21 2a 	call	0x5442	; 0x5442 <wizchip_setnetmode>
    5534:	10 c0       	rjmp	.+32     	; 0x5556 <ctlnetwork+0x5e>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
    5536:	0e 94 37 2a 	call	0x546e	; 0x546e <wizchip_getnetmode>
    553a:	88 83       	st	Y, r24
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
   }
   return 0;
    553c:	80 e0       	ldi	r24, 0x00	; 0
         break;
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
         break;
    553e:	0b c0       	rjmp	.+22     	; 0x5556 <ctlnetwork+0x5e>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
    5540:	cb 01       	movw	r24, r22
    5542:	0e 94 3d 2a 	call	0x547a	; 0x547a <wizchip_settimeout>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
      default:
         return -1;
   }
   return 0;
    5546:	80 e0       	ldi	r24, 0x00	; 0
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
         break;
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
         break;
    5548:	06 c0       	rjmp	.+12     	; 0x5556 <ctlnetwork+0x5e>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
    554a:	cb 01       	movw	r24, r22
    554c:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <wizchip_gettimeout>
         break;
      default:
         return -1;
   }
   return 0;
    5550:	80 e0       	ldi	r24, 0x00	; 0
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
         break;
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
         break;
    5552:	01 c0       	rjmp	.+2      	; 0x5556 <ctlnetwork+0x5e>
      default:
         return -1;
    5554:	8f ef       	ldi	r24, 0xFF	; 255
   }
   return 0;
}
    5556:	df 91       	pop	r29
    5558:	cf 91       	pop	r28
    555a:	08 95       	ret

0000555c <RTC_write_batch>:
uint8_t rtc_config_2[] = {0x00};
uint8_t rtc_config_3[] = {0x00};


bool RTC_write_batch(uint8_t addres, uint8_t reg, uint8_t *data, uint8_t data_len){
	return twieTxBuff(addres, reg, data, data_len);
    555c:	0e 94 5d 13 	call	0x26ba	; 0x26ba <twieTxBuff>
}
    5560:	08 95       	ret

00005562 <RTC_read_batch>:

bool RTC_read_batch(uint8_t addres, uint8_t reg, uint8_t *data, uint8_t data_len){
	return twieRxBuff(addres, reg, data, data_len);
    5562:	0e 94 9f 13 	call	0x273e	; 0x273e <twieRxBuff>
}
    5566:	08 95       	ret

00005568 <rtc_int_enable>:




void rtc_int_enable(void){
	rtc_config_3[0] |= (1 << TIE);
    5568:	80 91 6a 29 	lds	r24, 0x296A	; 0x80296a <rtc_config_3>
    556c:	80 61       	ori	r24, 0x10	; 16
    556e:	80 93 6a 29 	sts	0x296A, r24	; 0x80296a <rtc_config_3>
	rtc_config_2[0] |= (1 << TD) | (1 << TE);
    5572:	80 91 6b 29 	lds	r24, 0x296B	; 0x80296b <rtc_config_2>
    5576:	81 61       	ori	r24, 0x11	; 17
    5578:	80 93 6b 29 	sts	0x296B, r24	; 0x80296b <rtc_config_2>
	RTC_write_batch(RTC_ADDR,TIMER_COUNTER0_REG,rtc_config_1,sizeof(rtc_config_1));
    557c:	22 e0       	ldi	r18, 0x02	; 2
    557e:	42 e9       	ldi	r20, 0x92	; 146
    5580:	50 e2       	ldi	r21, 0x20	; 32
    5582:	6b e0       	ldi	r22, 0x0B	; 11
    5584:	82 e3       	ldi	r24, 0x32	; 50
    5586:	0e 94 ae 2a 	call	0x555c	; 0x555c <RTC_write_batch>
	RTC_write_batch(RTC_ADDR,EXT_REG,rtc_config_2,sizeof(rtc_config_2));
    558a:	21 e0       	ldi	r18, 0x01	; 1
    558c:	4b e6       	ldi	r20, 0x6B	; 107
    558e:	59 e2       	ldi	r21, 0x29	; 41
    5590:	6d e0       	ldi	r22, 0x0D	; 13
    5592:	82 e3       	ldi	r24, 0x32	; 50
    5594:	0e 94 ae 2a 	call	0x555c	; 0x555c <RTC_write_batch>
	RTC_write_batch(RTC_ADDR,CONTROLL_REG,rtc_config_3,sizeof(rtc_config_3));
    5598:	21 e0       	ldi	r18, 0x01	; 1
    559a:	4a e6       	ldi	r20, 0x6A	; 106
    559c:	59 e2       	ldi	r21, 0x29	; 41
    559e:	6f e0       	ldi	r22, 0x0F	; 15
    55a0:	82 e3       	ldi	r24, 0x32	; 50
    55a2:	0e 94 ae 2a 	call	0x555c	; 0x555c <RTC_write_batch>
	initTwieInt();
    55a6:	0e 94 44 13 	call	0x2688	; 0x2688 <initTwieInt>
    55aa:	08 95       	ret

000055ac <getRtcInt>:
}
uint8_t getRtcInt(void){
	return getTwieInt();
    55ac:	0e 94 4f 13 	call	0x269e	; 0x269e <getTwieInt>
}
    55b0:	08 95       	ret

000055b2 <BCDtoDEC>:
	RTC_write_batch(RTC_ADDR,0x00,rtc_raw,sizeof(rtc_raw));
}

uint8_t BCDtoDEC(uint8_t val)
{
	return ((val / 0x10) * 10) + (val % 0x10);
    55b2:	98 2f       	mov	r25, r24
    55b4:	92 95       	swap	r25
    55b6:	9f 70       	andi	r25, 0x0F	; 15
    55b8:	99 0f       	add	r25, r25
    55ba:	29 2f       	mov	r18, r25
    55bc:	22 0f       	add	r18, r18
    55be:	22 0f       	add	r18, r18
    55c0:	92 0f       	add	r25, r18
    55c2:	8f 70       	andi	r24, 0x0F	; 15
}
    55c4:	89 0f       	add	r24, r25
    55c6:	08 95       	ret

000055c8 <rtc_sync>:
}
uint8_t getRtcInt(void){
	return getTwieInt();
}

void rtc_sync(rtc_date *RTCx){
    55c8:	0f 93       	push	r16
    55ca:	1f 93       	push	r17
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	cd b7       	in	r28, 0x3d	; 61
    55d2:	de b7       	in	r29, 0x3e	; 62
    55d4:	27 97       	sbiw	r28, 0x07	; 7
    55d6:	cd bf       	out	0x3d, r28	; 61
    55d8:	de bf       	out	0x3e, r29	; 62
    55da:	8c 01       	movw	r16, r24
	uint8_t rtc_raw[7];
	RTC_read_batch(RTC_ADDR, 0x00, rtc_raw, sizeof(rtc_raw));
    55dc:	27 e0       	ldi	r18, 0x07	; 7
    55de:	ae 01       	movw	r20, r28
    55e0:	4f 5f       	subi	r20, 0xFF	; 255
    55e2:	5f 4f       	sbci	r21, 0xFF	; 255
    55e4:	60 e0       	ldi	r22, 0x00	; 0
    55e6:	82 e3       	ldi	r24, 0x32	; 50
    55e8:	0e 94 b1 2a 	call	0x5562	; 0x5562 <RTC_read_batch>
	RTCx->second=BCDtoDEC(rtc_raw[0]);
    55ec:	89 81       	ldd	r24, Y+1	; 0x01
    55ee:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BCDtoDEC>
    55f2:	f8 01       	movw	r30, r16
    55f4:	80 83       	st	Z, r24
	RTCx->minute=BCDtoDEC(rtc_raw[1]);
    55f6:	8a 81       	ldd	r24, Y+2	; 0x02
    55f8:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BCDtoDEC>
    55fc:	f8 01       	movw	r30, r16
    55fe:	81 83       	std	Z+1, r24	; 0x01
	RTCx->hour=BCDtoDEC(rtc_raw[2]);
    5600:	8b 81       	ldd	r24, Y+3	; 0x03
    5602:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BCDtoDEC>
    5606:	f8 01       	movw	r30, r16
    5608:	82 83       	std	Z+2, r24	; 0x02
	RTCx->dayofweek=rtc_raw[3];
    560a:	8c 81       	ldd	r24, Y+4	; 0x04
    560c:	87 83       	std	Z+7, r24	; 0x07
	RTCx->date=BCDtoDEC(rtc_raw[4]);
    560e:	8d 81       	ldd	r24, Y+5	; 0x05
    5610:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BCDtoDEC>
    5614:	f8 01       	movw	r30, r16
    5616:	83 83       	std	Z+3, r24	; 0x03
	RTCx->month=BCDtoDEC(rtc_raw[5]);
    5618:	8e 81       	ldd	r24, Y+6	; 0x06
    561a:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BCDtoDEC>
    561e:	f8 01       	movw	r30, r16
    5620:	84 83       	std	Z+4, r24	; 0x04
	RTCx->year=BCDtoDEC(rtc_raw[6] & 0xff);
    5622:	8f 81       	ldd	r24, Y+7	; 0x07
    5624:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <BCDtoDEC>
    5628:	90 e0       	ldi	r25, 0x00	; 0
    562a:	f8 01       	movw	r30, r16
    562c:	85 83       	std	Z+5, r24	; 0x05
    562e:	96 83       	std	Z+6, r25	; 0x06
}
    5630:	27 96       	adiw	r28, 0x07	; 7
    5632:	cd bf       	out	0x3d, r28	; 61
    5634:	de bf       	out	0x3e, r29	; 62
    5636:	df 91       	pop	r29
    5638:	cf 91       	pop	r28
    563a:	1f 91       	pop	r17
    563c:	0f 91       	pop	r16
    563e:	08 95       	ret

00005640 <main>:
uint8_t tmpData;

int main(void)
{
	
	OSC.CTRL |= OSC_RC32MEN_bm;
    5640:	e0 e5       	ldi	r30, 0x50	; 80
    5642:	f0 e0       	ldi	r31, 0x00	; 0
    5644:	80 81       	ld	r24, Z
    5646:	82 60       	ori	r24, 0x02	; 2
    5648:	80 83       	st	Z, r24
	while ((OSC.STATUS & OSC_RC32MRDY_bm) == 0)
    564a:	81 81       	ldd	r24, Z+1	; 0x01
    564c:	81 fd       	sbrc	r24, 1
    564e:	08 c0       	rjmp	.+16     	; 0x5660 <main+0x20>
	_PROTECTED_WRITE(CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
    5650:	98 ed       	ldi	r25, 0xD8	; 216
    5652:	81 e0       	ldi	r24, 0x01	; 1
    5654:	94 bf       	out	0x34, r25	; 52
    5656:	80 93 40 00 	sts	0x0040, r24	; 0x800040 <__TEXT_REGION_LENGTH__+0x7be040>

int main(void)
{
	
	OSC.CTRL |= OSC_RC32MEN_bm;
	while ((OSC.STATUS & OSC_RC32MRDY_bm) == 0)
    565a:	21 81       	ldd	r18, Z+1	; 0x01
    565c:	21 ff       	sbrs	r18, 1
    565e:	fa cf       	rjmp	.-12     	; 0x5654 <main+0x14>
	_PROTECTED_WRITE(CLK.CTRL, CLK_SCLKSEL_RC32M_gc);
	gpio_set_pin_direction(&hbRedLed , PORT_DIR_OUT); 
    5660:	61 e0       	ldi	r22, 0x01	; 1
    5662:	80 ea       	ldi	r24, 0xA0	; 160
    5664:	90 e2       	ldi	r25, 0x20	; 32
    5666:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
	gpio_set_pin_direction(&in1 , PORT_DIR_IN); 
    566a:	60 e0       	ldi	r22, 0x00	; 0
    566c:	8d e9       	ldi	r24, 0x9D	; 157
    566e:	90 e2       	ldi	r25, 0x20	; 32
    5670:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
	gpio_set_pin_direction(&in2 , PORT_DIR_IN);
    5674:	60 e0       	ldi	r22, 0x00	; 0
    5676:	8a e9       	ldi	r24, 0x9A	; 154
    5678:	90 e2       	ldi	r25, 0x20	; 32
    567a:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
	gpio_set_pin_direction(&rel1 , PORT_DIR_OUT);
    567e:	61 e0       	ldi	r22, 0x01	; 1
    5680:	87 e9       	ldi	r24, 0x97	; 151
    5682:	90 e2       	ldi	r25, 0x20	; 32
    5684:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
	gpio_set_pin_direction(&rel2 , PORT_DIR_OUT);
    5688:	61 e0       	ldi	r22, 0x01	; 1
    568a:	84 e9       	ldi	r24, 0x94	; 148
    568c:	90 e2       	ldi	r25, 0x20	; 32
    568e:	0e 94 96 11 	call	0x232c	; 0x232c <gpio_set_pin_direction>
	
	gpio_set_pin_level(&hbRedLed, true);
    5692:	61 e0       	ldi	r22, 0x01	; 1
    5694:	80 ea       	ldi	r24, 0xA0	; 160
    5696:	90 e2       	ldi	r25, 0x20	; 32
    5698:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
	gpio_set_pin_level(&hbRedLed, false);
    569c:	60 e0       	ldi	r22, 0x00	; 0
    569e:	80 ea       	ldi	r24, 0xA0	; 160
    56a0:	90 e2       	ldi	r25, 0x20	; 32
    56a2:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
	
	sei();
    56a6:	78 94       	sei
	debugSerialInit(DEB_SERIAL_BAUD);
    56a8:	60 e0       	ldi	r22, 0x00	; 0
    56aa:	72 ec       	ldi	r23, 0xC2	; 194
    56ac:	81 e0       	ldi	r24, 0x01	; 1
    56ae:	90 e0       	ldi	r25, 0x00	; 0
    56b0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <debugSerialInit>
	initSpic();
    56b4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <initSpic>
	netInit();
    56b8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <netInit>
	CANSPI_Initialize();
    56bc:	0e 94 32 14 	call	0x2864	; 0x2864 <CANSPI_Initialize>
	twieInit();
    56c0:	0e 94 32 13 	call	0x2664	; 0x2664 <twieInit>
	rtc_int_enable();
    56c4:	0e 94 b4 2a 	call	0x5568	; 0x5568 <rtc_int_enable>
	//rtc_set(&sys_rtc);
	sysTickInit();
    56c8:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <sysTickInit>
			tmpChr = 10;
		}

		if(getRtcInt()){
			rtc_sync(&sys_rtc);
			printf("RTC %d-%d-%d %d; %d:%d:%d %d; %d \n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.dayofweek, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, getRxByte(), getUpTime());
    56cc:	03 ea       	ldi	r16, 0xA3	; 163
    56ce:	18 e2       	ldi	r17, 0x28	; 40
			
			txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
    56d0:	c0 e8       	ldi	r28, 0x80	; 128
    56d2:	d1 e3       	ldi	r29, 0x31	; 49
			txMessage.frame.id = 0x0A;
    56d4:	0f 2e       	mov	r0, r31
    56d6:	fa e0       	ldi	r31, 0x0A	; 10
    56d8:	4f 2e       	mov	r4, r31
    56da:	51 2c       	mov	r5, r1
    56dc:	61 2c       	mov	r6, r1
    56de:	71 2c       	mov	r7, r1
    56e0:	f0 2d       	mov	r31, r0
			txMessage.frame.dlc = 8;
    56e2:	68 94       	set
    56e4:	22 24       	eor	r2, r2
    56e6:	23 f8       	bld	r2, 3
			txMessage.frame.data0 = 0;
			txMessage.frame.data1 = 1;
			txMessage.frame.data2 = 2;
    56e8:	68 94       	set
    56ea:	33 24       	eor	r3, r3
    56ec:	31 f8       	bld	r3, 1
			txMessage.frame.data3 = 3;
    56ee:	0f 2e       	mov	r0, r31
    56f0:	f3 e0       	ldi	r31, 0x03	; 3
    56f2:	8f 2e       	mov	r8, r31
    56f4:	f0 2d       	mov	r31, r0
			txMessage.frame.data4 = 4;
    56f6:	68 94       	set
    56f8:	99 24       	eor	r9, r9
    56fa:	92 f8       	bld	r9, 2
			txMessage.frame.data5 = 5;
    56fc:	0f 2e       	mov	r0, r31
    56fe:	f5 e0       	ldi	r31, 0x05	; 5
    5700:	af 2e       	mov	r10, r31
    5702:	f0 2d       	mov	r31, r0
			txMessage.frame.data6 = 6;
    5704:	0f 2e       	mov	r0, r31
    5706:	f6 e0       	ldi	r31, 0x06	; 6
    5708:	bf 2e       	mov	r11, r31
    570a:	f0 2d       	mov	r31, r0
	//rtc_set(&sys_rtc);
	sysTickInit();
	
	while (1) 
    {
		gpio_toggle_pin_level(&hbRedLed);
    570c:	80 ea       	ldi	r24, 0xA0	; 160
    570e:	90 e2       	ldi	r25, 0x20	; 32
    5710:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <gpio_toggle_pin_level>
		
		gpio_set_pin_level(&rel1, gpio_get_pin_level(&in1));
    5714:	8d e9       	ldi	r24, 0x9D	; 157
    5716:	90 e2       	ldi	r25, 0x20	; 32
    5718:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <gpio_get_pin_level>
    571c:	61 e0       	ldi	r22, 0x01	; 1
    571e:	81 11       	cpse	r24, r1
    5720:	01 c0       	rjmp	.+2      	; 0x5724 <main+0xe4>
    5722:	60 e0       	ldi	r22, 0x00	; 0
    5724:	87 e9       	ldi	r24, 0x97	; 151
    5726:	90 e2       	ldi	r25, 0x20	; 32
    5728:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
		gpio_set_pin_level(&rel2, gpio_get_pin_level(&in2));
    572c:	8a e9       	ldi	r24, 0x9A	; 154
    572e:	90 e2       	ldi	r25, 0x20	; 32
    5730:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <gpio_get_pin_level>
    5734:	61 e0       	ldi	r22, 0x01	; 1
    5736:	81 11       	cpse	r24, r1
    5738:	01 c0       	rjmp	.+2      	; 0x573c <main+0xfc>
    573a:	60 e0       	ldi	r22, 0x00	; 0
    573c:	84 e9       	ldi	r24, 0x94	; 148
    573e:	90 e2       	ldi	r25, 0x20	; 32
    5740:	0e 94 70 11 	call	0x22e0	; 0x22e0 <gpio_set_pin_level>
		
		//_delay_ms(20);
		
		
		 if(CANSPI_Receive(&rxMessage))
    5744:	8e e8       	ldi	r24, 0x8E	; 142
    5746:	91 e3       	ldi	r25, 0x31	; 49
    5748:	0e 94 14 15 	call	0x2a28	; 0x2a28 <CANSPI_Receive>
    574c:	88 23       	and	r24, r24
    574e:	21 f0       	breq	.+8      	; 0x5758 <main+0x118>
		 {
			 gpio_toggle_pin_level(&hbRedLed);
    5750:	80 ea       	ldi	r24, 0xA0	; 160
    5752:	90 e2       	ldi	r25, 0x20	; 32
    5754:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <gpio_toggle_pin_level>
		 }
		tmpData = getRxByte();
    5758:	0e 94 58 10 	call	0x20b0	; 0x20b0 <getRxByte>
    575c:	80 93 7f 31 	sts	0x317F, r24	; 0x80317f <tmpData>
		uint8_t tmpChr;
		if(tmpData != 0){
			tmpChr = 10;
		}

		if(getRtcInt()){
    5760:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <getRtcInt>
    5764:	88 23       	and	r24, r24
    5766:	09 f4       	brne	.+2      	; 0x576a <main+0x12a>
    5768:	46 c0       	rjmp	.+140    	; 0x57f6 <main+0x1b6>
			rtc_sync(&sys_rtc);
    576a:	83 ea       	ldi	r24, 0xA3	; 163
    576c:	90 e2       	ldi	r25, 0x20	; 32
    576e:	0e 94 e4 2a 	call	0x55c8	; 0x55c8 <rtc_sync>
			printf("RTC %d-%d-%d %d; %d:%d:%d %d; %d \n", sys_rtc.date, sys_rtc.month, sys_rtc.year, sys_rtc.dayofweek, sys_rtc.hour, sys_rtc.minute, sys_rtc.second, getRxByte(), getUpTime());
    5772:	0e 94 12 13 	call	0x2624	; 0x2624 <getUpTime>
    5776:	f6 2e       	mov	r15, r22
    5778:	e7 2e       	mov	r14, r23
    577a:	d8 2e       	mov	r13, r24
    577c:	c9 2e       	mov	r12, r25
    577e:	0e 94 58 10 	call	0x20b0	; 0x20b0 <getRxByte>
    5782:	cf 92       	push	r12
    5784:	df 92       	push	r13
    5786:	ef 92       	push	r14
    5788:	ff 92       	push	r15
    578a:	1f 92       	push	r1
    578c:	8f 93       	push	r24
    578e:	e3 ea       	ldi	r30, 0xA3	; 163
    5790:	f0 e2       	ldi	r31, 0x20	; 32
    5792:	80 81       	ld	r24, Z
    5794:	1f 92       	push	r1
    5796:	8f 93       	push	r24
    5798:	81 81       	ldd	r24, Z+1	; 0x01
    579a:	1f 92       	push	r1
    579c:	8f 93       	push	r24
    579e:	82 81       	ldd	r24, Z+2	; 0x02
    57a0:	1f 92       	push	r1
    57a2:	8f 93       	push	r24
    57a4:	87 81       	ldd	r24, Z+7	; 0x07
    57a6:	1f 92       	push	r1
    57a8:	8f 93       	push	r24
    57aa:	86 81       	ldd	r24, Z+6	; 0x06
    57ac:	8f 93       	push	r24
    57ae:	85 81       	ldd	r24, Z+5	; 0x05
    57b0:	8f 93       	push	r24
    57b2:	84 81       	ldd	r24, Z+4	; 0x04
    57b4:	1f 92       	push	r1
    57b6:	8f 93       	push	r24
    57b8:	83 81       	ldd	r24, Z+3	; 0x03
    57ba:	1f 92       	push	r1
    57bc:	8f 93       	push	r24
    57be:	1f 93       	push	r17
    57c0:	0f 93       	push	r16
    57c2:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <printf>
			
			txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
    57c6:	81 e0       	ldi	r24, 0x01	; 1
    57c8:	88 83       	st	Y, r24
			txMessage.frame.id = 0x0A;
    57ca:	49 82       	std	Y+1, r4	; 0x01
    57cc:	5a 82       	std	Y+2, r5	; 0x02
    57ce:	6b 82       	std	Y+3, r6	; 0x03
    57d0:	7c 82       	std	Y+4, r7	; 0x04
			txMessage.frame.dlc = 8;
    57d2:	2d 82       	std	Y+5, r2	; 0x05
			txMessage.frame.data0 = 0;
    57d4:	1e 82       	std	Y+6, r1	; 0x06
			txMessage.frame.data1 = 1;
    57d6:	8f 83       	std	Y+7, r24	; 0x07
			txMessage.frame.data2 = 2;
    57d8:	38 86       	std	Y+8, r3	; 0x08
			txMessage.frame.data3 = 3;
    57da:	89 86       	std	Y+9, r8	; 0x09
			txMessage.frame.data4 = 4;
    57dc:	9a 86       	std	Y+10, r9	; 0x0a
			txMessage.frame.data5 = 5;
    57de:	ab 86       	std	Y+11, r10	; 0x0b
			txMessage.frame.data6 = 6;
    57e0:	bc 86       	std	Y+12, r11	; 0x0c
			txMessage.frame.data7 = 7;
    57e2:	87 e0       	ldi	r24, 0x07	; 7
    57e4:	8d 87       	std	Y+13, r24	; 0x0d
			CANSPI_Transmit(&txMessage);
    57e6:	ce 01       	movw	r24, r28
    57e8:	0e 94 b8 14 	call	0x2970	; 0x2970 <CANSPI_Transmit>
    57ec:	8d b7       	in	r24, 0x3d	; 61
    57ee:	9e b7       	in	r25, 0x3e	; 62
    57f0:	46 96       	adiw	r24, 0x16	; 22
    57f2:	8d bf       	out	0x3d, r24	; 61
    57f4:	9e bf       	out	0x3e, r25	; 62
		}
		
		
		netHandler();
    57f6:	0e 94 e5 16 	call	0x2dca	; 0x2dca <netHandler>
		
    }
    57fa:	88 cf       	rjmp	.-240    	; 0x570c <main+0xcc>

000057fc <__mulsf3>:
    57fc:	0e 94 11 2c 	call	0x5822	; 0x5822 <__mulsf3x>
    5800:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__fp_round>
    5804:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <__fp_pscA>
    5808:	38 f0       	brcs	.+14     	; 0x5818 <__mulsf3+0x1c>
    580a:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <__fp_pscB>
    580e:	20 f0       	brcs	.+8      	; 0x5818 <__mulsf3+0x1c>
    5810:	95 23       	and	r25, r21
    5812:	11 f0       	breq	.+4      	; 0x5818 <__mulsf3+0x1c>
    5814:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__fp_inf>
    5818:	0c 94 71 2c 	jmp	0x58e2	; 0x58e2 <__fp_nan>
    581c:	11 24       	eor	r1, r1
    581e:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__fp_szero>

00005822 <__mulsf3x>:
    5822:	0e 94 93 2c 	call	0x5926	; 0x5926 <__fp_split3>
    5826:	70 f3       	brcs	.-36     	; 0x5804 <__mulsf3+0x8>

00005828 <__mulsf3_pse>:
    5828:	95 9f       	mul	r25, r21
    582a:	c1 f3       	breq	.-16     	; 0x581c <__mulsf3+0x20>
    582c:	95 0f       	add	r25, r21
    582e:	50 e0       	ldi	r21, 0x00	; 0
    5830:	55 1f       	adc	r21, r21
    5832:	62 9f       	mul	r22, r18
    5834:	f0 01       	movw	r30, r0
    5836:	72 9f       	mul	r23, r18
    5838:	bb 27       	eor	r27, r27
    583a:	f0 0d       	add	r31, r0
    583c:	b1 1d       	adc	r27, r1
    583e:	63 9f       	mul	r22, r19
    5840:	aa 27       	eor	r26, r26
    5842:	f0 0d       	add	r31, r0
    5844:	b1 1d       	adc	r27, r1
    5846:	aa 1f       	adc	r26, r26
    5848:	64 9f       	mul	r22, r20
    584a:	66 27       	eor	r22, r22
    584c:	b0 0d       	add	r27, r0
    584e:	a1 1d       	adc	r26, r1
    5850:	66 1f       	adc	r22, r22
    5852:	82 9f       	mul	r24, r18
    5854:	22 27       	eor	r18, r18
    5856:	b0 0d       	add	r27, r0
    5858:	a1 1d       	adc	r26, r1
    585a:	62 1f       	adc	r22, r18
    585c:	73 9f       	mul	r23, r19
    585e:	b0 0d       	add	r27, r0
    5860:	a1 1d       	adc	r26, r1
    5862:	62 1f       	adc	r22, r18
    5864:	83 9f       	mul	r24, r19
    5866:	a0 0d       	add	r26, r0
    5868:	61 1d       	adc	r22, r1
    586a:	22 1f       	adc	r18, r18
    586c:	74 9f       	mul	r23, r20
    586e:	33 27       	eor	r19, r19
    5870:	a0 0d       	add	r26, r0
    5872:	61 1d       	adc	r22, r1
    5874:	23 1f       	adc	r18, r19
    5876:	84 9f       	mul	r24, r20
    5878:	60 0d       	add	r22, r0
    587a:	21 1d       	adc	r18, r1
    587c:	82 2f       	mov	r24, r18
    587e:	76 2f       	mov	r23, r22
    5880:	6a 2f       	mov	r22, r26
    5882:	11 24       	eor	r1, r1
    5884:	9f 57       	subi	r25, 0x7F	; 127
    5886:	50 40       	sbci	r21, 0x00	; 0
    5888:	9a f0       	brmi	.+38     	; 0x58b0 <__mulsf3_pse+0x88>
    588a:	f1 f0       	breq	.+60     	; 0x58c8 <__mulsf3_pse+0xa0>
    588c:	88 23       	and	r24, r24
    588e:	4a f0       	brmi	.+18     	; 0x58a2 <__mulsf3_pse+0x7a>
    5890:	ee 0f       	add	r30, r30
    5892:	ff 1f       	adc	r31, r31
    5894:	bb 1f       	adc	r27, r27
    5896:	66 1f       	adc	r22, r22
    5898:	77 1f       	adc	r23, r23
    589a:	88 1f       	adc	r24, r24
    589c:	91 50       	subi	r25, 0x01	; 1
    589e:	50 40       	sbci	r21, 0x00	; 0
    58a0:	a9 f7       	brne	.-22     	; 0x588c <__mulsf3_pse+0x64>
    58a2:	9e 3f       	cpi	r25, 0xFE	; 254
    58a4:	51 05       	cpc	r21, r1
    58a6:	80 f0       	brcs	.+32     	; 0x58c8 <__mulsf3_pse+0xa0>
    58a8:	0c 94 6b 2c 	jmp	0x58d6	; 0x58d6 <__fp_inf>
    58ac:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <__fp_szero>
    58b0:	5f 3f       	cpi	r21, 0xFF	; 255
    58b2:	e4 f3       	brlt	.-8      	; 0x58ac <__mulsf3_pse+0x84>
    58b4:	98 3e       	cpi	r25, 0xE8	; 232
    58b6:	d4 f3       	brlt	.-12     	; 0x58ac <__mulsf3_pse+0x84>
    58b8:	86 95       	lsr	r24
    58ba:	77 95       	ror	r23
    58bc:	67 95       	ror	r22
    58be:	b7 95       	ror	r27
    58c0:	f7 95       	ror	r31
    58c2:	e7 95       	ror	r30
    58c4:	9f 5f       	subi	r25, 0xFF	; 255
    58c6:	c1 f7       	brne	.-16     	; 0x58b8 <__mulsf3_pse+0x90>
    58c8:	fe 2b       	or	r31, r30
    58ca:	88 0f       	add	r24, r24
    58cc:	91 1d       	adc	r25, r1
    58ce:	96 95       	lsr	r25
    58d0:	87 95       	ror	r24
    58d2:	97 f9       	bld	r25, 7
    58d4:	08 95       	ret

000058d6 <__fp_inf>:
    58d6:	97 f9       	bld	r25, 7
    58d8:	9f 67       	ori	r25, 0x7F	; 127
    58da:	80 e8       	ldi	r24, 0x80	; 128
    58dc:	70 e0       	ldi	r23, 0x00	; 0
    58de:	60 e0       	ldi	r22, 0x00	; 0
    58e0:	08 95       	ret

000058e2 <__fp_nan>:
    58e2:	9f ef       	ldi	r25, 0xFF	; 255
    58e4:	80 ec       	ldi	r24, 0xC0	; 192
    58e6:	08 95       	ret

000058e8 <__fp_pscA>:
    58e8:	00 24       	eor	r0, r0
    58ea:	0a 94       	dec	r0
    58ec:	16 16       	cp	r1, r22
    58ee:	17 06       	cpc	r1, r23
    58f0:	18 06       	cpc	r1, r24
    58f2:	09 06       	cpc	r0, r25
    58f4:	08 95       	ret

000058f6 <__fp_pscB>:
    58f6:	00 24       	eor	r0, r0
    58f8:	0a 94       	dec	r0
    58fa:	12 16       	cp	r1, r18
    58fc:	13 06       	cpc	r1, r19
    58fe:	14 06       	cpc	r1, r20
    5900:	05 06       	cpc	r0, r21
    5902:	08 95       	ret

00005904 <__fp_round>:
    5904:	09 2e       	mov	r0, r25
    5906:	03 94       	inc	r0
    5908:	00 0c       	add	r0, r0
    590a:	11 f4       	brne	.+4      	; 0x5910 <__fp_round+0xc>
    590c:	88 23       	and	r24, r24
    590e:	52 f0       	brmi	.+20     	; 0x5924 <__fp_round+0x20>
    5910:	bb 0f       	add	r27, r27
    5912:	40 f4       	brcc	.+16     	; 0x5924 <__fp_round+0x20>
    5914:	bf 2b       	or	r27, r31
    5916:	11 f4       	brne	.+4      	; 0x591c <__fp_round+0x18>
    5918:	60 ff       	sbrs	r22, 0
    591a:	04 c0       	rjmp	.+8      	; 0x5924 <__fp_round+0x20>
    591c:	6f 5f       	subi	r22, 0xFF	; 255
    591e:	7f 4f       	sbci	r23, 0xFF	; 255
    5920:	8f 4f       	sbci	r24, 0xFF	; 255
    5922:	9f 4f       	sbci	r25, 0xFF	; 255
    5924:	08 95       	ret

00005926 <__fp_split3>:
    5926:	57 fd       	sbrc	r21, 7
    5928:	90 58       	subi	r25, 0x80	; 128
    592a:	44 0f       	add	r20, r20
    592c:	55 1f       	adc	r21, r21
    592e:	59 f0       	breq	.+22     	; 0x5946 <__fp_splitA+0x10>
    5930:	5f 3f       	cpi	r21, 0xFF	; 255
    5932:	71 f0       	breq	.+28     	; 0x5950 <__fp_splitA+0x1a>
    5934:	47 95       	ror	r20

00005936 <__fp_splitA>:
    5936:	88 0f       	add	r24, r24
    5938:	97 fb       	bst	r25, 7
    593a:	99 1f       	adc	r25, r25
    593c:	61 f0       	breq	.+24     	; 0x5956 <__fp_splitA+0x20>
    593e:	9f 3f       	cpi	r25, 0xFF	; 255
    5940:	79 f0       	breq	.+30     	; 0x5960 <__fp_splitA+0x2a>
    5942:	87 95       	ror	r24
    5944:	08 95       	ret
    5946:	12 16       	cp	r1, r18
    5948:	13 06       	cpc	r1, r19
    594a:	14 06       	cpc	r1, r20
    594c:	55 1f       	adc	r21, r21
    594e:	f2 cf       	rjmp	.-28     	; 0x5934 <__fp_split3+0xe>
    5950:	46 95       	lsr	r20
    5952:	f1 df       	rcall	.-30     	; 0x5936 <__fp_splitA>
    5954:	08 c0       	rjmp	.+16     	; 0x5966 <__fp_splitA+0x30>
    5956:	16 16       	cp	r1, r22
    5958:	17 06       	cpc	r1, r23
    595a:	18 06       	cpc	r1, r24
    595c:	99 1f       	adc	r25, r25
    595e:	f1 cf       	rjmp	.-30     	; 0x5942 <__fp_splitA+0xc>
    5960:	86 95       	lsr	r24
    5962:	71 05       	cpc	r23, r1
    5964:	61 05       	cpc	r22, r1
    5966:	08 94       	sec
    5968:	08 95       	ret

0000596a <__fp_zero>:
    596a:	e8 94       	clt

0000596c <__fp_szero>:
    596c:	bb 27       	eor	r27, r27
    596e:	66 27       	eor	r22, r22
    5970:	77 27       	eor	r23, r23
    5972:	cb 01       	movw	r24, r22
    5974:	97 f9       	bld	r25, 7
    5976:	08 95       	ret

00005978 <__udivmodsi4>:
    5978:	a1 e2       	ldi	r26, 0x21	; 33
    597a:	1a 2e       	mov	r1, r26
    597c:	aa 1b       	sub	r26, r26
    597e:	bb 1b       	sub	r27, r27
    5980:	fd 01       	movw	r30, r26
    5982:	0d c0       	rjmp	.+26     	; 0x599e <__udivmodsi4_ep>

00005984 <__udivmodsi4_loop>:
    5984:	aa 1f       	adc	r26, r26
    5986:	bb 1f       	adc	r27, r27
    5988:	ee 1f       	adc	r30, r30
    598a:	ff 1f       	adc	r31, r31
    598c:	a2 17       	cp	r26, r18
    598e:	b3 07       	cpc	r27, r19
    5990:	e4 07       	cpc	r30, r20
    5992:	f5 07       	cpc	r31, r21
    5994:	20 f0       	brcs	.+8      	; 0x599e <__udivmodsi4_ep>
    5996:	a2 1b       	sub	r26, r18
    5998:	b3 0b       	sbc	r27, r19
    599a:	e4 0b       	sbc	r30, r20
    599c:	f5 0b       	sbc	r31, r21

0000599e <__udivmodsi4_ep>:
    599e:	66 1f       	adc	r22, r22
    59a0:	77 1f       	adc	r23, r23
    59a2:	88 1f       	adc	r24, r24
    59a4:	99 1f       	adc	r25, r25
    59a6:	1a 94       	dec	r1
    59a8:	69 f7       	brne	.-38     	; 0x5984 <__udivmodsi4_loop>
    59aa:	60 95       	com	r22
    59ac:	70 95       	com	r23
    59ae:	80 95       	com	r24
    59b0:	90 95       	com	r25
    59b2:	9b 01       	movw	r18, r22
    59b4:	ac 01       	movw	r20, r24
    59b6:	bd 01       	movw	r22, r26
    59b8:	cf 01       	movw	r24, r30
    59ba:	08 95       	ret

000059bc <__tablejump2__>:
    59bc:	ee 0f       	add	r30, r30
    59be:	ff 1f       	adc	r31, r31
    59c0:	88 1f       	adc	r24, r24
    59c2:	8b bf       	out	0x3b, r24	; 59
    59c4:	07 90       	elpm	r0, Z+
    59c6:	f6 91       	elpm	r31, Z
    59c8:	e0 2d       	mov	r30, r0
    59ca:	19 94       	eijmp

000059cc <strcasecmp>:
    59cc:	fb 01       	movw	r30, r22
    59ce:	dc 01       	movw	r26, r24
    59d0:	8d 91       	ld	r24, X+
    59d2:	81 34       	cpi	r24, 0x41	; 65
    59d4:	1c f0       	brlt	.+6      	; 0x59dc <strcasecmp+0x10>
    59d6:	8b 35       	cpi	r24, 0x5B	; 91
    59d8:	0c f4       	brge	.+2      	; 0x59dc <strcasecmp+0x10>
    59da:	80 5e       	subi	r24, 0xE0	; 224
    59dc:	61 91       	ld	r22, Z+
    59de:	61 34       	cpi	r22, 0x41	; 65
    59e0:	1c f0       	brlt	.+6      	; 0x59e8 <strcasecmp+0x1c>
    59e2:	6b 35       	cpi	r22, 0x5B	; 91
    59e4:	0c f4       	brge	.+2      	; 0x59e8 <strcasecmp+0x1c>
    59e6:	60 5e       	subi	r22, 0xE0	; 224
    59e8:	86 1b       	sub	r24, r22
    59ea:	61 11       	cpse	r22, r1
    59ec:	89 f3       	breq	.-30     	; 0x59d0 <strcasecmp+0x4>
    59ee:	99 0b       	sbc	r25, r25
    59f0:	08 95       	ret

000059f2 <strcmp>:
    59f2:	fb 01       	movw	r30, r22
    59f4:	dc 01       	movw	r26, r24
    59f6:	8d 91       	ld	r24, X+
    59f8:	01 90       	ld	r0, Z+
    59fa:	80 19       	sub	r24, r0
    59fc:	01 10       	cpse	r0, r1
    59fe:	d9 f3       	breq	.-10     	; 0x59f6 <strcmp+0x4>
    5a00:	99 0b       	sbc	r25, r25
    5a02:	08 95       	ret

00005a04 <strstr>:
    5a04:	fb 01       	movw	r30, r22
    5a06:	51 91       	ld	r21, Z+
    5a08:	55 23       	and	r21, r21
    5a0a:	a9 f0       	breq	.+42     	; 0x5a36 <strstr+0x32>
    5a0c:	bf 01       	movw	r22, r30
    5a0e:	dc 01       	movw	r26, r24
    5a10:	4d 91       	ld	r20, X+
    5a12:	45 17       	cp	r20, r21
    5a14:	41 11       	cpse	r20, r1
    5a16:	e1 f7       	brne	.-8      	; 0x5a10 <strstr+0xc>
    5a18:	59 f4       	brne	.+22     	; 0x5a30 <strstr+0x2c>
    5a1a:	cd 01       	movw	r24, r26
    5a1c:	01 90       	ld	r0, Z+
    5a1e:	00 20       	and	r0, r0
    5a20:	49 f0       	breq	.+18     	; 0x5a34 <strstr+0x30>
    5a22:	4d 91       	ld	r20, X+
    5a24:	40 15       	cp	r20, r0
    5a26:	41 11       	cpse	r20, r1
    5a28:	c9 f3       	breq	.-14     	; 0x5a1c <strstr+0x18>
    5a2a:	fb 01       	movw	r30, r22
    5a2c:	41 11       	cpse	r20, r1
    5a2e:	ef cf       	rjmp	.-34     	; 0x5a0e <strstr+0xa>
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	01 97       	sbiw	r24, 0x01	; 1
    5a36:	08 95       	ret

00005a38 <printf>:
    5a38:	cf 93       	push	r28
    5a3a:	df 93       	push	r29
    5a3c:	cd b7       	in	r28, 0x3d	; 61
    5a3e:	de b7       	in	r29, 0x3e	; 62
    5a40:	ae 01       	movw	r20, r28
    5a42:	4a 5f       	subi	r20, 0xFA	; 250
    5a44:	5f 4f       	sbci	r21, 0xFF	; 255
    5a46:	fa 01       	movw	r30, r20
    5a48:	61 91       	ld	r22, Z+
    5a4a:	71 91       	ld	r23, Z+
    5a4c:	af 01       	movw	r20, r30
    5a4e:	80 91 9e 31 	lds	r24, 0x319E	; 0x80319e <__iob+0x2>
    5a52:	90 91 9f 31 	lds	r25, 0x319F	; 0x80319f <__iob+0x3>
    5a56:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <vfprintf>
    5a5a:	df 91       	pop	r29
    5a5c:	cf 91       	pop	r28
    5a5e:	08 95       	ret

00005a60 <puts>:
    5a60:	0f 93       	push	r16
    5a62:	1f 93       	push	r17
    5a64:	cf 93       	push	r28
    5a66:	df 93       	push	r29
    5a68:	e0 91 9e 31 	lds	r30, 0x319E	; 0x80319e <__iob+0x2>
    5a6c:	f0 91 9f 31 	lds	r31, 0x319F	; 0x80319f <__iob+0x3>
    5a70:	23 81       	ldd	r18, Z+3	; 0x03
    5a72:	21 ff       	sbrs	r18, 1
    5a74:	1b c0       	rjmp	.+54     	; 0x5aac <puts+0x4c>
    5a76:	8c 01       	movw	r16, r24
    5a78:	d0 e0       	ldi	r29, 0x00	; 0
    5a7a:	c0 e0       	ldi	r28, 0x00	; 0
    5a7c:	f8 01       	movw	r30, r16
    5a7e:	81 91       	ld	r24, Z+
    5a80:	8f 01       	movw	r16, r30
    5a82:	60 91 9e 31 	lds	r22, 0x319E	; 0x80319e <__iob+0x2>
    5a86:	70 91 9f 31 	lds	r23, 0x319F	; 0x80319f <__iob+0x3>
    5a8a:	db 01       	movw	r26, r22
    5a8c:	18 96       	adiw	r26, 0x08	; 8
    5a8e:	ed 91       	ld	r30, X+
    5a90:	fc 91       	ld	r31, X
    5a92:	19 97       	sbiw	r26, 0x09	; 9
    5a94:	88 23       	and	r24, r24
    5a96:	31 f0       	breq	.+12     	; 0x5aa4 <puts+0x44>
    5a98:	19 95       	eicall
    5a9a:	89 2b       	or	r24, r25
    5a9c:	79 f3       	breq	.-34     	; 0x5a7c <puts+0x1c>
    5a9e:	df ef       	ldi	r29, 0xFF	; 255
    5aa0:	cf ef       	ldi	r28, 0xFF	; 255
    5aa2:	ec cf       	rjmp	.-40     	; 0x5a7c <puts+0x1c>
    5aa4:	8a e0       	ldi	r24, 0x0A	; 10
    5aa6:	19 95       	eicall
    5aa8:	89 2b       	or	r24, r25
    5aaa:	19 f0       	breq	.+6      	; 0x5ab2 <puts+0x52>
    5aac:	8f ef       	ldi	r24, 0xFF	; 255
    5aae:	9f ef       	ldi	r25, 0xFF	; 255
    5ab0:	02 c0       	rjmp	.+4      	; 0x5ab6 <puts+0x56>
    5ab2:	8d 2f       	mov	r24, r29
    5ab4:	9c 2f       	mov	r25, r28
    5ab6:	df 91       	pop	r29
    5ab8:	cf 91       	pop	r28
    5aba:	1f 91       	pop	r17
    5abc:	0f 91       	pop	r16
    5abe:	08 95       	ret

00005ac0 <snprintf>:
    5ac0:	0f 93       	push	r16
    5ac2:	1f 93       	push	r17
    5ac4:	cf 93       	push	r28
    5ac6:	df 93       	push	r29
    5ac8:	cd b7       	in	r28, 0x3d	; 61
    5aca:	de b7       	in	r29, 0x3e	; 62
    5acc:	2e 97       	sbiw	r28, 0x0e	; 14
    5ace:	cd bf       	out	0x3d, r28	; 61
    5ad0:	de bf       	out	0x3e, r29	; 62
    5ad2:	0e 89       	ldd	r16, Y+22	; 0x16
    5ad4:	1f 89       	ldd	r17, Y+23	; 0x17
    5ad6:	88 8d       	ldd	r24, Y+24	; 0x18
    5ad8:	99 8d       	ldd	r25, Y+25	; 0x19
    5ada:	26 e0       	ldi	r18, 0x06	; 6
    5adc:	2c 83       	std	Y+4, r18	; 0x04
    5ade:	09 83       	std	Y+1, r16	; 0x01
    5ae0:	1a 83       	std	Y+2, r17	; 0x02
    5ae2:	97 ff       	sbrs	r25, 7
    5ae4:	02 c0       	rjmp	.+4      	; 0x5aea <snprintf+0x2a>
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	90 e8       	ldi	r25, 0x80	; 128
    5aea:	01 97       	sbiw	r24, 0x01	; 1
    5aec:	8d 83       	std	Y+5, r24	; 0x05
    5aee:	9e 83       	std	Y+6, r25	; 0x06
    5af0:	ae 01       	movw	r20, r28
    5af2:	44 5e       	subi	r20, 0xE4	; 228
    5af4:	5f 4f       	sbci	r21, 0xFF	; 255
    5af6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5af8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5afa:	ce 01       	movw	r24, r28
    5afc:	01 96       	adiw	r24, 0x01	; 1
    5afe:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <vfprintf>
    5b02:	4d 81       	ldd	r20, Y+5	; 0x05
    5b04:	5e 81       	ldd	r21, Y+6	; 0x06
    5b06:	57 fd       	sbrc	r21, 7
    5b08:	0a c0       	rjmp	.+20     	; 0x5b1e <snprintf+0x5e>
    5b0a:	2f 81       	ldd	r18, Y+7	; 0x07
    5b0c:	38 85       	ldd	r19, Y+8	; 0x08
    5b0e:	42 17       	cp	r20, r18
    5b10:	53 07       	cpc	r21, r19
    5b12:	0c f4       	brge	.+2      	; 0x5b16 <snprintf+0x56>
    5b14:	9a 01       	movw	r18, r20
    5b16:	f8 01       	movw	r30, r16
    5b18:	e2 0f       	add	r30, r18
    5b1a:	f3 1f       	adc	r31, r19
    5b1c:	10 82       	st	Z, r1
    5b1e:	2e 96       	adiw	r28, 0x0e	; 14
    5b20:	cd bf       	out	0x3d, r28	; 61
    5b22:	de bf       	out	0x3e, r29	; 62
    5b24:	df 91       	pop	r29
    5b26:	cf 91       	pop	r28
    5b28:	1f 91       	pop	r17
    5b2a:	0f 91       	pop	r16
    5b2c:	08 95       	ret

00005b2e <sscanf>:
    5b2e:	cf 93       	push	r28
    5b30:	df 93       	push	r29
    5b32:	cd b7       	in	r28, 0x3d	; 61
    5b34:	de b7       	in	r29, 0x3e	; 62
    5b36:	2e 97       	sbiw	r28, 0x0e	; 14
    5b38:	cd bf       	out	0x3d, r28	; 61
    5b3a:	de bf       	out	0x3e, r29	; 62
    5b3c:	85 e0       	ldi	r24, 0x05	; 5
    5b3e:	8c 83       	std	Y+4, r24	; 0x04
    5b40:	8c 89       	ldd	r24, Y+20	; 0x14
    5b42:	9d 89       	ldd	r25, Y+21	; 0x15
    5b44:	89 83       	std	Y+1, r24	; 0x01
    5b46:	9a 83       	std	Y+2, r25	; 0x02
    5b48:	ae 01       	movw	r20, r28
    5b4a:	48 5e       	subi	r20, 0xE8	; 232
    5b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b4e:	6e 89       	ldd	r22, Y+22	; 0x16
    5b50:	7f 89       	ldd	r23, Y+23	; 0x17
    5b52:	ce 01       	movw	r24, r28
    5b54:	01 96       	adiw	r24, 0x01	; 1
    5b56:	0e 94 70 31 	call	0x62e0	; 0x62e0 <vfscanf>
    5b5a:	2e 96       	adiw	r28, 0x0e	; 14
    5b5c:	cd bf       	out	0x3d, r28	; 61
    5b5e:	de bf       	out	0x3e, r29	; 62
    5b60:	df 91       	pop	r29
    5b62:	cf 91       	pop	r28
    5b64:	08 95       	ret

00005b66 <vfprintf>:
    5b66:	2f 92       	push	r2
    5b68:	3f 92       	push	r3
    5b6a:	4f 92       	push	r4
    5b6c:	5f 92       	push	r5
    5b6e:	6f 92       	push	r6
    5b70:	7f 92       	push	r7
    5b72:	8f 92       	push	r8
    5b74:	9f 92       	push	r9
    5b76:	af 92       	push	r10
    5b78:	bf 92       	push	r11
    5b7a:	cf 92       	push	r12
    5b7c:	df 92       	push	r13
    5b7e:	ef 92       	push	r14
    5b80:	ff 92       	push	r15
    5b82:	0f 93       	push	r16
    5b84:	1f 93       	push	r17
    5b86:	cf 93       	push	r28
    5b88:	df 93       	push	r29
    5b8a:	cd b7       	in	r28, 0x3d	; 61
    5b8c:	de b7       	in	r29, 0x3e	; 62
    5b8e:	2b 97       	sbiw	r28, 0x0b	; 11
    5b90:	cd bf       	out	0x3d, r28	; 61
    5b92:	de bf       	out	0x3e, r29	; 62
    5b94:	6c 01       	movw	r12, r24
    5b96:	7b 01       	movw	r14, r22
    5b98:	8a 01       	movw	r16, r20
    5b9a:	fc 01       	movw	r30, r24
    5b9c:	16 82       	std	Z+6, r1	; 0x06
    5b9e:	17 82       	std	Z+7, r1	; 0x07
    5ba0:	83 81       	ldd	r24, Z+3	; 0x03
    5ba2:	81 ff       	sbrs	r24, 1
    5ba4:	cc c1       	rjmp	.+920    	; 0x5f3e <vfprintf+0x3d8>
    5ba6:	ce 01       	movw	r24, r28
    5ba8:	01 96       	adiw	r24, 0x01	; 1
    5baa:	3c 01       	movw	r6, r24
    5bac:	f6 01       	movw	r30, r12
    5bae:	93 81       	ldd	r25, Z+3	; 0x03
    5bb0:	f7 01       	movw	r30, r14
    5bb2:	93 fd       	sbrc	r25, 3
    5bb4:	85 91       	lpm	r24, Z+
    5bb6:	93 ff       	sbrs	r25, 3
    5bb8:	81 91       	ld	r24, Z+
    5bba:	7f 01       	movw	r14, r30
    5bbc:	88 23       	and	r24, r24
    5bbe:	09 f4       	brne	.+2      	; 0x5bc2 <vfprintf+0x5c>
    5bc0:	ba c1       	rjmp	.+884    	; 0x5f36 <vfprintf+0x3d0>
    5bc2:	85 32       	cpi	r24, 0x25	; 37
    5bc4:	39 f4       	brne	.+14     	; 0x5bd4 <vfprintf+0x6e>
    5bc6:	93 fd       	sbrc	r25, 3
    5bc8:	85 91       	lpm	r24, Z+
    5bca:	93 ff       	sbrs	r25, 3
    5bcc:	81 91       	ld	r24, Z+
    5bce:	7f 01       	movw	r14, r30
    5bd0:	85 32       	cpi	r24, 0x25	; 37
    5bd2:	29 f4       	brne	.+10     	; 0x5bde <vfprintf+0x78>
    5bd4:	b6 01       	movw	r22, r12
    5bd6:	90 e0       	ldi	r25, 0x00	; 0
    5bd8:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5bdc:	e7 cf       	rjmp	.-50     	; 0x5bac <vfprintf+0x46>
    5bde:	91 2c       	mov	r9, r1
    5be0:	21 2c       	mov	r2, r1
    5be2:	31 2c       	mov	r3, r1
    5be4:	ff e1       	ldi	r31, 0x1F	; 31
    5be6:	f3 15       	cp	r31, r3
    5be8:	d8 f0       	brcs	.+54     	; 0x5c20 <vfprintf+0xba>
    5bea:	8b 32       	cpi	r24, 0x2B	; 43
    5bec:	79 f0       	breq	.+30     	; 0x5c0c <vfprintf+0xa6>
    5bee:	38 f4       	brcc	.+14     	; 0x5bfe <vfprintf+0x98>
    5bf0:	80 32       	cpi	r24, 0x20	; 32
    5bf2:	79 f0       	breq	.+30     	; 0x5c12 <vfprintf+0xac>
    5bf4:	83 32       	cpi	r24, 0x23	; 35
    5bf6:	a1 f4       	brne	.+40     	; 0x5c20 <vfprintf+0xba>
    5bf8:	23 2d       	mov	r18, r3
    5bfa:	20 61       	ori	r18, 0x10	; 16
    5bfc:	1d c0       	rjmp	.+58     	; 0x5c38 <vfprintf+0xd2>
    5bfe:	8d 32       	cpi	r24, 0x2D	; 45
    5c00:	61 f0       	breq	.+24     	; 0x5c1a <vfprintf+0xb4>
    5c02:	80 33       	cpi	r24, 0x30	; 48
    5c04:	69 f4       	brne	.+26     	; 0x5c20 <vfprintf+0xba>
    5c06:	23 2d       	mov	r18, r3
    5c08:	21 60       	ori	r18, 0x01	; 1
    5c0a:	16 c0       	rjmp	.+44     	; 0x5c38 <vfprintf+0xd2>
    5c0c:	83 2d       	mov	r24, r3
    5c0e:	82 60       	ori	r24, 0x02	; 2
    5c10:	38 2e       	mov	r3, r24
    5c12:	e3 2d       	mov	r30, r3
    5c14:	e4 60       	ori	r30, 0x04	; 4
    5c16:	3e 2e       	mov	r3, r30
    5c18:	2a c0       	rjmp	.+84     	; 0x5c6e <vfprintf+0x108>
    5c1a:	f3 2d       	mov	r31, r3
    5c1c:	f8 60       	ori	r31, 0x08	; 8
    5c1e:	1d c0       	rjmp	.+58     	; 0x5c5a <vfprintf+0xf4>
    5c20:	37 fc       	sbrc	r3, 7
    5c22:	2d c0       	rjmp	.+90     	; 0x5c7e <vfprintf+0x118>
    5c24:	20 ed       	ldi	r18, 0xD0	; 208
    5c26:	28 0f       	add	r18, r24
    5c28:	2a 30       	cpi	r18, 0x0A	; 10
    5c2a:	40 f0       	brcs	.+16     	; 0x5c3c <vfprintf+0xd6>
    5c2c:	8e 32       	cpi	r24, 0x2E	; 46
    5c2e:	b9 f4       	brne	.+46     	; 0x5c5e <vfprintf+0xf8>
    5c30:	36 fc       	sbrc	r3, 6
    5c32:	81 c1       	rjmp	.+770    	; 0x5f36 <vfprintf+0x3d0>
    5c34:	23 2d       	mov	r18, r3
    5c36:	20 64       	ori	r18, 0x40	; 64
    5c38:	32 2e       	mov	r3, r18
    5c3a:	19 c0       	rjmp	.+50     	; 0x5c6e <vfprintf+0x108>
    5c3c:	36 fe       	sbrs	r3, 6
    5c3e:	06 c0       	rjmp	.+12     	; 0x5c4c <vfprintf+0xe6>
    5c40:	8a e0       	ldi	r24, 0x0A	; 10
    5c42:	98 9e       	mul	r9, r24
    5c44:	20 0d       	add	r18, r0
    5c46:	11 24       	eor	r1, r1
    5c48:	92 2e       	mov	r9, r18
    5c4a:	11 c0       	rjmp	.+34     	; 0x5c6e <vfprintf+0x108>
    5c4c:	ea e0       	ldi	r30, 0x0A	; 10
    5c4e:	2e 9e       	mul	r2, r30
    5c50:	20 0d       	add	r18, r0
    5c52:	11 24       	eor	r1, r1
    5c54:	22 2e       	mov	r2, r18
    5c56:	f3 2d       	mov	r31, r3
    5c58:	f0 62       	ori	r31, 0x20	; 32
    5c5a:	3f 2e       	mov	r3, r31
    5c5c:	08 c0       	rjmp	.+16     	; 0x5c6e <vfprintf+0x108>
    5c5e:	8c 36       	cpi	r24, 0x6C	; 108
    5c60:	21 f4       	brne	.+8      	; 0x5c6a <vfprintf+0x104>
    5c62:	83 2d       	mov	r24, r3
    5c64:	80 68       	ori	r24, 0x80	; 128
    5c66:	38 2e       	mov	r3, r24
    5c68:	02 c0       	rjmp	.+4      	; 0x5c6e <vfprintf+0x108>
    5c6a:	88 36       	cpi	r24, 0x68	; 104
    5c6c:	41 f4       	brne	.+16     	; 0x5c7e <vfprintf+0x118>
    5c6e:	f7 01       	movw	r30, r14
    5c70:	93 fd       	sbrc	r25, 3
    5c72:	85 91       	lpm	r24, Z+
    5c74:	93 ff       	sbrs	r25, 3
    5c76:	81 91       	ld	r24, Z+
    5c78:	7f 01       	movw	r14, r30
    5c7a:	81 11       	cpse	r24, r1
    5c7c:	b3 cf       	rjmp	.-154    	; 0x5be4 <vfprintf+0x7e>
    5c7e:	98 2f       	mov	r25, r24
    5c80:	9f 7d       	andi	r25, 0xDF	; 223
    5c82:	95 54       	subi	r25, 0x45	; 69
    5c84:	93 30       	cpi	r25, 0x03	; 3
    5c86:	28 f4       	brcc	.+10     	; 0x5c92 <vfprintf+0x12c>
    5c88:	0c 5f       	subi	r16, 0xFC	; 252
    5c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5c8c:	9f e3       	ldi	r25, 0x3F	; 63
    5c8e:	99 83       	std	Y+1, r25	; 0x01
    5c90:	0d c0       	rjmp	.+26     	; 0x5cac <vfprintf+0x146>
    5c92:	83 36       	cpi	r24, 0x63	; 99
    5c94:	31 f0       	breq	.+12     	; 0x5ca2 <vfprintf+0x13c>
    5c96:	83 37       	cpi	r24, 0x73	; 115
    5c98:	71 f0       	breq	.+28     	; 0x5cb6 <vfprintf+0x150>
    5c9a:	83 35       	cpi	r24, 0x53	; 83
    5c9c:	09 f0       	breq	.+2      	; 0x5ca0 <vfprintf+0x13a>
    5c9e:	59 c0       	rjmp	.+178    	; 0x5d52 <vfprintf+0x1ec>
    5ca0:	21 c0       	rjmp	.+66     	; 0x5ce4 <vfprintf+0x17e>
    5ca2:	f8 01       	movw	r30, r16
    5ca4:	80 81       	ld	r24, Z
    5ca6:	89 83       	std	Y+1, r24	; 0x01
    5ca8:	0e 5f       	subi	r16, 0xFE	; 254
    5caa:	1f 4f       	sbci	r17, 0xFF	; 255
    5cac:	88 24       	eor	r8, r8
    5cae:	83 94       	inc	r8
    5cb0:	91 2c       	mov	r9, r1
    5cb2:	53 01       	movw	r10, r6
    5cb4:	13 c0       	rjmp	.+38     	; 0x5cdc <vfprintf+0x176>
    5cb6:	28 01       	movw	r4, r16
    5cb8:	f2 e0       	ldi	r31, 0x02	; 2
    5cba:	4f 0e       	add	r4, r31
    5cbc:	51 1c       	adc	r5, r1
    5cbe:	f8 01       	movw	r30, r16
    5cc0:	a0 80       	ld	r10, Z
    5cc2:	b1 80       	ldd	r11, Z+1	; 0x01
    5cc4:	36 fe       	sbrs	r3, 6
    5cc6:	03 c0       	rjmp	.+6      	; 0x5cce <vfprintf+0x168>
    5cc8:	69 2d       	mov	r22, r9
    5cca:	70 e0       	ldi	r23, 0x00	; 0
    5ccc:	02 c0       	rjmp	.+4      	; 0x5cd2 <vfprintf+0x16c>
    5cce:	6f ef       	ldi	r22, 0xFF	; 255
    5cd0:	7f ef       	ldi	r23, 0xFF	; 255
    5cd2:	c5 01       	movw	r24, r10
    5cd4:	0e 94 b4 32 	call	0x6568	; 0x6568 <strnlen>
    5cd8:	4c 01       	movw	r8, r24
    5cda:	82 01       	movw	r16, r4
    5cdc:	f3 2d       	mov	r31, r3
    5cde:	ff 77       	andi	r31, 0x7F	; 127
    5ce0:	3f 2e       	mov	r3, r31
    5ce2:	16 c0       	rjmp	.+44     	; 0x5d10 <vfprintf+0x1aa>
    5ce4:	28 01       	movw	r4, r16
    5ce6:	22 e0       	ldi	r18, 0x02	; 2
    5ce8:	42 0e       	add	r4, r18
    5cea:	51 1c       	adc	r5, r1
    5cec:	f8 01       	movw	r30, r16
    5cee:	a0 80       	ld	r10, Z
    5cf0:	b1 80       	ldd	r11, Z+1	; 0x01
    5cf2:	36 fe       	sbrs	r3, 6
    5cf4:	03 c0       	rjmp	.+6      	; 0x5cfc <vfprintf+0x196>
    5cf6:	69 2d       	mov	r22, r9
    5cf8:	70 e0       	ldi	r23, 0x00	; 0
    5cfa:	02 c0       	rjmp	.+4      	; 0x5d00 <vfprintf+0x19a>
    5cfc:	6f ef       	ldi	r22, 0xFF	; 255
    5cfe:	7f ef       	ldi	r23, 0xFF	; 255
    5d00:	c5 01       	movw	r24, r10
    5d02:	0e 94 a9 32 	call	0x6552	; 0x6552 <strnlen_P>
    5d06:	4c 01       	movw	r8, r24
    5d08:	f3 2d       	mov	r31, r3
    5d0a:	f0 68       	ori	r31, 0x80	; 128
    5d0c:	3f 2e       	mov	r3, r31
    5d0e:	82 01       	movw	r16, r4
    5d10:	33 fc       	sbrc	r3, 3
    5d12:	1b c0       	rjmp	.+54     	; 0x5d4a <vfprintf+0x1e4>
    5d14:	82 2d       	mov	r24, r2
    5d16:	90 e0       	ldi	r25, 0x00	; 0
    5d18:	88 16       	cp	r8, r24
    5d1a:	99 06       	cpc	r9, r25
    5d1c:	b0 f4       	brcc	.+44     	; 0x5d4a <vfprintf+0x1e4>
    5d1e:	b6 01       	movw	r22, r12
    5d20:	80 e2       	ldi	r24, 0x20	; 32
    5d22:	90 e0       	ldi	r25, 0x00	; 0
    5d24:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5d28:	2a 94       	dec	r2
    5d2a:	f4 cf       	rjmp	.-24     	; 0x5d14 <vfprintf+0x1ae>
    5d2c:	f5 01       	movw	r30, r10
    5d2e:	37 fc       	sbrc	r3, 7
    5d30:	85 91       	lpm	r24, Z+
    5d32:	37 fe       	sbrs	r3, 7
    5d34:	81 91       	ld	r24, Z+
    5d36:	5f 01       	movw	r10, r30
    5d38:	b6 01       	movw	r22, r12
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5d40:	21 10       	cpse	r2, r1
    5d42:	2a 94       	dec	r2
    5d44:	21 e0       	ldi	r18, 0x01	; 1
    5d46:	82 1a       	sub	r8, r18
    5d48:	91 08       	sbc	r9, r1
    5d4a:	81 14       	cp	r8, r1
    5d4c:	91 04       	cpc	r9, r1
    5d4e:	71 f7       	brne	.-36     	; 0x5d2c <vfprintf+0x1c6>
    5d50:	e8 c0       	rjmp	.+464    	; 0x5f22 <vfprintf+0x3bc>
    5d52:	84 36       	cpi	r24, 0x64	; 100
    5d54:	11 f0       	breq	.+4      	; 0x5d5a <vfprintf+0x1f4>
    5d56:	89 36       	cpi	r24, 0x69	; 105
    5d58:	41 f5       	brne	.+80     	; 0x5daa <vfprintf+0x244>
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	37 fe       	sbrs	r3, 7
    5d5e:	07 c0       	rjmp	.+14     	; 0x5d6e <vfprintf+0x208>
    5d60:	60 81       	ld	r22, Z
    5d62:	71 81       	ldd	r23, Z+1	; 0x01
    5d64:	82 81       	ldd	r24, Z+2	; 0x02
    5d66:	93 81       	ldd	r25, Z+3	; 0x03
    5d68:	0c 5f       	subi	r16, 0xFC	; 252
    5d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d6c:	08 c0       	rjmp	.+16     	; 0x5d7e <vfprintf+0x218>
    5d6e:	60 81       	ld	r22, Z
    5d70:	71 81       	ldd	r23, Z+1	; 0x01
    5d72:	07 2e       	mov	r0, r23
    5d74:	00 0c       	add	r0, r0
    5d76:	88 0b       	sbc	r24, r24
    5d78:	99 0b       	sbc	r25, r25
    5d7a:	0e 5f       	subi	r16, 0xFE	; 254
    5d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    5d7e:	f3 2d       	mov	r31, r3
    5d80:	ff 76       	andi	r31, 0x6F	; 111
    5d82:	3f 2e       	mov	r3, r31
    5d84:	97 ff       	sbrs	r25, 7
    5d86:	09 c0       	rjmp	.+18     	; 0x5d9a <vfprintf+0x234>
    5d88:	90 95       	com	r25
    5d8a:	80 95       	com	r24
    5d8c:	70 95       	com	r23
    5d8e:	61 95       	neg	r22
    5d90:	7f 4f       	sbci	r23, 0xFF	; 255
    5d92:	8f 4f       	sbci	r24, 0xFF	; 255
    5d94:	9f 4f       	sbci	r25, 0xFF	; 255
    5d96:	f0 68       	ori	r31, 0x80	; 128
    5d98:	3f 2e       	mov	r3, r31
    5d9a:	2a e0       	ldi	r18, 0x0A	; 10
    5d9c:	30 e0       	ldi	r19, 0x00	; 0
    5d9e:	a3 01       	movw	r20, r6
    5da0:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__ultoa_invert>
    5da4:	88 2e       	mov	r8, r24
    5da6:	86 18       	sub	r8, r6
    5da8:	45 c0       	rjmp	.+138    	; 0x5e34 <vfprintf+0x2ce>
    5daa:	85 37       	cpi	r24, 0x75	; 117
    5dac:	31 f4       	brne	.+12     	; 0x5dba <vfprintf+0x254>
    5dae:	23 2d       	mov	r18, r3
    5db0:	2f 7e       	andi	r18, 0xEF	; 239
    5db2:	b2 2e       	mov	r11, r18
    5db4:	2a e0       	ldi	r18, 0x0A	; 10
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	25 c0       	rjmp	.+74     	; 0x5e04 <vfprintf+0x29e>
    5dba:	93 2d       	mov	r25, r3
    5dbc:	99 7f       	andi	r25, 0xF9	; 249
    5dbe:	b9 2e       	mov	r11, r25
    5dc0:	8f 36       	cpi	r24, 0x6F	; 111
    5dc2:	c1 f0       	breq	.+48     	; 0x5df4 <vfprintf+0x28e>
    5dc4:	18 f4       	brcc	.+6      	; 0x5dcc <vfprintf+0x266>
    5dc6:	88 35       	cpi	r24, 0x58	; 88
    5dc8:	79 f0       	breq	.+30     	; 0x5de8 <vfprintf+0x282>
    5dca:	b5 c0       	rjmp	.+362    	; 0x5f36 <vfprintf+0x3d0>
    5dcc:	80 37       	cpi	r24, 0x70	; 112
    5dce:	19 f0       	breq	.+6      	; 0x5dd6 <vfprintf+0x270>
    5dd0:	88 37       	cpi	r24, 0x78	; 120
    5dd2:	21 f0       	breq	.+8      	; 0x5ddc <vfprintf+0x276>
    5dd4:	b0 c0       	rjmp	.+352    	; 0x5f36 <vfprintf+0x3d0>
    5dd6:	e9 2f       	mov	r30, r25
    5dd8:	e0 61       	ori	r30, 0x10	; 16
    5dda:	be 2e       	mov	r11, r30
    5ddc:	b4 fe       	sbrs	r11, 4
    5dde:	0d c0       	rjmp	.+26     	; 0x5dfa <vfprintf+0x294>
    5de0:	fb 2d       	mov	r31, r11
    5de2:	f4 60       	ori	r31, 0x04	; 4
    5de4:	bf 2e       	mov	r11, r31
    5de6:	09 c0       	rjmp	.+18     	; 0x5dfa <vfprintf+0x294>
    5de8:	34 fe       	sbrs	r3, 4
    5dea:	0a c0       	rjmp	.+20     	; 0x5e00 <vfprintf+0x29a>
    5dec:	29 2f       	mov	r18, r25
    5dee:	26 60       	ori	r18, 0x06	; 6
    5df0:	b2 2e       	mov	r11, r18
    5df2:	06 c0       	rjmp	.+12     	; 0x5e00 <vfprintf+0x29a>
    5df4:	28 e0       	ldi	r18, 0x08	; 8
    5df6:	30 e0       	ldi	r19, 0x00	; 0
    5df8:	05 c0       	rjmp	.+10     	; 0x5e04 <vfprintf+0x29e>
    5dfa:	20 e1       	ldi	r18, 0x10	; 16
    5dfc:	30 e0       	ldi	r19, 0x00	; 0
    5dfe:	02 c0       	rjmp	.+4      	; 0x5e04 <vfprintf+0x29e>
    5e00:	20 e1       	ldi	r18, 0x10	; 16
    5e02:	32 e0       	ldi	r19, 0x02	; 2
    5e04:	f8 01       	movw	r30, r16
    5e06:	b7 fe       	sbrs	r11, 7
    5e08:	07 c0       	rjmp	.+14     	; 0x5e18 <vfprintf+0x2b2>
    5e0a:	60 81       	ld	r22, Z
    5e0c:	71 81       	ldd	r23, Z+1	; 0x01
    5e0e:	82 81       	ldd	r24, Z+2	; 0x02
    5e10:	93 81       	ldd	r25, Z+3	; 0x03
    5e12:	0c 5f       	subi	r16, 0xFC	; 252
    5e14:	1f 4f       	sbci	r17, 0xFF	; 255
    5e16:	06 c0       	rjmp	.+12     	; 0x5e24 <vfprintf+0x2be>
    5e18:	60 81       	ld	r22, Z
    5e1a:	71 81       	ldd	r23, Z+1	; 0x01
    5e1c:	80 e0       	ldi	r24, 0x00	; 0
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	0e 5f       	subi	r16, 0xFE	; 254
    5e22:	1f 4f       	sbci	r17, 0xFF	; 255
    5e24:	a3 01       	movw	r20, r6
    5e26:	0e 94 52 33 	call	0x66a4	; 0x66a4 <__ultoa_invert>
    5e2a:	88 2e       	mov	r8, r24
    5e2c:	86 18       	sub	r8, r6
    5e2e:	fb 2d       	mov	r31, r11
    5e30:	ff 77       	andi	r31, 0x7F	; 127
    5e32:	3f 2e       	mov	r3, r31
    5e34:	36 fe       	sbrs	r3, 6
    5e36:	0d c0       	rjmp	.+26     	; 0x5e52 <vfprintf+0x2ec>
    5e38:	23 2d       	mov	r18, r3
    5e3a:	2e 7f       	andi	r18, 0xFE	; 254
    5e3c:	a2 2e       	mov	r10, r18
    5e3e:	89 14       	cp	r8, r9
    5e40:	58 f4       	brcc	.+22     	; 0x5e58 <vfprintf+0x2f2>
    5e42:	34 fe       	sbrs	r3, 4
    5e44:	0b c0       	rjmp	.+22     	; 0x5e5c <vfprintf+0x2f6>
    5e46:	32 fc       	sbrc	r3, 2
    5e48:	09 c0       	rjmp	.+18     	; 0x5e5c <vfprintf+0x2f6>
    5e4a:	83 2d       	mov	r24, r3
    5e4c:	8e 7e       	andi	r24, 0xEE	; 238
    5e4e:	a8 2e       	mov	r10, r24
    5e50:	05 c0       	rjmp	.+10     	; 0x5e5c <vfprintf+0x2f6>
    5e52:	b8 2c       	mov	r11, r8
    5e54:	a3 2c       	mov	r10, r3
    5e56:	03 c0       	rjmp	.+6      	; 0x5e5e <vfprintf+0x2f8>
    5e58:	b8 2c       	mov	r11, r8
    5e5a:	01 c0       	rjmp	.+2      	; 0x5e5e <vfprintf+0x2f8>
    5e5c:	b9 2c       	mov	r11, r9
    5e5e:	a4 fe       	sbrs	r10, 4
    5e60:	0f c0       	rjmp	.+30     	; 0x5e80 <vfprintf+0x31a>
    5e62:	fe 01       	movw	r30, r28
    5e64:	e8 0d       	add	r30, r8
    5e66:	f1 1d       	adc	r31, r1
    5e68:	80 81       	ld	r24, Z
    5e6a:	80 33       	cpi	r24, 0x30	; 48
    5e6c:	21 f4       	brne	.+8      	; 0x5e76 <vfprintf+0x310>
    5e6e:	9a 2d       	mov	r25, r10
    5e70:	99 7e       	andi	r25, 0xE9	; 233
    5e72:	a9 2e       	mov	r10, r25
    5e74:	09 c0       	rjmp	.+18     	; 0x5e88 <vfprintf+0x322>
    5e76:	a2 fe       	sbrs	r10, 2
    5e78:	06 c0       	rjmp	.+12     	; 0x5e86 <vfprintf+0x320>
    5e7a:	b3 94       	inc	r11
    5e7c:	b3 94       	inc	r11
    5e7e:	04 c0       	rjmp	.+8      	; 0x5e88 <vfprintf+0x322>
    5e80:	8a 2d       	mov	r24, r10
    5e82:	86 78       	andi	r24, 0x86	; 134
    5e84:	09 f0       	breq	.+2      	; 0x5e88 <vfprintf+0x322>
    5e86:	b3 94       	inc	r11
    5e88:	a3 fc       	sbrc	r10, 3
    5e8a:	11 c0       	rjmp	.+34     	; 0x5eae <vfprintf+0x348>
    5e8c:	a0 fe       	sbrs	r10, 0
    5e8e:	06 c0       	rjmp	.+12     	; 0x5e9c <vfprintf+0x336>
    5e90:	b2 14       	cp	r11, r2
    5e92:	88 f4       	brcc	.+34     	; 0x5eb6 <vfprintf+0x350>
    5e94:	28 0c       	add	r2, r8
    5e96:	92 2c       	mov	r9, r2
    5e98:	9b 18       	sub	r9, r11
    5e9a:	0e c0       	rjmp	.+28     	; 0x5eb8 <vfprintf+0x352>
    5e9c:	b2 14       	cp	r11, r2
    5e9e:	60 f4       	brcc	.+24     	; 0x5eb8 <vfprintf+0x352>
    5ea0:	b6 01       	movw	r22, r12
    5ea2:	80 e2       	ldi	r24, 0x20	; 32
    5ea4:	90 e0       	ldi	r25, 0x00	; 0
    5ea6:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5eaa:	b3 94       	inc	r11
    5eac:	f7 cf       	rjmp	.-18     	; 0x5e9c <vfprintf+0x336>
    5eae:	b2 14       	cp	r11, r2
    5eb0:	18 f4       	brcc	.+6      	; 0x5eb8 <vfprintf+0x352>
    5eb2:	2b 18       	sub	r2, r11
    5eb4:	02 c0       	rjmp	.+4      	; 0x5eba <vfprintf+0x354>
    5eb6:	98 2c       	mov	r9, r8
    5eb8:	21 2c       	mov	r2, r1
    5eba:	a4 fe       	sbrs	r10, 4
    5ebc:	10 c0       	rjmp	.+32     	; 0x5ede <vfprintf+0x378>
    5ebe:	b6 01       	movw	r22, r12
    5ec0:	80 e3       	ldi	r24, 0x30	; 48
    5ec2:	90 e0       	ldi	r25, 0x00	; 0
    5ec4:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5ec8:	a2 fe       	sbrs	r10, 2
    5eca:	17 c0       	rjmp	.+46     	; 0x5efa <vfprintf+0x394>
    5ecc:	a1 fc       	sbrc	r10, 1
    5ece:	03 c0       	rjmp	.+6      	; 0x5ed6 <vfprintf+0x370>
    5ed0:	88 e7       	ldi	r24, 0x78	; 120
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	02 c0       	rjmp	.+4      	; 0x5eda <vfprintf+0x374>
    5ed6:	88 e5       	ldi	r24, 0x58	; 88
    5ed8:	90 e0       	ldi	r25, 0x00	; 0
    5eda:	b6 01       	movw	r22, r12
    5edc:	0c c0       	rjmp	.+24     	; 0x5ef6 <vfprintf+0x390>
    5ede:	8a 2d       	mov	r24, r10
    5ee0:	86 78       	andi	r24, 0x86	; 134
    5ee2:	59 f0       	breq	.+22     	; 0x5efa <vfprintf+0x394>
    5ee4:	a1 fe       	sbrs	r10, 1
    5ee6:	02 c0       	rjmp	.+4      	; 0x5eec <vfprintf+0x386>
    5ee8:	8b e2       	ldi	r24, 0x2B	; 43
    5eea:	01 c0       	rjmp	.+2      	; 0x5eee <vfprintf+0x388>
    5eec:	80 e2       	ldi	r24, 0x20	; 32
    5eee:	a7 fc       	sbrc	r10, 7
    5ef0:	8d e2       	ldi	r24, 0x2D	; 45
    5ef2:	b6 01       	movw	r22, r12
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5efa:	89 14       	cp	r8, r9
    5efc:	38 f4       	brcc	.+14     	; 0x5f0c <vfprintf+0x3a6>
    5efe:	b6 01       	movw	r22, r12
    5f00:	80 e3       	ldi	r24, 0x30	; 48
    5f02:	90 e0       	ldi	r25, 0x00	; 0
    5f04:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5f08:	9a 94       	dec	r9
    5f0a:	f7 cf       	rjmp	.-18     	; 0x5efa <vfprintf+0x394>
    5f0c:	8a 94       	dec	r8
    5f0e:	f3 01       	movw	r30, r6
    5f10:	e8 0d       	add	r30, r8
    5f12:	f1 1d       	adc	r31, r1
    5f14:	80 81       	ld	r24, Z
    5f16:	b6 01       	movw	r22, r12
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5f1e:	81 10       	cpse	r8, r1
    5f20:	f5 cf       	rjmp	.-22     	; 0x5f0c <vfprintf+0x3a6>
    5f22:	22 20       	and	r2, r2
    5f24:	09 f4       	brne	.+2      	; 0x5f28 <vfprintf+0x3c2>
    5f26:	42 ce       	rjmp	.-892    	; 0x5bac <vfprintf+0x46>
    5f28:	b6 01       	movw	r22, r12
    5f2a:	80 e2       	ldi	r24, 0x20	; 32
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	0e 94 fd 32 	call	0x65fa	; 0x65fa <fputc>
    5f32:	2a 94       	dec	r2
    5f34:	f6 cf       	rjmp	.-20     	; 0x5f22 <vfprintf+0x3bc>
    5f36:	f6 01       	movw	r30, r12
    5f38:	86 81       	ldd	r24, Z+6	; 0x06
    5f3a:	97 81       	ldd	r25, Z+7	; 0x07
    5f3c:	02 c0       	rjmp	.+4      	; 0x5f42 <vfprintf+0x3dc>
    5f3e:	8f ef       	ldi	r24, 0xFF	; 255
    5f40:	9f ef       	ldi	r25, 0xFF	; 255
    5f42:	2b 96       	adiw	r28, 0x0b	; 11
    5f44:	cd bf       	out	0x3d, r28	; 61
    5f46:	de bf       	out	0x3e, r29	; 62
    5f48:	df 91       	pop	r29
    5f4a:	cf 91       	pop	r28
    5f4c:	1f 91       	pop	r17
    5f4e:	0f 91       	pop	r16
    5f50:	ff 90       	pop	r15
    5f52:	ef 90       	pop	r14
    5f54:	df 90       	pop	r13
    5f56:	cf 90       	pop	r12
    5f58:	bf 90       	pop	r11
    5f5a:	af 90       	pop	r10
    5f5c:	9f 90       	pop	r9
    5f5e:	8f 90       	pop	r8
    5f60:	7f 90       	pop	r7
    5f62:	6f 90       	pop	r6
    5f64:	5f 90       	pop	r5
    5f66:	4f 90       	pop	r4
    5f68:	3f 90       	pop	r3
    5f6a:	2f 90       	pop	r2
    5f6c:	08 95       	ret

00005f6e <putval>:
    5f6e:	20 fd       	sbrc	r18, 0
    5f70:	09 c0       	rjmp	.+18     	; 0x5f84 <putval+0x16>
    5f72:	fc 01       	movw	r30, r24
    5f74:	23 fd       	sbrc	r18, 3
    5f76:	05 c0       	rjmp	.+10     	; 0x5f82 <putval+0x14>
    5f78:	22 ff       	sbrs	r18, 2
    5f7a:	02 c0       	rjmp	.+4      	; 0x5f80 <putval+0x12>
    5f7c:	73 83       	std	Z+3, r23	; 0x03
    5f7e:	62 83       	std	Z+2, r22	; 0x02
    5f80:	51 83       	std	Z+1, r21	; 0x01
    5f82:	40 83       	st	Z, r20
    5f84:	08 95       	ret

00005f86 <mulacc>:
    5f86:	44 fd       	sbrc	r20, 4
    5f88:	17 c0       	rjmp	.+46     	; 0x5fb8 <mulacc+0x32>
    5f8a:	46 fd       	sbrc	r20, 6
    5f8c:	17 c0       	rjmp	.+46     	; 0x5fbc <mulacc+0x36>
    5f8e:	ab 01       	movw	r20, r22
    5f90:	bc 01       	movw	r22, r24
    5f92:	da 01       	movw	r26, r20
    5f94:	fb 01       	movw	r30, r22
    5f96:	aa 0f       	add	r26, r26
    5f98:	bb 1f       	adc	r27, r27
    5f9a:	ee 1f       	adc	r30, r30
    5f9c:	ff 1f       	adc	r31, r31
    5f9e:	10 94       	com	r1
    5fa0:	d1 f7       	brne	.-12     	; 0x5f96 <mulacc+0x10>
    5fa2:	4a 0f       	add	r20, r26
    5fa4:	5b 1f       	adc	r21, r27
    5fa6:	6e 1f       	adc	r22, r30
    5fa8:	7f 1f       	adc	r23, r31
    5faa:	cb 01       	movw	r24, r22
    5fac:	ba 01       	movw	r22, r20
    5fae:	66 0f       	add	r22, r22
    5fb0:	77 1f       	adc	r23, r23
    5fb2:	88 1f       	adc	r24, r24
    5fb4:	99 1f       	adc	r25, r25
    5fb6:	09 c0       	rjmp	.+18     	; 0x5fca <mulacc+0x44>
    5fb8:	33 e0       	ldi	r19, 0x03	; 3
    5fba:	01 c0       	rjmp	.+2      	; 0x5fbe <mulacc+0x38>
    5fbc:	34 e0       	ldi	r19, 0x04	; 4
    5fbe:	66 0f       	add	r22, r22
    5fc0:	77 1f       	adc	r23, r23
    5fc2:	88 1f       	adc	r24, r24
    5fc4:	99 1f       	adc	r25, r25
    5fc6:	31 50       	subi	r19, 0x01	; 1
    5fc8:	d1 f7       	brne	.-12     	; 0x5fbe <mulacc+0x38>
    5fca:	62 0f       	add	r22, r18
    5fcc:	71 1d       	adc	r23, r1
    5fce:	81 1d       	adc	r24, r1
    5fd0:	91 1d       	adc	r25, r1
    5fd2:	08 95       	ret

00005fd4 <skip_spaces>:
    5fd4:	0f 93       	push	r16
    5fd6:	1f 93       	push	r17
    5fd8:	cf 93       	push	r28
    5fda:	df 93       	push	r29
    5fdc:	8c 01       	movw	r16, r24
    5fde:	c8 01       	movw	r24, r16
    5fe0:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    5fe4:	ec 01       	movw	r28, r24
    5fe6:	97 fd       	sbrc	r25, 7
    5fe8:	08 c0       	rjmp	.+16     	; 0x5ffa <skip_spaces+0x26>
    5fea:	0e 94 95 32 	call	0x652a	; 0x652a <isspace>
    5fee:	89 2b       	or	r24, r25
    5ff0:	b1 f7       	brne	.-20     	; 0x5fde <skip_spaces+0xa>
    5ff2:	b8 01       	movw	r22, r16
    5ff4:	ce 01       	movw	r24, r28
    5ff6:	0e 94 39 33 	call	0x6672	; 0x6672 <ungetc>
    5ffa:	ce 01       	movw	r24, r28
    5ffc:	df 91       	pop	r29
    5ffe:	cf 91       	pop	r28
    6000:	1f 91       	pop	r17
    6002:	0f 91       	pop	r16
    6004:	08 95       	ret

00006006 <conv_int>:
    6006:	8f 92       	push	r8
    6008:	9f 92       	push	r9
    600a:	af 92       	push	r10
    600c:	bf 92       	push	r11
    600e:	ef 92       	push	r14
    6010:	ff 92       	push	r15
    6012:	0f 93       	push	r16
    6014:	1f 93       	push	r17
    6016:	cf 93       	push	r28
    6018:	df 93       	push	r29
    601a:	8c 01       	movw	r16, r24
    601c:	d6 2f       	mov	r29, r22
    601e:	7a 01       	movw	r14, r20
    6020:	b2 2e       	mov	r11, r18
    6022:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    6026:	9c 01       	movw	r18, r24
    6028:	33 27       	eor	r19, r19
    602a:	2b 32       	cpi	r18, 0x2B	; 43
    602c:	31 05       	cpc	r19, r1
    602e:	31 f0       	breq	.+12     	; 0x603c <conv_int+0x36>
    6030:	2d 32       	cpi	r18, 0x2D	; 45
    6032:	31 05       	cpc	r19, r1
    6034:	61 f4       	brne	.+24     	; 0x604e <conv_int+0x48>
    6036:	8b 2d       	mov	r24, r11
    6038:	80 68       	ori	r24, 0x80	; 128
    603a:	b8 2e       	mov	r11, r24
    603c:	d1 50       	subi	r29, 0x01	; 1
    603e:	11 f4       	brne	.+4      	; 0x6044 <conv_int+0x3e>
    6040:	80 e0       	ldi	r24, 0x00	; 0
    6042:	68 c0       	rjmp	.+208    	; 0x6114 <conv_int+0x10e>
    6044:	c8 01       	movw	r24, r16
    6046:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    604a:	97 fd       	sbrc	r25, 7
    604c:	f9 cf       	rjmp	.-14     	; 0x6040 <conv_int+0x3a>
    604e:	cb 2d       	mov	r28, r11
    6050:	cd 7f       	andi	r28, 0xFD	; 253
    6052:	2b 2d       	mov	r18, r11
    6054:	20 73       	andi	r18, 0x30	; 48
    6056:	09 f5       	brne	.+66     	; 0x609a <conv_int+0x94>
    6058:	80 33       	cpi	r24, 0x30	; 48
    605a:	f9 f4       	brne	.+62     	; 0x609a <conv_int+0x94>
    605c:	aa 24       	eor	r10, r10
    605e:	aa 94       	dec	r10
    6060:	ad 0e       	add	r10, r29
    6062:	09 f4       	brne	.+2      	; 0x6066 <conv_int+0x60>
    6064:	43 c0       	rjmp	.+134    	; 0x60ec <conv_int+0xe6>
    6066:	c8 01       	movw	r24, r16
    6068:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    606c:	97 fd       	sbrc	r25, 7
    606e:	3e c0       	rjmp	.+124    	; 0x60ec <conv_int+0xe6>
    6070:	9c 01       	movw	r18, r24
    6072:	2f 7d       	andi	r18, 0xDF	; 223
    6074:	33 27       	eor	r19, r19
    6076:	28 35       	cpi	r18, 0x58	; 88
    6078:	31 05       	cpc	r19, r1
    607a:	49 f4       	brne	.+18     	; 0x608e <conv_int+0x88>
    607c:	c2 64       	ori	r28, 0x42	; 66
    607e:	d2 50       	subi	r29, 0x02	; 2
    6080:	a9 f1       	breq	.+106    	; 0x60ec <conv_int+0xe6>
    6082:	c8 01       	movw	r24, r16
    6084:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    6088:	97 ff       	sbrs	r25, 7
    608a:	07 c0       	rjmp	.+14     	; 0x609a <conv_int+0x94>
    608c:	2f c0       	rjmp	.+94     	; 0x60ec <conv_int+0xe6>
    608e:	b6 fe       	sbrs	r11, 6
    6090:	02 c0       	rjmp	.+4      	; 0x6096 <conv_int+0x90>
    6092:	c2 60       	ori	r28, 0x02	; 2
    6094:	01 c0       	rjmp	.+2      	; 0x6098 <conv_int+0x92>
    6096:	c2 61       	ori	r28, 0x12	; 18
    6098:	da 2d       	mov	r29, r10
    609a:	81 2c       	mov	r8, r1
    609c:	91 2c       	mov	r9, r1
    609e:	54 01       	movw	r10, r8
    60a0:	20 ed       	ldi	r18, 0xD0	; 208
    60a2:	28 0f       	add	r18, r24
    60a4:	28 30       	cpi	r18, 0x08	; 8
    60a6:	80 f0       	brcs	.+32     	; 0x60c8 <conv_int+0xc2>
    60a8:	c4 ff       	sbrs	r28, 4
    60aa:	04 c0       	rjmp	.+8      	; 0x60b4 <conv_int+0xae>
    60ac:	b8 01       	movw	r22, r16
    60ae:	0e 94 39 33 	call	0x6672	; 0x6672 <ungetc>
    60b2:	19 c0       	rjmp	.+50     	; 0x60e6 <conv_int+0xe0>
    60b4:	2a 30       	cpi	r18, 0x0A	; 10
    60b6:	40 f0       	brcs	.+16     	; 0x60c8 <conv_int+0xc2>
    60b8:	c6 ff       	sbrs	r28, 6
    60ba:	f8 cf       	rjmp	.-16     	; 0x60ac <conv_int+0xa6>
    60bc:	2f 7d       	andi	r18, 0xDF	; 223
    60be:	3f ee       	ldi	r19, 0xEF	; 239
    60c0:	32 0f       	add	r19, r18
    60c2:	36 30       	cpi	r19, 0x06	; 6
    60c4:	98 f7       	brcc	.-26     	; 0x60ac <conv_int+0xa6>
    60c6:	27 50       	subi	r18, 0x07	; 7
    60c8:	4c 2f       	mov	r20, r28
    60ca:	c5 01       	movw	r24, r10
    60cc:	b4 01       	movw	r22, r8
    60ce:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <mulacc>
    60d2:	4b 01       	movw	r8, r22
    60d4:	5c 01       	movw	r10, r24
    60d6:	c2 60       	ori	r28, 0x02	; 2
    60d8:	d1 50       	subi	r29, 0x01	; 1
    60da:	59 f0       	breq	.+22     	; 0x60f2 <conv_int+0xec>
    60dc:	c8 01       	movw	r24, r16
    60de:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    60e2:	97 ff       	sbrs	r25, 7
    60e4:	dd cf       	rjmp	.-70     	; 0x60a0 <conv_int+0x9a>
    60e6:	c1 fd       	sbrc	r28, 1
    60e8:	04 c0       	rjmp	.+8      	; 0x60f2 <conv_int+0xec>
    60ea:	aa cf       	rjmp	.-172    	; 0x6040 <conv_int+0x3a>
    60ec:	81 2c       	mov	r8, r1
    60ee:	91 2c       	mov	r9, r1
    60f0:	54 01       	movw	r10, r8
    60f2:	c7 ff       	sbrs	r28, 7
    60f4:	08 c0       	rjmp	.+16     	; 0x6106 <conv_int+0x100>
    60f6:	b0 94       	com	r11
    60f8:	a0 94       	com	r10
    60fa:	90 94       	com	r9
    60fc:	80 94       	com	r8
    60fe:	81 1c       	adc	r8, r1
    6100:	91 1c       	adc	r9, r1
    6102:	a1 1c       	adc	r10, r1
    6104:	b1 1c       	adc	r11, r1
    6106:	2c 2f       	mov	r18, r28
    6108:	b5 01       	movw	r22, r10
    610a:	a4 01       	movw	r20, r8
    610c:	c7 01       	movw	r24, r14
    610e:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <putval>
    6112:	81 e0       	ldi	r24, 0x01	; 1
    6114:	df 91       	pop	r29
    6116:	cf 91       	pop	r28
    6118:	1f 91       	pop	r17
    611a:	0f 91       	pop	r16
    611c:	ff 90       	pop	r15
    611e:	ef 90       	pop	r14
    6120:	bf 90       	pop	r11
    6122:	af 90       	pop	r10
    6124:	9f 90       	pop	r9
    6126:	8f 90       	pop	r8
    6128:	08 95       	ret

0000612a <conv_brk>:
    612a:	5f 92       	push	r5
    612c:	6f 92       	push	r6
    612e:	7f 92       	push	r7
    6130:	8f 92       	push	r8
    6132:	9f 92       	push	r9
    6134:	af 92       	push	r10
    6136:	bf 92       	push	r11
    6138:	cf 92       	push	r12
    613a:	df 92       	push	r13
    613c:	ef 92       	push	r14
    613e:	ff 92       	push	r15
    6140:	0f 93       	push	r16
    6142:	1f 93       	push	r17
    6144:	cf 93       	push	r28
    6146:	df 93       	push	r29
    6148:	cd b7       	in	r28, 0x3d	; 61
    614a:	de b7       	in	r29, 0x3e	; 62
    614c:	a0 97       	sbiw	r28, 0x20	; 32
    614e:	cd bf       	out	0x3d, r28	; 61
    6150:	de bf       	out	0x3e, r29	; 62
    6152:	5c 01       	movw	r10, r24
    6154:	96 2e       	mov	r9, r22
    6156:	7a 01       	movw	r14, r20
    6158:	f9 01       	movw	r30, r18
    615a:	8e 01       	movw	r16, r28
    615c:	0f 5f       	subi	r16, 0xFF	; 255
    615e:	1f 4f       	sbci	r17, 0xFF	; 255
    6160:	68 01       	movw	r12, r16
    6162:	80 e2       	ldi	r24, 0x20	; 32
    6164:	d8 01       	movw	r26, r16
    6166:	1d 92       	st	X+, r1
    6168:	8a 95       	dec	r24
    616a:	e9 f7       	brne	.-6      	; 0x6166 <conv_brk+0x3c>
    616c:	d5 01       	movw	r26, r10
    616e:	13 96       	adiw	r26, 0x03	; 3
    6170:	8c 90       	ld	r8, X
    6172:	80 e0       	ldi	r24, 0x00	; 0
    6174:	90 e0       	ldi	r25, 0x00	; 0
    6176:	61 2c       	mov	r6, r1
    6178:	71 2c       	mov	r7, r1
    617a:	30 e0       	ldi	r19, 0x00	; 0
    617c:	61 e0       	ldi	r22, 0x01	; 1
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	83 fc       	sbrc	r8, 3
    6182:	25 91       	lpm	r18, Z+
    6184:	83 fe       	sbrs	r8, 3
    6186:	21 91       	ld	r18, Z+
    6188:	8f 01       	movw	r16, r30
    618a:	52 2e       	mov	r5, r18
    618c:	21 11       	cpse	r18, r1
    618e:	03 c0       	rjmp	.+6      	; 0x6196 <conv_brk+0x6c>
    6190:	80 e0       	ldi	r24, 0x00	; 0
    6192:	90 e0       	ldi	r25, 0x00	; 0
    6194:	92 c0       	rjmp	.+292    	; 0x62ba <conv_brk+0x190>
    6196:	2e 35       	cpi	r18, 0x5E	; 94
    6198:	11 f4       	brne	.+4      	; 0x619e <conv_brk+0x74>
    619a:	00 97       	sbiw	r24, 0x00	; 0
    619c:	51 f1       	breq	.+84     	; 0x61f2 <conv_brk+0xc8>
    619e:	43 2f       	mov	r20, r19
    61a0:	50 e0       	ldi	r21, 0x00	; 0
    61a2:	48 17       	cp	r20, r24
    61a4:	59 07       	cpc	r21, r25
    61a6:	3c f4       	brge	.+14     	; 0x61b6 <conv_brk+0x8c>
    61a8:	2d 35       	cpi	r18, 0x5D	; 93
    61aa:	59 f1       	breq	.+86     	; 0x6202 <conv_brk+0xd8>
    61ac:	2d 32       	cpi	r18, 0x2D	; 45
    61ae:	19 f4       	brne	.+6      	; 0x61b6 <conv_brk+0x8c>
    61b0:	77 20       	and	r7, r7
    61b2:	09 f1       	breq	.+66     	; 0x61f6 <conv_brk+0xcc>
    61b4:	03 c0       	rjmp	.+6      	; 0x61bc <conv_brk+0x92>
    61b6:	77 20       	and	r7, r7
    61b8:	09 f4       	brne	.+2      	; 0x61bc <conv_brk+0x92>
    61ba:	6a c0       	rjmp	.+212    	; 0x6290 <conv_brk+0x166>
    61bc:	45 2d       	mov	r20, r5
    61be:	46 95       	lsr	r20
    61c0:	46 95       	lsr	r20
    61c2:	46 95       	lsr	r20
    61c4:	d6 01       	movw	r26, r12
    61c6:	a4 0f       	add	r26, r20
    61c8:	b1 1d       	adc	r27, r1
    61ca:	45 2d       	mov	r20, r5
    61cc:	47 70       	andi	r20, 0x07	; 7
    61ce:	8b 01       	movw	r16, r22
    61d0:	02 c0       	rjmp	.+4      	; 0x61d6 <conv_brk+0xac>
    61d2:	00 0f       	add	r16, r16
    61d4:	11 1f       	adc	r17, r17
    61d6:	4a 95       	dec	r20
    61d8:	e2 f7       	brpl	.-8      	; 0x61d2 <conv_brk+0xa8>
    61da:	a8 01       	movw	r20, r16
    61dc:	5c 91       	ld	r21, X
    61de:	45 2b       	or	r20, r21
    61e0:	4c 93       	st	X, r20
    61e2:	65 14       	cp	r6, r5
    61e4:	59 f0       	breq	.+22     	; 0x61fc <conv_brk+0xd2>
    61e6:	56 14       	cp	r5, r6
    61e8:	10 f4       	brcc	.+4      	; 0x61ee <conv_brk+0xc4>
    61ea:	53 94       	inc	r5
    61ec:	e7 cf       	rjmp	.-50     	; 0x61bc <conv_brk+0x92>
    61ee:	5a 94       	dec	r5
    61f0:	e5 cf       	rjmp	.-54     	; 0x61bc <conv_brk+0x92>
    61f2:	31 e0       	ldi	r19, 0x01	; 1
    61f4:	04 c0       	rjmp	.+8      	; 0x61fe <conv_brk+0xd4>
    61f6:	77 24       	eor	r7, r7
    61f8:	73 94       	inc	r7
    61fa:	01 c0       	rjmp	.+2      	; 0x61fe <conv_brk+0xd4>
    61fc:	71 2c       	mov	r7, r1
    61fe:	01 96       	adiw	r24, 0x01	; 1
    6200:	bf cf       	rjmp	.-130    	; 0x6180 <conv_brk+0x56>
    6202:	77 20       	and	r7, r7
    6204:	19 f0       	breq	.+6      	; 0x620c <conv_brk+0xe2>
    6206:	8e 81       	ldd	r24, Y+6	; 0x06
    6208:	80 62       	ori	r24, 0x20	; 32
    620a:	8e 83       	std	Y+6, r24	; 0x06
    620c:	31 11       	cpse	r19, r1
    620e:	03 c0       	rjmp	.+6      	; 0x6216 <conv_brk+0xec>
    6210:	88 24       	eor	r8, r8
    6212:	83 94       	inc	r8
    6214:	17 c0       	rjmp	.+46     	; 0x6244 <conv_brk+0x11a>
    6216:	f6 01       	movw	r30, r12
    6218:	9e 01       	movw	r18, r28
    621a:	2f 5d       	subi	r18, 0xDF	; 223
    621c:	3f 4f       	sbci	r19, 0xFF	; 255
    621e:	80 81       	ld	r24, Z
    6220:	80 95       	com	r24
    6222:	81 93       	st	Z+, r24
    6224:	2e 17       	cp	r18, r30
    6226:	3f 07       	cpc	r19, r31
    6228:	d1 f7       	brne	.-12     	; 0x621e <conv_brk+0xf4>
    622a:	f2 cf       	rjmp	.-28     	; 0x6210 <conv_brk+0xe6>
    622c:	e1 14       	cp	r14, r1
    622e:	f1 04       	cpc	r15, r1
    6230:	29 f0       	breq	.+10     	; 0x623c <conv_brk+0x112>
    6232:	d7 01       	movw	r26, r14
    6234:	8c 93       	st	X, r24
    6236:	f7 01       	movw	r30, r14
    6238:	31 96       	adiw	r30, 0x01	; 1
    623a:	7f 01       	movw	r14, r30
    623c:	9a 94       	dec	r9
    623e:	81 2c       	mov	r8, r1
    6240:	99 20       	and	r9, r9
    6242:	f9 f0       	breq	.+62     	; 0x6282 <conv_brk+0x158>
    6244:	c5 01       	movw	r24, r10
    6246:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    624a:	97 fd       	sbrc	r25, 7
    624c:	18 c0       	rjmp	.+48     	; 0x627e <conv_brk+0x154>
    624e:	fc 01       	movw	r30, r24
    6250:	ff 27       	eor	r31, r31
    6252:	23 e0       	ldi	r18, 0x03	; 3
    6254:	f5 95       	asr	r31
    6256:	e7 95       	ror	r30
    6258:	2a 95       	dec	r18
    625a:	e1 f7       	brne	.-8      	; 0x6254 <conv_brk+0x12a>
    625c:	ec 0d       	add	r30, r12
    625e:	fd 1d       	adc	r31, r13
    6260:	20 81       	ld	r18, Z
    6262:	30 e0       	ldi	r19, 0x00	; 0
    6264:	ac 01       	movw	r20, r24
    6266:	47 70       	andi	r20, 0x07	; 7
    6268:	55 27       	eor	r21, r21
    626a:	02 c0       	rjmp	.+4      	; 0x6270 <conv_brk+0x146>
    626c:	35 95       	asr	r19
    626e:	27 95       	ror	r18
    6270:	4a 95       	dec	r20
    6272:	e2 f7       	brpl	.-8      	; 0x626c <conv_brk+0x142>
    6274:	20 fd       	sbrc	r18, 0
    6276:	da cf       	rjmp	.-76     	; 0x622c <conv_brk+0x102>
    6278:	b5 01       	movw	r22, r10
    627a:	0e 94 39 33 	call	0x6672	; 0x6672 <ungetc>
    627e:	81 10       	cpse	r8, r1
    6280:	87 cf       	rjmp	.-242    	; 0x6190 <conv_brk+0x66>
    6282:	e1 14       	cp	r14, r1
    6284:	f1 04       	cpc	r15, r1
    6286:	11 f0       	breq	.+4      	; 0x628c <conv_brk+0x162>
    6288:	d7 01       	movw	r26, r14
    628a:	1c 92       	st	X, r1
    628c:	c8 01       	movw	r24, r16
    628e:	15 c0       	rjmp	.+42     	; 0x62ba <conv_brk+0x190>
    6290:	42 2f       	mov	r20, r18
    6292:	46 95       	lsr	r20
    6294:	46 95       	lsr	r20
    6296:	46 95       	lsr	r20
    6298:	d6 01       	movw	r26, r12
    629a:	a4 0f       	add	r26, r20
    629c:	b1 1d       	adc	r27, r1
    629e:	42 2f       	mov	r20, r18
    62a0:	47 70       	andi	r20, 0x07	; 7
    62a2:	8b 01       	movw	r16, r22
    62a4:	02 c0       	rjmp	.+4      	; 0x62aa <conv_brk+0x180>
    62a6:	00 0f       	add	r16, r16
    62a8:	11 1f       	adc	r17, r17
    62aa:	4a 95       	dec	r20
    62ac:	e2 f7       	brpl	.-8      	; 0x62a6 <conv_brk+0x17c>
    62ae:	a8 01       	movw	r20, r16
    62b0:	5c 91       	ld	r21, X
    62b2:	45 2b       	or	r20, r21
    62b4:	4c 93       	st	X, r20
    62b6:	62 2e       	mov	r6, r18
    62b8:	a2 cf       	rjmp	.-188    	; 0x61fe <conv_brk+0xd4>
    62ba:	a0 96       	adiw	r28, 0x20	; 32
    62bc:	cd bf       	out	0x3d, r28	; 61
    62be:	de bf       	out	0x3e, r29	; 62
    62c0:	df 91       	pop	r29
    62c2:	cf 91       	pop	r28
    62c4:	1f 91       	pop	r17
    62c6:	0f 91       	pop	r16
    62c8:	ff 90       	pop	r15
    62ca:	ef 90       	pop	r14
    62cc:	df 90       	pop	r13
    62ce:	cf 90       	pop	r12
    62d0:	bf 90       	pop	r11
    62d2:	af 90       	pop	r10
    62d4:	9f 90       	pop	r9
    62d6:	8f 90       	pop	r8
    62d8:	7f 90       	pop	r7
    62da:	6f 90       	pop	r6
    62dc:	5f 90       	pop	r5
    62de:	08 95       	ret

000062e0 <vfscanf>:
    62e0:	5f 92       	push	r5
    62e2:	6f 92       	push	r6
    62e4:	7f 92       	push	r7
    62e6:	8f 92       	push	r8
    62e8:	9f 92       	push	r9
    62ea:	af 92       	push	r10
    62ec:	bf 92       	push	r11
    62ee:	cf 92       	push	r12
    62f0:	df 92       	push	r13
    62f2:	ef 92       	push	r14
    62f4:	ff 92       	push	r15
    62f6:	0f 93       	push	r16
    62f8:	1f 93       	push	r17
    62fa:	cf 93       	push	r28
    62fc:	df 93       	push	r29
    62fe:	6c 01       	movw	r12, r24
    6300:	eb 01       	movw	r28, r22
    6302:	5a 01       	movw	r10, r20
    6304:	fc 01       	movw	r30, r24
    6306:	16 82       	std	Z+6, r1	; 0x06
    6308:	17 82       	std	Z+7, r1	; 0x07
    630a:	51 2c       	mov	r5, r1
    630c:	f6 01       	movw	r30, r12
    630e:	e3 80       	ldd	r14, Z+3	; 0x03
    6310:	fe 01       	movw	r30, r28
    6312:	e3 fc       	sbrc	r14, 3
    6314:	85 91       	lpm	r24, Z+
    6316:	e3 fe       	sbrs	r14, 3
    6318:	81 91       	ld	r24, Z+
    631a:	18 2f       	mov	r17, r24
    631c:	ef 01       	movw	r28, r30
    631e:	88 23       	and	r24, r24
    6320:	09 f4       	brne	.+2      	; 0x6324 <vfscanf+0x44>
    6322:	ee c0       	rjmp	.+476    	; 0x6500 <vfscanf+0x220>
    6324:	90 e0       	ldi	r25, 0x00	; 0
    6326:	0e 94 95 32 	call	0x652a	; 0x652a <isspace>
    632a:	89 2b       	or	r24, r25
    632c:	21 f0       	breq	.+8      	; 0x6336 <vfscanf+0x56>
    632e:	c6 01       	movw	r24, r12
    6330:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <skip_spaces>
    6334:	eb cf       	rjmp	.-42     	; 0x630c <vfscanf+0x2c>
    6336:	15 32       	cpi	r17, 0x25	; 37
    6338:	41 f4       	brne	.+16     	; 0x634a <vfscanf+0x6a>
    633a:	fe 01       	movw	r30, r28
    633c:	e3 fc       	sbrc	r14, 3
    633e:	15 91       	lpm	r17, Z+
    6340:	e3 fe       	sbrs	r14, 3
    6342:	11 91       	ld	r17, Z+
    6344:	ef 01       	movw	r28, r30
    6346:	15 32       	cpi	r17, 0x25	; 37
    6348:	81 f4       	brne	.+32     	; 0x636a <vfscanf+0x8a>
    634a:	c6 01       	movw	r24, r12
    634c:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    6350:	97 fd       	sbrc	r25, 7
    6352:	d4 c0       	rjmp	.+424    	; 0x64fc <vfscanf+0x21c>
    6354:	41 2f       	mov	r20, r17
    6356:	50 e0       	ldi	r21, 0x00	; 0
    6358:	9c 01       	movw	r18, r24
    635a:	33 27       	eor	r19, r19
    635c:	24 17       	cp	r18, r20
    635e:	35 07       	cpc	r19, r21
    6360:	a9 f2       	breq	.-86     	; 0x630c <vfscanf+0x2c>
    6362:	b6 01       	movw	r22, r12
    6364:	0e 94 39 33 	call	0x6672	; 0x6672 <ungetc>
    6368:	cb c0       	rjmp	.+406    	; 0x6500 <vfscanf+0x220>
    636a:	1a 32       	cpi	r17, 0x2A	; 42
    636c:	39 f4       	brne	.+14     	; 0x637c <vfscanf+0x9c>
    636e:	e3 fc       	sbrc	r14, 3
    6370:	15 91       	lpm	r17, Z+
    6372:	e3 fe       	sbrs	r14, 3
    6374:	11 91       	ld	r17, Z+
    6376:	ef 01       	movw	r28, r30
    6378:	01 e0       	ldi	r16, 0x01	; 1
    637a:	01 c0       	rjmp	.+2      	; 0x637e <vfscanf+0x9e>
    637c:	00 e0       	ldi	r16, 0x00	; 0
    637e:	f1 2c       	mov	r15, r1
    6380:	20 ed       	ldi	r18, 0xD0	; 208
    6382:	21 0f       	add	r18, r17
    6384:	2a 30       	cpi	r18, 0x0A	; 10
    6386:	80 f4       	brcc	.+32     	; 0x63a8 <vfscanf+0xc8>
    6388:	02 60       	ori	r16, 0x02	; 2
    638a:	6f 2d       	mov	r22, r15
    638c:	70 e0       	ldi	r23, 0x00	; 0
    638e:	80 e0       	ldi	r24, 0x00	; 0
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	40 e2       	ldi	r20, 0x20	; 32
    6394:	0e 94 c3 2f 	call	0x5f86	; 0x5f86 <mulacc>
    6398:	f6 2e       	mov	r15, r22
    639a:	fe 01       	movw	r30, r28
    639c:	e3 fc       	sbrc	r14, 3
    639e:	15 91       	lpm	r17, Z+
    63a0:	e3 fe       	sbrs	r14, 3
    63a2:	11 91       	ld	r17, Z+
    63a4:	ef 01       	movw	r28, r30
    63a6:	ec cf       	rjmp	.-40     	; 0x6380 <vfscanf+0xa0>
    63a8:	01 ff       	sbrs	r16, 1
    63aa:	03 c0       	rjmp	.+6      	; 0x63b2 <vfscanf+0xd2>
    63ac:	f1 10       	cpse	r15, r1
    63ae:	03 c0       	rjmp	.+6      	; 0x63b6 <vfscanf+0xd6>
    63b0:	a7 c0       	rjmp	.+334    	; 0x6500 <vfscanf+0x220>
    63b2:	ff 24       	eor	r15, r15
    63b4:	fa 94       	dec	r15
    63b6:	18 36       	cpi	r17, 0x68	; 104
    63b8:	19 f0       	breq	.+6      	; 0x63c0 <vfscanf+0xe0>
    63ba:	1c 36       	cpi	r17, 0x6C	; 108
    63bc:	51 f0       	breq	.+20     	; 0x63d2 <vfscanf+0xf2>
    63be:	10 c0       	rjmp	.+32     	; 0x63e0 <vfscanf+0x100>
    63c0:	fe 01       	movw	r30, r28
    63c2:	e3 fc       	sbrc	r14, 3
    63c4:	15 91       	lpm	r17, Z+
    63c6:	e3 fe       	sbrs	r14, 3
    63c8:	11 91       	ld	r17, Z+
    63ca:	ef 01       	movw	r28, r30
    63cc:	18 36       	cpi	r17, 0x68	; 104
    63ce:	41 f4       	brne	.+16     	; 0x63e0 <vfscanf+0x100>
    63d0:	08 60       	ori	r16, 0x08	; 8
    63d2:	04 60       	ori	r16, 0x04	; 4
    63d4:	fe 01       	movw	r30, r28
    63d6:	e3 fc       	sbrc	r14, 3
    63d8:	15 91       	lpm	r17, Z+
    63da:	e3 fe       	sbrs	r14, 3
    63dc:	11 91       	ld	r17, Z+
    63de:	ef 01       	movw	r28, r30
    63e0:	11 23       	and	r17, r17
    63e2:	09 f4       	brne	.+2      	; 0x63e6 <vfscanf+0x106>
    63e4:	8d c0       	rjmp	.+282    	; 0x6500 <vfscanf+0x220>
    63e6:	61 2f       	mov	r22, r17
    63e8:	70 e0       	ldi	r23, 0x00	; 0
    63ea:	8e e8       	ldi	r24, 0x8E	; 142
    63ec:	92 e0       	ldi	r25, 0x02	; 2
    63ee:	0e 94 9e 32 	call	0x653c	; 0x653c <strchr_P>
    63f2:	89 2b       	or	r24, r25
    63f4:	09 f4       	brne	.+2      	; 0x63f8 <vfscanf+0x118>
    63f6:	84 c0       	rjmp	.+264    	; 0x6500 <vfscanf+0x220>
    63f8:	00 fd       	sbrc	r16, 0
    63fa:	07 c0       	rjmp	.+14     	; 0x640a <vfscanf+0x12a>
    63fc:	f5 01       	movw	r30, r10
    63fe:	80 80       	ld	r8, Z
    6400:	91 80       	ldd	r9, Z+1	; 0x01
    6402:	c5 01       	movw	r24, r10
    6404:	02 96       	adiw	r24, 0x02	; 2
    6406:	5c 01       	movw	r10, r24
    6408:	02 c0       	rjmp	.+4      	; 0x640e <vfscanf+0x12e>
    640a:	81 2c       	mov	r8, r1
    640c:	91 2c       	mov	r9, r1
    640e:	1e 36       	cpi	r17, 0x6E	; 110
    6410:	51 f4       	brne	.+20     	; 0x6426 <vfscanf+0x146>
    6412:	f6 01       	movw	r30, r12
    6414:	46 81       	ldd	r20, Z+6	; 0x06
    6416:	57 81       	ldd	r21, Z+7	; 0x07
    6418:	60 e0       	ldi	r22, 0x00	; 0
    641a:	70 e0       	ldi	r23, 0x00	; 0
    641c:	20 2f       	mov	r18, r16
    641e:	c4 01       	movw	r24, r8
    6420:	0e 94 b7 2f 	call	0x5f6e	; 0x5f6e <putval>
    6424:	73 cf       	rjmp	.-282    	; 0x630c <vfscanf+0x2c>
    6426:	13 36       	cpi	r17, 0x63	; 99
    6428:	a9 f4       	brne	.+42     	; 0x6454 <vfscanf+0x174>
    642a:	01 fd       	sbrc	r16, 1
    642c:	02 c0       	rjmp	.+4      	; 0x6432 <vfscanf+0x152>
    642e:	ff 24       	eor	r15, r15
    6430:	f3 94       	inc	r15
    6432:	c6 01       	movw	r24, r12
    6434:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    6438:	97 fd       	sbrc	r25, 7
    643a:	60 c0       	rjmp	.+192    	; 0x64fc <vfscanf+0x21c>
    643c:	81 14       	cp	r8, r1
    643e:	91 04       	cpc	r9, r1
    6440:	29 f0       	breq	.+10     	; 0x644c <vfscanf+0x16c>
    6442:	f4 01       	movw	r30, r8
    6444:	80 83       	st	Z, r24
    6446:	c4 01       	movw	r24, r8
    6448:	01 96       	adiw	r24, 0x01	; 1
    644a:	4c 01       	movw	r8, r24
    644c:	fa 94       	dec	r15
    644e:	f1 10       	cpse	r15, r1
    6450:	f0 cf       	rjmp	.-32     	; 0x6432 <vfscanf+0x152>
    6452:	50 c0       	rjmp	.+160    	; 0x64f4 <vfscanf+0x214>
    6454:	1b 35       	cpi	r17, 0x5B	; 91
    6456:	59 f4       	brne	.+22     	; 0x646e <vfscanf+0x18e>
    6458:	9e 01       	movw	r18, r28
    645a:	a4 01       	movw	r20, r8
    645c:	6f 2d       	mov	r22, r15
    645e:	c6 01       	movw	r24, r12
    6460:	0e 94 95 30 	call	0x612a	; 0x612a <conv_brk>
    6464:	ec 01       	movw	r28, r24
    6466:	89 2b       	or	r24, r25
    6468:	09 f0       	breq	.+2      	; 0x646c <vfscanf+0x18c>
    646a:	44 c0       	rjmp	.+136    	; 0x64f4 <vfscanf+0x214>
    646c:	3e c0       	rjmp	.+124    	; 0x64ea <vfscanf+0x20a>
    646e:	c6 01       	movw	r24, r12
    6470:	0e 94 ea 2f 	call	0x5fd4	; 0x5fd4 <skip_spaces>
    6474:	97 fd       	sbrc	r25, 7
    6476:	42 c0       	rjmp	.+132    	; 0x64fc <vfscanf+0x21c>
    6478:	1f 36       	cpi	r17, 0x6F	; 111
    647a:	61 f1       	breq	.+88     	; 0x64d4 <vfscanf+0x1f4>
    647c:	28 f4       	brcc	.+10     	; 0x6488 <vfscanf+0x1a8>
    647e:	14 36       	cpi	r17, 0x64	; 100
    6480:	39 f1       	breq	.+78     	; 0x64d0 <vfscanf+0x1f0>
    6482:	19 36       	cpi	r17, 0x69	; 105
    6484:	51 f1       	breq	.+84     	; 0x64da <vfscanf+0x1fa>
    6486:	28 c0       	rjmp	.+80     	; 0x64d8 <vfscanf+0x1f8>
    6488:	13 37       	cpi	r17, 0x73	; 115
    648a:	71 f0       	breq	.+28     	; 0x64a8 <vfscanf+0x1c8>
    648c:	15 37       	cpi	r17, 0x75	; 117
    648e:	01 f1       	breq	.+64     	; 0x64d0 <vfscanf+0x1f0>
    6490:	23 c0       	rjmp	.+70     	; 0x64d8 <vfscanf+0x1f8>
    6492:	81 14       	cp	r8, r1
    6494:	91 04       	cpc	r9, r1
    6496:	29 f0       	breq	.+10     	; 0x64a2 <vfscanf+0x1c2>
    6498:	f4 01       	movw	r30, r8
    649a:	60 82       	st	Z, r6
    649c:	c4 01       	movw	r24, r8
    649e:	01 96       	adiw	r24, 0x01	; 1
    64a0:	4c 01       	movw	r8, r24
    64a2:	fa 94       	dec	r15
    64a4:	ff 20       	and	r15, r15
    64a6:	71 f0       	breq	.+28     	; 0x64c4 <vfscanf+0x1e4>
    64a8:	c6 01       	movw	r24, r12
    64aa:	0e 94 bf 32 	call	0x657e	; 0x657e <fgetc>
    64ae:	3c 01       	movw	r6, r24
    64b0:	97 fd       	sbrc	r25, 7
    64b2:	08 c0       	rjmp	.+16     	; 0x64c4 <vfscanf+0x1e4>
    64b4:	0e 94 95 32 	call	0x652a	; 0x652a <isspace>
    64b8:	89 2b       	or	r24, r25
    64ba:	59 f3       	breq	.-42     	; 0x6492 <vfscanf+0x1b2>
    64bc:	b6 01       	movw	r22, r12
    64be:	c3 01       	movw	r24, r6
    64c0:	0e 94 39 33 	call	0x6672	; 0x6672 <ungetc>
    64c4:	81 14       	cp	r8, r1
    64c6:	91 04       	cpc	r9, r1
    64c8:	a9 f0       	breq	.+42     	; 0x64f4 <vfscanf+0x214>
    64ca:	f4 01       	movw	r30, r8
    64cc:	10 82       	st	Z, r1
    64ce:	12 c0       	rjmp	.+36     	; 0x64f4 <vfscanf+0x214>
    64d0:	00 62       	ori	r16, 0x20	; 32
    64d2:	03 c0       	rjmp	.+6      	; 0x64da <vfscanf+0x1fa>
    64d4:	00 61       	ori	r16, 0x10	; 16
    64d6:	01 c0       	rjmp	.+2      	; 0x64da <vfscanf+0x1fa>
    64d8:	00 64       	ori	r16, 0x40	; 64
    64da:	20 2f       	mov	r18, r16
    64dc:	a4 01       	movw	r20, r8
    64de:	6f 2d       	mov	r22, r15
    64e0:	c6 01       	movw	r24, r12
    64e2:	0e 94 03 30 	call	0x6006	; 0x6006 <conv_int>
    64e6:	81 11       	cpse	r24, r1
    64e8:	05 c0       	rjmp	.+10     	; 0x64f4 <vfscanf+0x214>
    64ea:	f6 01       	movw	r30, r12
    64ec:	83 81       	ldd	r24, Z+3	; 0x03
    64ee:	80 73       	andi	r24, 0x30	; 48
    64f0:	29 f4       	brne	.+10     	; 0x64fc <vfscanf+0x21c>
    64f2:	06 c0       	rjmp	.+12     	; 0x6500 <vfscanf+0x220>
    64f4:	00 fd       	sbrc	r16, 0
    64f6:	0a cf       	rjmp	.-492    	; 0x630c <vfscanf+0x2c>
    64f8:	53 94       	inc	r5
    64fa:	08 cf       	rjmp	.-496    	; 0x630c <vfscanf+0x2c>
    64fc:	55 20       	and	r5, r5
    64fe:	19 f0       	breq	.+6      	; 0x6506 <vfscanf+0x226>
    6500:	85 2d       	mov	r24, r5
    6502:	90 e0       	ldi	r25, 0x00	; 0
    6504:	02 c0       	rjmp	.+4      	; 0x650a <vfscanf+0x22a>
    6506:	8f ef       	ldi	r24, 0xFF	; 255
    6508:	9f ef       	ldi	r25, 0xFF	; 255
    650a:	df 91       	pop	r29
    650c:	cf 91       	pop	r28
    650e:	1f 91       	pop	r17
    6510:	0f 91       	pop	r16
    6512:	ff 90       	pop	r15
    6514:	ef 90       	pop	r14
    6516:	df 90       	pop	r13
    6518:	cf 90       	pop	r12
    651a:	bf 90       	pop	r11
    651c:	af 90       	pop	r10
    651e:	9f 90       	pop	r9
    6520:	8f 90       	pop	r8
    6522:	7f 90       	pop	r7
    6524:	6f 90       	pop	r6
    6526:	5f 90       	pop	r5
    6528:	08 95       	ret

0000652a <isspace>:
    652a:	91 11       	cpse	r25, r1
    652c:	0c 94 b0 33 	jmp	0x6760	; 0x6760 <__ctype_isfalse>
    6530:	80 32       	cpi	r24, 0x20	; 32
    6532:	19 f0       	breq	.+6      	; 0x653a <isspace+0x10>
    6534:	89 50       	subi	r24, 0x09	; 9
    6536:	85 50       	subi	r24, 0x05	; 5
    6538:	c8 f7       	brcc	.-14     	; 0x652c <isspace+0x2>
    653a:	08 95       	ret

0000653c <strchr_P>:
    653c:	fc 01       	movw	r30, r24
    653e:	05 90       	lpm	r0, Z+
    6540:	06 16       	cp	r0, r22
    6542:	21 f0       	breq	.+8      	; 0x654c <strchr_P+0x10>
    6544:	00 20       	and	r0, r0
    6546:	d9 f7       	brne	.-10     	; 0x653e <strchr_P+0x2>
    6548:	c0 01       	movw	r24, r0
    654a:	08 95       	ret
    654c:	31 97       	sbiw	r30, 0x01	; 1
    654e:	cf 01       	movw	r24, r30
    6550:	08 95       	ret

00006552 <strnlen_P>:
    6552:	fc 01       	movw	r30, r24
    6554:	05 90       	lpm	r0, Z+
    6556:	61 50       	subi	r22, 0x01	; 1
    6558:	70 40       	sbci	r23, 0x00	; 0
    655a:	01 10       	cpse	r0, r1
    655c:	d8 f7       	brcc	.-10     	; 0x6554 <strnlen_P+0x2>
    655e:	80 95       	com	r24
    6560:	90 95       	com	r25
    6562:	8e 0f       	add	r24, r30
    6564:	9f 1f       	adc	r25, r31
    6566:	08 95       	ret

00006568 <strnlen>:
    6568:	fc 01       	movw	r30, r24
    656a:	61 50       	subi	r22, 0x01	; 1
    656c:	70 40       	sbci	r23, 0x00	; 0
    656e:	01 90       	ld	r0, Z+
    6570:	01 10       	cpse	r0, r1
    6572:	d8 f7       	brcc	.-10     	; 0x656a <strnlen+0x2>
    6574:	80 95       	com	r24
    6576:	90 95       	com	r25
    6578:	8e 0f       	add	r24, r30
    657a:	9f 1f       	adc	r25, r31
    657c:	08 95       	ret

0000657e <fgetc>:
    657e:	cf 93       	push	r28
    6580:	df 93       	push	r29
    6582:	ec 01       	movw	r28, r24
    6584:	2b 81       	ldd	r18, Y+3	; 0x03
    6586:	20 ff       	sbrs	r18, 0
    6588:	33 c0       	rjmp	.+102    	; 0x65f0 <fgetc+0x72>
    658a:	26 ff       	sbrs	r18, 6
    658c:	0a c0       	rjmp	.+20     	; 0x65a2 <fgetc+0x24>
    658e:	2f 7b       	andi	r18, 0xBF	; 191
    6590:	2b 83       	std	Y+3, r18	; 0x03
    6592:	8e 81       	ldd	r24, Y+6	; 0x06
    6594:	9f 81       	ldd	r25, Y+7	; 0x07
    6596:	01 96       	adiw	r24, 0x01	; 1
    6598:	8e 83       	std	Y+6, r24	; 0x06
    659a:	9f 83       	std	Y+7, r25	; 0x07
    659c:	8a 81       	ldd	r24, Y+2	; 0x02
    659e:	90 e0       	ldi	r25, 0x00	; 0
    65a0:	29 c0       	rjmp	.+82     	; 0x65f4 <fgetc+0x76>
    65a2:	22 ff       	sbrs	r18, 2
    65a4:	0f c0       	rjmp	.+30     	; 0x65c4 <fgetc+0x46>
    65a6:	e8 81       	ld	r30, Y
    65a8:	f9 81       	ldd	r31, Y+1	; 0x01
    65aa:	80 81       	ld	r24, Z
    65ac:	08 2e       	mov	r0, r24
    65ae:	00 0c       	add	r0, r0
    65b0:	99 0b       	sbc	r25, r25
    65b2:	00 97       	sbiw	r24, 0x00	; 0
    65b4:	19 f4       	brne	.+6      	; 0x65bc <fgetc+0x3e>
    65b6:	20 62       	ori	r18, 0x20	; 32
    65b8:	2b 83       	std	Y+3, r18	; 0x03
    65ba:	1a c0       	rjmp	.+52     	; 0x65f0 <fgetc+0x72>
    65bc:	31 96       	adiw	r30, 0x01	; 1
    65be:	e8 83       	st	Y, r30
    65c0:	f9 83       	std	Y+1, r31	; 0x01
    65c2:	0e c0       	rjmp	.+28     	; 0x65e0 <fgetc+0x62>
    65c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    65c6:	fb 85       	ldd	r31, Y+11	; 0x0b
    65c8:	19 95       	eicall
    65ca:	97 ff       	sbrs	r25, 7
    65cc:	09 c0       	rjmp	.+18     	; 0x65e0 <fgetc+0x62>
    65ce:	2b 81       	ldd	r18, Y+3	; 0x03
    65d0:	01 96       	adiw	r24, 0x01	; 1
    65d2:	11 f0       	breq	.+4      	; 0x65d8 <fgetc+0x5a>
    65d4:	80 e2       	ldi	r24, 0x20	; 32
    65d6:	01 c0       	rjmp	.+2      	; 0x65da <fgetc+0x5c>
    65d8:	80 e1       	ldi	r24, 0x10	; 16
    65da:	82 2b       	or	r24, r18
    65dc:	8b 83       	std	Y+3, r24	; 0x03
    65de:	08 c0       	rjmp	.+16     	; 0x65f0 <fgetc+0x72>
    65e0:	2e 81       	ldd	r18, Y+6	; 0x06
    65e2:	3f 81       	ldd	r19, Y+7	; 0x07
    65e4:	2f 5f       	subi	r18, 0xFF	; 255
    65e6:	3f 4f       	sbci	r19, 0xFF	; 255
    65e8:	2e 83       	std	Y+6, r18	; 0x06
    65ea:	3f 83       	std	Y+7, r19	; 0x07
    65ec:	99 27       	eor	r25, r25
    65ee:	02 c0       	rjmp	.+4      	; 0x65f4 <fgetc+0x76>
    65f0:	8f ef       	ldi	r24, 0xFF	; 255
    65f2:	9f ef       	ldi	r25, 0xFF	; 255
    65f4:	df 91       	pop	r29
    65f6:	cf 91       	pop	r28
    65f8:	08 95       	ret

000065fa <fputc>:
    65fa:	0f 93       	push	r16
    65fc:	1f 93       	push	r17
    65fe:	cf 93       	push	r28
    6600:	df 93       	push	r29
    6602:	fb 01       	movw	r30, r22
    6604:	23 81       	ldd	r18, Z+3	; 0x03
    6606:	21 fd       	sbrc	r18, 1
    6608:	03 c0       	rjmp	.+6      	; 0x6610 <fputc+0x16>
    660a:	8f ef       	ldi	r24, 0xFF	; 255
    660c:	9f ef       	ldi	r25, 0xFF	; 255
    660e:	2c c0       	rjmp	.+88     	; 0x6668 <fputc+0x6e>
    6610:	22 ff       	sbrs	r18, 2
    6612:	16 c0       	rjmp	.+44     	; 0x6640 <fputc+0x46>
    6614:	46 81       	ldd	r20, Z+6	; 0x06
    6616:	57 81       	ldd	r21, Z+7	; 0x07
    6618:	24 81       	ldd	r18, Z+4	; 0x04
    661a:	35 81       	ldd	r19, Z+5	; 0x05
    661c:	42 17       	cp	r20, r18
    661e:	53 07       	cpc	r21, r19
    6620:	44 f4       	brge	.+16     	; 0x6632 <fputc+0x38>
    6622:	a0 81       	ld	r26, Z
    6624:	b1 81       	ldd	r27, Z+1	; 0x01
    6626:	9d 01       	movw	r18, r26
    6628:	2f 5f       	subi	r18, 0xFF	; 255
    662a:	3f 4f       	sbci	r19, 0xFF	; 255
    662c:	20 83       	st	Z, r18
    662e:	31 83       	std	Z+1, r19	; 0x01
    6630:	8c 93       	st	X, r24
    6632:	26 81       	ldd	r18, Z+6	; 0x06
    6634:	37 81       	ldd	r19, Z+7	; 0x07
    6636:	2f 5f       	subi	r18, 0xFF	; 255
    6638:	3f 4f       	sbci	r19, 0xFF	; 255
    663a:	26 83       	std	Z+6, r18	; 0x06
    663c:	37 83       	std	Z+7, r19	; 0x07
    663e:	14 c0       	rjmp	.+40     	; 0x6668 <fputc+0x6e>
    6640:	8b 01       	movw	r16, r22
    6642:	ec 01       	movw	r28, r24
    6644:	fb 01       	movw	r30, r22
    6646:	00 84       	ldd	r0, Z+8	; 0x08
    6648:	f1 85       	ldd	r31, Z+9	; 0x09
    664a:	e0 2d       	mov	r30, r0
    664c:	19 95       	eicall
    664e:	89 2b       	or	r24, r25
    6650:	e1 f6       	brne	.-72     	; 0x660a <fputc+0x10>
    6652:	d8 01       	movw	r26, r16
    6654:	16 96       	adiw	r26, 0x06	; 6
    6656:	8d 91       	ld	r24, X+
    6658:	9c 91       	ld	r25, X
    665a:	17 97       	sbiw	r26, 0x07	; 7
    665c:	01 96       	adiw	r24, 0x01	; 1
    665e:	16 96       	adiw	r26, 0x06	; 6
    6660:	8d 93       	st	X+, r24
    6662:	9c 93       	st	X, r25
    6664:	17 97       	sbiw	r26, 0x07	; 7
    6666:	ce 01       	movw	r24, r28
    6668:	df 91       	pop	r29
    666a:	cf 91       	pop	r28
    666c:	1f 91       	pop	r17
    666e:	0f 91       	pop	r16
    6670:	08 95       	ret

00006672 <ungetc>:
    6672:	fb 01       	movw	r30, r22
    6674:	23 81       	ldd	r18, Z+3	; 0x03
    6676:	20 ff       	sbrs	r18, 0
    6678:	12 c0       	rjmp	.+36     	; 0x669e <ungetc+0x2c>
    667a:	26 fd       	sbrc	r18, 6
    667c:	10 c0       	rjmp	.+32     	; 0x669e <ungetc+0x2c>
    667e:	8f 3f       	cpi	r24, 0xFF	; 255
    6680:	3f ef       	ldi	r19, 0xFF	; 255
    6682:	93 07       	cpc	r25, r19
    6684:	61 f0       	breq	.+24     	; 0x669e <ungetc+0x2c>
    6686:	82 83       	std	Z+2, r24	; 0x02
    6688:	2f 7d       	andi	r18, 0xDF	; 223
    668a:	20 64       	ori	r18, 0x40	; 64
    668c:	23 83       	std	Z+3, r18	; 0x03
    668e:	26 81       	ldd	r18, Z+6	; 0x06
    6690:	37 81       	ldd	r19, Z+7	; 0x07
    6692:	21 50       	subi	r18, 0x01	; 1
    6694:	31 09       	sbc	r19, r1
    6696:	26 83       	std	Z+6, r18	; 0x06
    6698:	37 83       	std	Z+7, r19	; 0x07
    669a:	99 27       	eor	r25, r25
    669c:	08 95       	ret
    669e:	8f ef       	ldi	r24, 0xFF	; 255
    66a0:	9f ef       	ldi	r25, 0xFF	; 255
    66a2:	08 95       	ret

000066a4 <__ultoa_invert>:
    66a4:	fa 01       	movw	r30, r20
    66a6:	aa 27       	eor	r26, r26
    66a8:	28 30       	cpi	r18, 0x08	; 8
    66aa:	51 f1       	breq	.+84     	; 0x6700 <__ultoa_invert+0x5c>
    66ac:	20 31       	cpi	r18, 0x10	; 16
    66ae:	81 f1       	breq	.+96     	; 0x6710 <__ultoa_invert+0x6c>
    66b0:	e8 94       	clt
    66b2:	6f 93       	push	r22
    66b4:	6e 7f       	andi	r22, 0xFE	; 254
    66b6:	6e 5f       	subi	r22, 0xFE	; 254
    66b8:	7f 4f       	sbci	r23, 0xFF	; 255
    66ba:	8f 4f       	sbci	r24, 0xFF	; 255
    66bc:	9f 4f       	sbci	r25, 0xFF	; 255
    66be:	af 4f       	sbci	r26, 0xFF	; 255
    66c0:	b1 e0       	ldi	r27, 0x01	; 1
    66c2:	3e d0       	rcall	.+124    	; 0x6740 <__ultoa_invert+0x9c>
    66c4:	b4 e0       	ldi	r27, 0x04	; 4
    66c6:	3c d0       	rcall	.+120    	; 0x6740 <__ultoa_invert+0x9c>
    66c8:	67 0f       	add	r22, r23
    66ca:	78 1f       	adc	r23, r24
    66cc:	89 1f       	adc	r24, r25
    66ce:	9a 1f       	adc	r25, r26
    66d0:	a1 1d       	adc	r26, r1
    66d2:	68 0f       	add	r22, r24
    66d4:	79 1f       	adc	r23, r25
    66d6:	8a 1f       	adc	r24, r26
    66d8:	91 1d       	adc	r25, r1
    66da:	a1 1d       	adc	r26, r1
    66dc:	6a 0f       	add	r22, r26
    66de:	71 1d       	adc	r23, r1
    66e0:	81 1d       	adc	r24, r1
    66e2:	91 1d       	adc	r25, r1
    66e4:	a1 1d       	adc	r26, r1
    66e6:	20 d0       	rcall	.+64     	; 0x6728 <__ultoa_invert+0x84>
    66e8:	09 f4       	brne	.+2      	; 0x66ec <__ultoa_invert+0x48>
    66ea:	68 94       	set
    66ec:	3f 91       	pop	r19
    66ee:	2a e0       	ldi	r18, 0x0A	; 10
    66f0:	26 9f       	mul	r18, r22
    66f2:	11 24       	eor	r1, r1
    66f4:	30 19       	sub	r19, r0
    66f6:	30 5d       	subi	r19, 0xD0	; 208
    66f8:	31 93       	st	Z+, r19
    66fa:	de f6       	brtc	.-74     	; 0x66b2 <__ultoa_invert+0xe>
    66fc:	cf 01       	movw	r24, r30
    66fe:	08 95       	ret
    6700:	46 2f       	mov	r20, r22
    6702:	47 70       	andi	r20, 0x07	; 7
    6704:	40 5d       	subi	r20, 0xD0	; 208
    6706:	41 93       	st	Z+, r20
    6708:	b3 e0       	ldi	r27, 0x03	; 3
    670a:	0f d0       	rcall	.+30     	; 0x672a <__ultoa_invert+0x86>
    670c:	c9 f7       	brne	.-14     	; 0x6700 <__ultoa_invert+0x5c>
    670e:	f6 cf       	rjmp	.-20     	; 0x66fc <__ultoa_invert+0x58>
    6710:	46 2f       	mov	r20, r22
    6712:	4f 70       	andi	r20, 0x0F	; 15
    6714:	40 5d       	subi	r20, 0xD0	; 208
    6716:	4a 33       	cpi	r20, 0x3A	; 58
    6718:	18 f0       	brcs	.+6      	; 0x6720 <__ultoa_invert+0x7c>
    671a:	49 5d       	subi	r20, 0xD9	; 217
    671c:	31 fd       	sbrc	r19, 1
    671e:	40 52       	subi	r20, 0x20	; 32
    6720:	41 93       	st	Z+, r20
    6722:	02 d0       	rcall	.+4      	; 0x6728 <__ultoa_invert+0x84>
    6724:	a9 f7       	brne	.-22     	; 0x6710 <__ultoa_invert+0x6c>
    6726:	ea cf       	rjmp	.-44     	; 0x66fc <__ultoa_invert+0x58>
    6728:	b4 e0       	ldi	r27, 0x04	; 4
    672a:	a6 95       	lsr	r26
    672c:	97 95       	ror	r25
    672e:	87 95       	ror	r24
    6730:	77 95       	ror	r23
    6732:	67 95       	ror	r22
    6734:	ba 95       	dec	r27
    6736:	c9 f7       	brne	.-14     	; 0x672a <__ultoa_invert+0x86>
    6738:	00 97       	sbiw	r24, 0x00	; 0
    673a:	61 05       	cpc	r22, r1
    673c:	71 05       	cpc	r23, r1
    673e:	08 95       	ret
    6740:	9b 01       	movw	r18, r22
    6742:	ac 01       	movw	r20, r24
    6744:	0a 2e       	mov	r0, r26
    6746:	06 94       	lsr	r0
    6748:	57 95       	ror	r21
    674a:	47 95       	ror	r20
    674c:	37 95       	ror	r19
    674e:	27 95       	ror	r18
    6750:	ba 95       	dec	r27
    6752:	c9 f7       	brne	.-14     	; 0x6746 <__ultoa_invert+0xa2>
    6754:	62 0f       	add	r22, r18
    6756:	73 1f       	adc	r23, r19
    6758:	84 1f       	adc	r24, r20
    675a:	95 1f       	adc	r25, r21
    675c:	a0 1d       	adc	r26, r0
    675e:	08 95       	ret

00006760 <__ctype_isfalse>:
    6760:	99 27       	eor	r25, r25
    6762:	88 27       	eor	r24, r24

00006764 <__ctype_istrue>:
    6764:	08 95       	ret

00006766 <_exit>:
    6766:	f8 94       	cli

00006768 <__stop_program>:
    6768:	ff cf       	rjmp	.-2      	; 0x6768 <__stop_program>
